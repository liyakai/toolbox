<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs >
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	.func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
</style>
<script type="text/ecmascript">
<![CDATA[
	var details, searchbtn, matchedtxt, svg;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	// mouse-over for info
	function s(node) {		// show
		info = g_to_text(node);
		details.nodeValue = "Function: " + info;
	}
	function c() {			// clear
		details.nodeValue = ' ';
	}

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	})

	// functions
	function find_child(parent, name, attr) {
		var children = parent.childNodes;
		for (var i=0; i<children.length;i++) {
			if (children[i].tagName == name)
				return (attr != undefined) ? children[i].attributes[attr].value : children[i];
		}
		return;
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_"+attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_"+attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_"+attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes["width"].value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes["x"].value = parseFloat(r.attributes["x"].value) +3;

		// Smaller than this size won't fit anything
		if (w < 2*12*0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x=txt.length-2; x>0; x--) {
			if (t.getSubStringLength(0, x+2) <= w) {
				t.textContent = txt.substring(0,x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = (parseFloat(e.attributes["x"].value) - x - 10) * ratio + 10;
				if(e.tagName == "text") e.attributes["x"].value = find_child(e.parentNode, "rect", "x") + 3;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseFloat(e.attributes["width"].value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_child(c[i], x-10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes["x"] != undefined) {
				orig_save(e, "x");
				e.attributes["x"].value = 10;
			}
			if (e.attributes["width"] != undefined) {
				orig_save(e, "width");
				e.attributes["width"].value = parseInt(svg.width.baseVal.value) - (10*2);
			}
		}
		if (e.childNodes == undefined) return;
		for(var i=0, c=e.childNodes; i<c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr["width"].value);
		var xmin = parseFloat(attr["x"].value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr["y"].value);
		var ratio = (svg.width.baseVal.value - 2*10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "1.0";

		var el = document.getElementsByTagName("g");
		for(var i=0;i<el.length;i++){
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a["x"].value);
			var ew = parseFloat(a["width"].value);
			// Is it an ancestor
			if (0 == 0) {
				var upstack = parseFloat(a["y"].value) > ymin;
			} else {
				var upstack = parseFloat(a["y"].value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.style["opacity"] = "0.5";
					zoom_parent(e);
					e.onclick = function(e){unzoom(); zoom(this);};
					update_text(e);
				}
				// not in current path
				else
					e.style["display"] = "none";
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.style["display"] = "none";
				}
				else {
					zoom_child(e, xmin, ratio);
					e.onclick = function(e){zoom(this);};
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		var unzoombtn = document.getElementById("unzoom");
		unzoombtn.style["opacity"] = "0.0";

		var el = document.getElementsByTagName("g");
		for(i=0;i<el.length;i++) {
			el[i].style["display"] = "block";
			el[i].style["opacity"] = "1";
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.getElementsByTagName("rect");
		for (var i=0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.style["opacity"] = "0.1";
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.style["opacity"] = "0.0";
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementsByTagName("g");
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			if (e.attributes["class"].value != "func_g")
				continue;
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (rect == null) {
				// the rect might be wrapped in an anchor
				// if nameattr href is being used
				if (rect = find_child(e, "a")) {
				    rect = find_child(r, "rect");
				}
			}
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes["width"].value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes["x"].value);
				orig_save(rect, "fill");
				rect.attributes["fill"].value =
				    "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.style["opacity"] = "1.0";
		searchbtn.firstChild.nodeValue = "Reset Search"

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.style["opacity"] = "1.0";
		pct = 100 * count / maxwidth;
		if (pct == 100)
			pct = "100"
		else
			pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
	function searchover(e) {
		searchbtn.style["opacity"] = "1.0";
	}
	function searchout(e) {
		if (searching) {
			searchbtn.style["opacity"] = "1.0";
		} else {
			searchbtn.style["opacity"] = "0.1";
		}
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text text-anchor="middle" x="600.00" y="24" font-size="17" font-family="Verdana" fill="rgb(0,0,0)"  >Flame Graph</text>
<text text-anchor="" x="10.00" y="293" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="details" > </text>
<text text-anchor="" x="10.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="unzoom" onclick="unzoom()" style="opacity:0.0;cursor:pointer" >Reset Zoom</text>
<text text-anchor="" x="1090.00" y="24" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="search" onmouseover="searchover()" onmouseout="searchout()" onclick="search_prompt()" style="opacity:0.1;cursor:pointer" >Search</text>
<text text-anchor="" x="1090.00" y="293" font-size="12" font-family="Verdana" fill="rgb(0,0,0)" id="matched" > </text>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::operator&amp; (1 samples, 0.05%)</title><rect x="198.8" y="53" width="0.6" height="15.0" fill="rgb(240,99,36)" rx="2" ry="2" />
<text text-anchor="" x="201.80" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>NetworkMaster::Update (19 samples, 0.94%)</title><rect x="188.9" y="117" width="11.1" height="15.0" fill="rgb(209,126,17)" rx="2" ry="2" />
<text text-anchor="" x="191.89" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (3 samples, 0.15%)</title><rect x="279.8" y="85" width="1.7" height="15.0" fill="rgb(252,45,47)" rx="2" ry="2" />
<text text-anchor="" x="282.80" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::array&lt;std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;, 4ul&gt;::data (2 samples, 0.10%)</title><rect x="77.0" y="117" width="1.2" height="15.0" fill="rgb(240,223,13)" rx="2" ry="2" />
<text text-anchor="" x="80.01" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (1 samples, 0.05%)</title><rect x="286.2" y="69" width="0.6" height="15.0" fill="rgb(253,149,31)" rx="2" ry="2" />
<text text-anchor="" x="289.21" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>namespace_TcpNetwork::case_test_tcp_forward::Run (290 samples, 14.32%)</title><rect x="128.9" y="133" width="169.0" height="15.0" fill="rgb(207,53,28)" rx="2" ry="2" />
<text text-anchor="" x="131.87" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >namespace_TcpNetwork:..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;::duration&lt;long, void&gt; (1 samples, 0.05%)</title><rect x="281.5" y="85" width="0.6" height="15.0" fill="rgb(248,210,47)" rx="2" ry="2" />
<text text-anchor="" x="284.55" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000l&gt; &gt; (14 samples, 0.69%)</title><rect x="267.6" y="101" width="8.1" height="15.0" fill="rgb(208,44,0)" rx="2" ry="2" />
<text text-anchor="" x="270.56" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>NetworkMaster::Start (174 samples, 8.59%)</title><rect x="11.7" y="133" width="101.4" height="15.0" fill="rgb(246,197,44)" rx="2" ry="2" />
<text text-anchor="" x="14.75" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >NetworkMaste..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::zero (2 samples, 0.10%)</title><rect x="236.7" y="117" width="1.1" height="15.0" fill="rgb(236,192,36)" rx="2" ry="2" />
<text text-anchor="" x="239.68" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::operator&amp; (9 samples, 0.44%)</title><rect x="212.8" y="101" width="5.2" height="15.0" fill="rgb(242,28,53)" rx="2" ry="2" />
<text text-anchor="" x="215.79" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__atomic_base&lt;unsigned long&gt;::operator unsigned long (5 samples, 0.25%)</title><rect x="61.3" y="69" width="2.9" height="15.0" fill="rgb(222,96,47)" rx="2" ry="2" />
<text text-anchor="" x="64.28" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (6 samples, 0.30%)</title><rect x="286.8" y="69" width="3.5" height="15.0" fill="rgb(244,49,27)" rx="2" ry="2" />
<text text-anchor="" x="289.79" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>EpollCtrl::EpollWait (9 samples, 0.44%)</title><rect x="39.1" y="85" width="5.3" height="15.0" fill="rgb(240,97,47)" rx="2" ry="2" />
<text text-anchor="" x="42.14" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__invoke&lt;namespace_TcpNetwork::case_test_tcp_forward::Run (319 samples, 15.75%)</title><rect x="116.6" y="165" width="185.9" height="15.0" fill="rgb(234,76,39)" rx="2" ry="2" />
<text text-anchor="" x="119.64" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::__invoke&lt;namespace_..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::duration&lt;int, void&gt; (1 samples, 0.05%)</title><rect x="236.1" y="117" width="0.6" height="15.0" fill="rgb(213,174,13)" rx="2" ry="2" />
<text text-anchor="" x="239.09" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::this_thread::sleep_for&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (8 samples, 0.40%)</title><rect x="297.9" y="133" width="4.6" height="15.0" fill="rgb(238,75,10)" rx="2" ry="2" />
<text text-anchor="" x="300.86" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>tcp_forward (2,025 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(224,25,40)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="255.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >tcp_forward</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>NetworkMaster::DispatchMainEvent_ (18 samples, 0.89%)</title><rect x="188.9" y="101" width="10.5" height="15.0" fill="rgb(248,54,43)" rx="2" ry="2" />
<text text-anchor="" x="191.89" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::operator bool (41 samples, 2.02%)</title><rect x="88.7" y="117" width="23.9" height="15.0" fill="rgb(231,158,11)" rx="2" ry="2" />
<text text-anchor="" x="91.67" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>nanosleep@plt (3 samples, 0.15%)</title><rect x="227.9" y="117" width="1.8" height="15.0" fill="rgb(249,69,3)" rx="2" ry="2" />
<text text-anchor="" x="230.94" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (2 samples, 0.10%)</title><rect x="260.0" y="101" width="1.2" height="15.0" fill="rgb(216,105,42)" rx="2" ry="2" />
<text text-anchor="" x="262.99" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__nanosleep (1,025 samples, 50.62%)</title><rect x="309.5" y="213" width="597.3" height="15.0" fill="rgb(249,84,52)" rx="2" ry="2" />
<text text-anchor="" x="312.52" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >__nanosleep</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (1 samples, 0.05%)</title><rect x="235.5" y="117" width="0.6" height="15.0" fill="rgb(211,210,48)" rx="2" ry="2" />
<text text-anchor="" x="238.51" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::duration&lt;long, void&gt; (1 samples, 0.05%)</title><rect x="263.5" y="101" width="0.6" height="15.0" fill="rgb(252,56,45)" rx="2" ry="2" />
<text text-anchor="" x="266.48" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;, long, std::ratio&lt;1l, 1000l&gt; &gt; (11 samples, 0.54%)</title><rect x="275.7" y="101" width="6.4" height="15.0" fill="rgb(218,146,33)" rx="2" ry="2" />
<text text-anchor="" x="278.72" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;, std::ratio&lt;1l, 1000l&gt;, long, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (7 samples, 0.35%)</title><rect x="275.7" y="85" width="4.1" height="15.0" fill="rgb(221,97,20)" rx="2" ry="2" />
<text text-anchor="" x="278.72" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>epoll_wait (461 samples, 22.77%)</title><rect x="921.4" y="213" width="268.6" height="15.0" fill="rgb(225,111,22)" rx="2" ry="2" />
<text text-anchor="" x="924.37" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >epoll_wait</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::this_thread::sleep_for&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (101 samples, 4.99%)</title><rect x="239.0" y="117" width="58.9" height="15.0" fill="rgb(225,156,13)" rx="2" ry="2" />
<text text-anchor="" x="242.01" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::t..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Tuple_impl&lt;0ul, INetwork*, std::default_delete&lt;INetwork&gt; &gt;::_M_head (1 samples, 0.05%)</title><rect x="107.9" y="37" width="0.6" height="15.0" fill="rgb(233,28,16)" rx="2" ry="2" />
<text text-anchor="" x="110.90" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::array&lt;std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;, 4ul&gt;::begin (1 samples, 0.05%)</title><rect x="76.4" y="117" width="0.6" height="15.0" fill="rgb(239,45,32)" rx="2" ry="2" />
<text text-anchor="" x="79.43" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::duration&lt;long, void&gt; (1 samples, 0.05%)</title><rect x="289.7" y="37" width="0.6" height="15.0" fill="rgb(234,169,34)" rx="2" ry="2" />
<text text-anchor="" x="292.70" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::get (37 samples, 1.83%)</title><rect x="91.0" y="101" width="21.6" height="15.0" fill="rgb(205,95,25)" rx="2" ry="2" />
<text text-anchor="" x="94.00" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >s..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__invoke&lt;NetworkMaster::Start (183 samples, 9.04%)</title><rect x="10.0" y="165" width="106.6" height="15.0" fill="rgb(222,158,38)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::__invoke..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::this_thread::sleep_for&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (1 samples, 0.05%)</title><rect x="308.9" y="149" width="0.6" height="15.0" fill="rgb(238,84,6)" rx="2" ry="2" />
<text text-anchor="" x="311.93" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>EpollCtrl::RunOnce (26 samples, 1.28%)</title><rect x="36.8" y="101" width="15.2" height="15.0" fill="rgb(249,150,22)" rx="2" ry="2" />
<text text-anchor="" x="39.80" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[unknown] (1,523 samples, 75.21%)</title><rect x="302.5" y="229" width="887.5" height="15.0" fill="rgb(218,74,27)" rx="2" ry="2" />
<text text-anchor="" x="305.52" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >[unknown]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Tuple_impl&lt;0ul, INetwork*, std::default_delete&lt;INetwork&gt; &gt;::_M_head (2 samples, 0.10%)</title><rect x="102.7" y="53" width="1.1" height="15.0" fill="rgb(241,142,5)" rx="2" ry="2" />
<text text-anchor="" x="105.65" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>INetwork::Update (17 samples, 0.84%)</title><rect x="54.3" y="101" width="9.9" height="15.0" fill="rgb(246,185,19)" rx="2" ry="2" />
<text text-anchor="" x="57.29" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::atomic&lt;bool&gt;::load (1 samples, 0.05%)</title><rect x="78.8" y="117" width="0.5" height="15.0" fill="rgb(218,108,13)" rx="2" ry="2" />
<text text-anchor="" x="81.76" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__invoke_impl&lt;void, namespace_TcpNetwork::case_test_tcp_forward::Run (319 samples, 15.75%)</title><rect x="116.6" y="149" width="185.9" height="15.0" fill="rgb(229,77,33)" rx="2" ry="2" />
<text text-anchor="" x="119.64" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::__invoke_impl&lt;void,..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::array&lt;std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;, 4ul&gt;::end (1 samples, 0.05%)</title><rect x="78.2" y="117" width="0.6" height="15.0" fill="rgb(205,29,42)" rx="2" ry="2" />
<text text-anchor="" x="81.18" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, long, std::ratio&lt;1l, 1000l&gt; &gt; (1 samples, 0.05%)</title><rect x="308.4" y="117" width="0.5" height="15.0" fill="rgb(218,14,2)" rx="2" ry="2" />
<text text-anchor="" x="311.35" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;::count (3 samples, 0.15%)</title><rect x="265.8" y="101" width="1.8" height="15.0" fill="rgb(240,218,36)" rx="2" ry="2" />
<text text-anchor="" x="268.81" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__atomic_base&lt;unsigned long&gt;::operator unsigned long (11 samples, 0.54%)</title><rect x="193.0" y="69" width="6.4" height="15.0" fill="rgb(234,160,33)" rx="2" ry="2" />
<text text-anchor="" x="195.97" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>epoll_wait (13 samples, 0.64%)</title><rect x="44.4" y="85" width="7.6" height="15.0" fill="rgb(238,51,26)" rx="2" ry="2" />
<text text-anchor="" x="47.38" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>[libstdc++.so.6.0.25] (502 samples, 24.79%)</title><rect x="10.0" y="229" width="292.5" height="15.0" fill="rgb(209,117,40)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="239.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >[libstdc++.so.6.0.25]</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Singleton&lt;TestNetworkForward&gt;::Instance&lt;&gt; (31 samples, 1.53%)</title><rect x="200.0" y="117" width="18.0" height="15.0" fill="rgb(232,219,24)" rx="2" ry="2" />
<text text-anchor="" x="202.97" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1000000l, 1l&gt;, long, false, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (1 samples, 0.05%)</title><rect x="308.4" y="101" width="0.5" height="15.0" fill="rgb(225,216,54)" rx="2" ry="2" />
<text text-anchor="" x="311.35" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_Invoker&lt;std::tuple&lt;NetworkMaster::Start (183 samples, 9.04%)</title><rect x="10.0" y="181" width="106.6" height="15.0" fill="rgb(249,68,34)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::duration&lt;long, void&gt; (3 samples, 0.15%)</title><rect x="264.1" y="85" width="1.7" height="15.0" fill="rgb(219,185,21)" rx="2" ry="2" />
<text text-anchor="" x="267.06" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__get_helper&lt;0ul, INetwork*, std::default_delete&lt;INetwork&gt; &gt; (8 samples, 0.40%)</title><rect x="103.8" y="53" width="4.7" height="15.0" fill="rgb(247,138,0)" rx="2" ry="2" />
<text text-anchor="" x="106.82" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>EpollCtrl::RunOnce (5 samples, 0.25%)</title><rect x="25.2" y="117" width="2.9" height="15.0" fill="rgb(221,6,15)" rx="2" ry="2" />
<text text-anchor="" x="28.15" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__get_helper&lt;0ul, INetwork*, std::default_delete&lt;INetwork&gt; &gt; (9 samples, 0.44%)</title><rect x="96.2" y="69" width="5.3" height="15.0" fill="rgb(209,50,37)" rx="2" ry="2" />
<text text-anchor="" x="99.24" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Singleton&lt;TestNetworkForward&gt;::Instance&lt;&gt; (21 samples, 1.04%)</title><rect x="116.6" y="133" width="12.3" height="15.0" fill="rgb(235,193,1)" rx="2" ry="2" />
<text text-anchor="" x="119.64" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000l&gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (1 samples, 0.05%)</title><rect x="238.4" y="117" width="0.6" height="15.0" fill="rgb(242,154,49)" rx="2" ry="2" />
<text text-anchor="" x="241.42" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__pthread_disable_asynccancel (19 samples, 0.94%)</title><rect x="906.8" y="213" width="11.1" height="15.0" fill="rgb(205,87,40)" rx="2" ry="2" />
<text text-anchor="" x="909.80" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::get (1 samples, 0.05%)</title><rect x="112.6" y="101" width="0.5" height="15.0" fill="rgb(210,209,42)" rx="2" ry="2" />
<text text-anchor="" x="115.56" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;::duration&lt;long, void&gt; (3 samples, 0.15%)</title><rect x="278.0" y="69" width="1.8" height="15.0" fill="rgb(229,212,54)" rx="2" ry="2" />
<text text-anchor="" x="281.05" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__pthread_enable_asynccancel (6 samples, 0.30%)</title><rect x="917.9" y="213" width="3.5" height="15.0" fill="rgb(246,40,20)" rx="2" ry="2" />
<text text-anchor="" x="920.87" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (1 samples, 0.05%)</title><rect x="292.0" y="85" width="0.6" height="15.0" fill="rgb(205,51,40)" rx="2" ry="2" />
<text text-anchor="" x="295.03" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::get&lt;0ul, INetwork*, std::default_delete&lt;INetwork&gt; &gt; (12 samples, 0.59%)</title><rect x="101.5" y="69" width="7.0" height="15.0" fill="rgb(216,191,32)" rx="2" ry="2" />
<text text-anchor="" x="104.49" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (2 samples, 0.10%)</title><rect x="293.2" y="85" width="1.2" height="15.0" fill="rgb(221,120,5)" rx="2" ry="2" />
<text text-anchor="" x="296.20" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (2 samples, 0.10%)</title><rect x="262.3" y="101" width="1.2" height="15.0" fill="rgb(206,92,39)" rx="2" ry="2" />
<text text-anchor="" x="265.32" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::array&lt;std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;, 4ul&gt;::data (1 samples, 0.05%)</title><rect x="76.4" y="101" width="0.6" height="15.0" fill="rgb(210,72,48)" rx="2" ry="2" />
<text text-anchor="" x="79.43" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::ratio&lt;1000000l, 1l&gt;, long, false, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (11 samples, 0.54%)</title><rect x="269.3" y="85" width="6.4" height="15.0" fill="rgb(250,176,6)" rx="2" ry="2" />
<text text-anchor="" x="272.31" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::duration&lt;long, void&gt; (5 samples, 0.25%)</title><rect x="271.1" y="69" width="2.9" height="15.0" fill="rgb(217,189,6)" rx="2" ry="2" />
<text text-anchor="" x="274.06" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>INetwork::HandleEvents_ (4 samples, 0.20%)</title><rect x="52.0" y="101" width="2.3" height="15.0" fill="rgb(230,82,8)" rx="2" ry="2" />
<text text-anchor="" x="54.96" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::operator&lt;=&lt;long, std::ratio&lt;1l, 1000l&gt;, long, std::ratio&lt;1l, 1000l&gt; &gt; (9 samples, 0.44%)</title><rect x="292.6" y="101" width="5.3" height="15.0" fill="rgb(244,51,21)" rx="2" ry="2" />
<text text-anchor="" x="295.62" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ImpNetwork&lt;TcpSocket&gt;::Update (81 samples, 4.00%)</title><rect x="29.2" y="117" width="47.2" height="15.0" fill="rgb(238,112,7)" rx="2" ry="2" />
<text text-anchor="" x="32.23" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >ImpN..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000l&gt;, long, std::ratio&lt;1l, 1l&gt; &gt; (18 samples, 0.89%)</title><rect x="282.1" y="101" width="10.5" height="15.0" fill="rgb(208,44,0)" rx="2" ry="2" />
<text text-anchor="" x="285.13" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__libc_disable_asynccancel (6 samples, 0.30%)</title><rect x="302.5" y="213" width="3.5" height="15.0" fill="rgb(219,2,0)" rx="2" ry="2" />
<text text-anchor="" x="305.52" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>Fixture::RunAllTestCase (5 samples, 0.25%)</title><rect x="306.6" y="165" width="2.9" height="15.0" fill="rgb(209,42,21)" rx="2" ry="2" />
<text text-anchor="" x="309.60" y="175.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::get&lt;0ul, INetwork*, std::default_delete&lt;INetwork&gt; &gt; (7 samples, 0.35%)</title><rect x="108.5" y="85" width="4.1" height="15.0" fill="rgb(218,189,39)" rx="2" ry="2" />
<text text-anchor="" x="111.48" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::operator bool (6 samples, 0.30%)</title><rect x="113.1" y="133" width="3.5" height="15.0" fill="rgb(216,204,2)" rx="2" ry="2" />
<text text-anchor="" x="116.14" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>all (2,025 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(220,78,41)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="271.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_Invoker&lt;std::tuple&lt;NetworkMaster::Start (183 samples, 9.04%)</title><rect x="10.0" y="197" width="106.6" height="15.0" fill="rgb(220,154,45)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_Invoker&lt;std::tuple&lt;namespace_TcpNetwork::case_test_tcp_forward::Run (319 samples, 15.75%)</title><rect x="116.6" y="197" width="185.9" height="15.0" fill="rgb(219,174,54)" rx="2" ry="2" />
<text text-anchor="" x="119.64" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::_Invoker&lt;st..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::duration&lt;long, void&gt; (3 samples, 0.15%)</title><rect x="290.3" y="85" width="1.7" height="15.0" fill="rgb(252,117,49)" rx="2" ry="2" />
<text text-anchor="" x="293.29" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::atomic&lt;TestNetworkForward*&gt;::load (10 samples, 0.49%)</title><rect x="229.7" y="117" width="5.8" height="15.0" fill="rgb(209,144,34)" rx="2" ry="2" />
<text text-anchor="" x="232.68" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>RingBufferSPSC&lt;NetEventMain*, 32768ul&gt;::Empty (1 samples, 0.05%)</title><rect x="199.4" y="101" width="0.6" height="15.0" fill="rgb(249,33,35)" rx="2" ry="2" />
<text text-anchor="" x="202.38" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (3 samples, 0.15%)</title><rect x="274.0" y="69" width="1.7" height="15.0" fill="rgb(238,116,28)" rx="2" ry="2" />
<text text-anchor="" x="276.97" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::operator&lt; &lt;long, std::ratio&lt;1l, 1000l&gt;, long, std::ratio&lt;1l, 1000l&gt; &gt; (6 samples, 0.30%)</title><rect x="294.4" y="85" width="3.5" height="15.0" fill="rgb(225,224,35)" rx="2" ry="2" />
<text text-anchor="" x="297.37" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::atomic&lt;TestNetworkForward*&gt;::load (16 samples, 0.79%)</title><rect x="203.5" y="101" width="9.3" height="15.0" fill="rgb(229,77,30)" rx="2" ry="2" />
<text text-anchor="" x="206.46" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::duration&lt;long, std::ratio&lt;1l, 1l&gt;, void&gt; (9 samples, 0.44%)</title><rect x="285.0" y="85" width="5.3" height="15.0" fill="rgb(213,121,22)" rx="2" ry="2" />
<text text-anchor="" x="288.04" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__nanosleep (17 samples, 0.84%)</title><rect x="218.0" y="117" width="9.9" height="15.0" fill="rgb(245,66,30)" rx="2" ry="2" />
<text text-anchor="" x="221.03" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__invoke_impl&lt;void, NetworkMaster::Start (183 samples, 9.04%)</title><rect x="10.0" y="149" width="106.6" height="15.0" fill="rgb(216,56,33)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::__invoke..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::operator&amp; (4 samples, 0.20%)</title><rect x="79.3" y="117" width="2.4" height="15.0" fill="rgb(206,153,34)" rx="2" ry="2" />
<text text-anchor="" x="82.34" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__libc_start_main (5 samples, 0.25%)</title><rect x="306.6" y="213" width="2.9" height="15.0" fill="rgb(248,180,17)" rx="2" ry="2" />
<text text-anchor="" x="309.60" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__array_traits&lt;std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;, 4ul&gt;::_S_ptr (1 samples, 0.05%)</title><rect x="78.2" y="85" width="0.6" height="15.0" fill="rgb(242,217,27)" rx="2" ry="2" />
<text text-anchor="" x="81.18" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (4 samples, 0.20%)</title><rect x="295.5" y="69" width="2.4" height="15.0" fill="rgb(240,28,13)" rx="2" ry="2" />
<text text-anchor="" x="298.53" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;NetworkMaster::Start (183 samples, 9.04%)</title><rect x="10.0" y="213" width="106.6" height="15.0" fill="rgb(217,92,22)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::get (12 samples, 0.59%)</title><rect x="81.7" y="117" width="7.0" height="15.0" fill="rgb(241,133,47)" rx="2" ry="2" />
<text text-anchor="" x="84.67" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__libc_enable_asynccancel (1 samples, 0.05%)</title><rect x="306.0" y="213" width="0.6" height="15.0" fill="rgb(209,229,7)" rx="2" ry="2" />
<text text-anchor="" x="309.02" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>INetwork::Update (2 samples, 0.10%)</title><rect x="28.1" y="117" width="1.1" height="15.0" fill="rgb(241,179,41)" rx="2" ry="2" />
<text text-anchor="" x="31.06" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>INetwork::HandleEvents_ (17 samples, 0.84%)</title><rect x="54.3" y="85" width="9.9" height="15.0" fill="rgb(216,163,14)" rx="2" ry="2" />
<text text-anchor="" x="57.29" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;::count (2 samples, 0.10%)</title><rect x="261.2" y="101" width="1.1" height="15.0" fill="rgb(206,122,29)" rx="2" ry="2" />
<text text-anchor="" x="264.15" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>RingBufferSPSC&lt;NetEventMain*, 32768ul&gt;::Empty (12 samples, 0.59%)</title><rect x="192.4" y="85" width="7.0" height="15.0" fill="rgb(233,99,42)" rx="2" ry="2" />
<text text-anchor="" x="195.39" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (2 samples, 0.10%)</title><rect x="283.9" y="85" width="1.1" height="15.0" fill="rgb(208,75,15)" rx="2" ry="2" />
<text text-anchor="" x="286.88" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__atomic_base&lt;unsigned long&gt;::operator unsigned long (9 samples, 0.44%)</title><rect x="56.0" y="53" width="5.3" height="15.0" fill="rgb(215,96,20)" rx="2" ry="2" />
<text text-anchor="" x="59.03" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>ImpNetwork&lt;TcpSocket&gt;::Update (3 samples, 0.15%)</title><rect x="10.0" y="133" width="1.7" height="15.0" fill="rgb(236,28,46)" rx="2" ry="2" />
<text text-anchor="" x="13.00" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_Invoker&lt;std::tuple&lt;namespace_TcpNetwork::case_test_tcp_forward::Run (319 samples, 15.75%)</title><rect x="116.6" y="181" width="185.9" height="15.0" fill="rgb(230,33,24)" rx="2" ry="2" />
<text text-anchor="" x="119.64" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::_Invoker&lt;st..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::this_thread::sleep_for&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; (2 samples, 0.10%)</title><rect x="307.8" y="133" width="1.1" height="15.0" fill="rgb(235,102,13)" rx="2" ry="2" />
<text text-anchor="" x="310.77" y="143.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::operator&amp; (1 samples, 0.05%)</title><rect x="212.2" y="85" width="0.6" height="15.0" fill="rgb(206,224,37)" rx="2" ry="2" />
<text text-anchor="" x="215.20" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;namespace_TcpNetwork::case_test_tcp_forward::Run (319 samples, 15.75%)</title><rect x="116.6" y="213" width="185.9" height="15.0" fill="rgb(209,100,31)" rx="2" ry="2" />
<text text-anchor="" x="119.64" y="223.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  >std::thread::_State_impl..</text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>time@plt (3 samples, 0.15%)</title><rect x="74.7" y="101" width="1.7" height="15.0" fill="rgb(208,87,22)" rx="2" ry="2" />
<text text-anchor="" x="77.68" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>main (5 samples, 0.25%)</title><rect x="306.6" y="197" width="2.9" height="15.0" fill="rgb(219,227,31)" rx="2" ry="2" />
<text text-anchor="" x="309.60" y="207.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__uniq_ptr_impl&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::_M_ptr (29 samples, 1.43%)</title><rect x="91.6" y="85" width="16.9" height="15.0" fill="rgb(239,76,8)" rx="2" ry="2" />
<text text-anchor="" x="94.58" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>namespace_TcpNetwork::case_test_tcp_forward::Run (4 samples, 0.20%)</title><rect x="306.6" y="149" width="2.3" height="15.0" fill="rgb(250,192,29)" rx="2" ry="2" />
<text text-anchor="" x="309.60" y="159.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt;, long, std::ratio&lt;1l, 1000l&gt; &gt; (1 samples, 0.05%)</title><rect x="237.8" y="117" width="0.6" height="15.0" fill="rgb(205,0,5)" rx="2" ry="2" />
<text text-anchor="" x="240.84" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>__vdso_time (18 samples, 0.89%)</title><rect x="64.2" y="101" width="10.5" height="15.0" fill="rgb(205,189,30)" rx="2" ry="2" />
<text text-anchor="" x="67.19" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::_Head_base&lt;0ul, INetwork*, false&gt;::_M_head (4 samples, 0.20%)</title><rect x="105.6" y="37" width="2.3" height="15.0" fill="rgb(206,94,37)" rx="2" ry="2" />
<text text-anchor="" x="108.57" y="47.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>RingBufferSPSC&lt;NetEventWorker*, 32768ul&gt;::Empty (11 samples, 0.54%)</title><rect x="54.9" y="69" width="6.4" height="15.0" fill="rgb(225,33,48)" rx="2" ry="2" />
<text text-anchor="" x="57.87" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;, std::ratio&lt;1000l, 1l&gt;, long, false, true&gt;::__cast&lt;long, std::ratio&lt;1l, 1l&gt; &gt; (4 samples, 0.20%)</title><rect x="288.0" y="53" width="2.3" height="15.0" fill="rgb(246,186,17)" rx="2" ry="2" />
<text text-anchor="" x="290.96" y="63.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::array&lt;std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;, 4ul&gt;::data (1 samples, 0.05%)</title><rect x="78.2" y="101" width="0.6" height="15.0" fill="rgb(231,182,41)" rx="2" ry="2" />
<text text-anchor="" x="81.18" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::zero (3 samples, 0.15%)</title><rect x="264.1" y="101" width="1.7" height="15.0" fill="rgb(234,18,14)" rx="2" ry="2" />
<text text-anchor="" x="267.06" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>EpollCtrl::EpollWait (1 samples, 0.05%)</title><rect x="36.2" y="101" width="0.6" height="15.0" fill="rgb(227,114,20)" rx="2" ry="2" />
<text text-anchor="" x="39.22" y="111.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>UnitTest::RunAllFixture (5 samples, 0.25%)</title><rect x="306.6" y="181" width="2.9" height="15.0" fill="rgb(225,56,49)" rx="2" ry="2" />
<text text-anchor="" x="309.60" y="191.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;::count (2 samples, 0.10%)</title><rect x="276.9" y="69" width="1.1" height="15.0" fill="rgb(232,9,42)" rx="2" ry="2" />
<text text-anchor="" x="279.88" y="79.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::unique_ptr&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::operator (1 samples, 0.05%)</title><rect x="112.6" y="117" width="0.5" height="15.0" fill="rgb(206,215,26)" rx="2" ry="2" />
<text text-anchor="" x="115.56" y="127.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
<g class="func_g" onmouseover="s(this)" onmouseout="c()" onclick="zoom(this)">
<title>std::__uniq_ptr_impl&lt;INetwork, std::default_delete&lt;INetwork&gt; &gt;::_M_ptr (1 samples, 0.05%)</title><rect x="112.6" y="85" width="0.5" height="15.0" fill="rgb(212,74,37)" rx="2" ry="2" />
<text text-anchor="" x="115.56" y="95.5" font-size="12" font-family="Verdana" fill="rgb(0,0,0)"  ></text>
</g>
</svg>
