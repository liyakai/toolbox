<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1333px" height="1256px" viewBox="-0.5 -0.5 1333 1256"><defs><clipPath id="mx-clip-620-227-492-54-0"><rect x="620" y="227" width="492" height="54"/></clipPath><clipPath id="mx-clip-620-289-492-312-0"><rect x="620" y="289" width="492" height="312"/></clipPath><clipPath id="mx-clip-684-47-402-26-0"><rect x="684" y="47" width="402" height="26"/></clipPath><clipPath id="mx-clip-684-81-402-50-0"><rect x="684" y="81" width="402" height="50"/></clipPath><clipPath id="mx-clip-605-707-502-54-0"><rect x="605" y="707" width="502" height="54"/></clipPath><clipPath id="mx-clip-605-769-502-142-0"><rect x="605" y="769" width="502" height="142"/></clipPath><clipPath id="mx-clip-320-1027-352-34-0"><rect x="320" y="1027" width="352" height="34"/></clipPath><clipPath id="mx-clip-320-1069-352-172-0"><rect x="320" y="1069" width="352" height="172"/></clipPath><clipPath id="mx-clip-840-1106-272-26-0"><rect x="840" y="1106" width="272" height="26"/></clipPath><clipPath id="mx-clip-690-1037-272-26-0"><rect x="690" y="1037" width="272" height="26"/></clipPath><clipPath id="mx-clip-920-1167-392-44-0"><rect x="920" y="1167" width="392" height="44"/></clipPath><clipPath id="mx-clip-20-242-402-64-0"><rect x="20" y="242" width="402" height="64"/></clipPath><clipPath id="mx-clip-20-314-402-262-0"><rect x="20" y="314" width="402" height="262"/></clipPath></defs><g><path d="M 866 196 L 864.89 144.01" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 864.52 127.02 L 873.39 143.83 L 856.39 144.2 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 161px; margin-left: 865px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Extends</div></div></div></foreignObject></g><path d="M 441.99 440 L 613.76 440" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 426.99 440 L 434.49 435.59 L 441.99 440 L 434.49 444.41 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 601.88 446.5 L 614.88 440 L 601.88 433.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-end; justify-content: unsafe flex-start; width: 1px; height: 1px; padding-top: 434px; margin-left: 428px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">1</div></div></div></foreignObject></g><path d="M 856 676 L 856 614.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 856 597.12 L 864.5 614.12 L 847.5 614.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 636px; margin-left: 856px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Extends</div></div></div></foreignObject></g><path d="M 496 996 L 837.99 910.4" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 854.49 906.27 L 840.06 918.64 L 835.93 902.15 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 951px; margin-left: 675px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Extends</div></div></div></foreignObject></g><path d="M 856 996 L 856 924.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 856 907.12 L 864.5 924.12 L 847.5 924.12 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 951px; margin-left: 856px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Extends</div></div></div></foreignObject></g><path d="M 976 1075 L 866.49 920.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 856.65 906.91 L 873.42 915.85 L 859.56 925.69 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 990px; margin-left: 916px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Extends</div></div></div></foreignObject></g><path d="M 1116 1136 L 869.57 918" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 856.84 906.74 L 875.2 911.64 L 863.94 924.37 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1021px; margin-left: 986px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Extends</div></div></div></foreignObject></g><path d="M 616 222 L 616 196 L 1116 196 L 1116 222" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 616 222 L 616 596 L 1116 596 L 1116 222" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 616 222 L 1116 222" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" font-style="italic" text-anchor="middle" font-size="12px"><text x="865.5" y="213.5">INetwork</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-620-227-492-54-0)" font-size="12px"><text x="621.5" y="239.5">- network_type_: NetworkType</text><text x="621.5" y="253.5">- event2worker_:Event2Worker</text><text x="621.5" y="267.5">- master_:NetworkMaster</text></g><path d="M 616 280 L 1116 280" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-style="italic" clip-path="url(#mx-clip-620-289-492-312-0)" font-size="12px"><text x="621.5" y="301.5">+ Init(NetworkMaster*, NetworkType):void virtual</text><text x="621.5" y="315.5">+ UnInit():void virtual</text><text x="621.5" y="329.5">+ Update():void virtual</text><text x="621.5" y="343.5">+ CloseListenInMultiplexing(int32_t socket_id):void virtual</text><text x="621.5" y="357.5">+ PushEvent(NetEventWorker*):void</text><text x="621.5" y="371.5"># OnNewAccepter(const std::string&amp;, const uint16_t, int32_t, int32_t):uint64_t virtual = 0</text><text x="621.5" y="385.5"># OnNewConnecter(const std::string&amp;, const uint16_t, int32_t, int32_t):uint64_t virtual = 0</text><text x="621.5" y="399.5"># OnClose(uint64_t):void virtual = 0</text><text x="621.5" y="413.5"># OnSendOnSend(uint64_t, const char*, std::size_t):void virtual = 0</text><text x="621.5" y="427.5">+ OnAccepted(uint64_t):void</text><text x="621.5" y="441.5">+ OnConnected(uint64_t):void</text><text x="621.5" y="455.5">+ OnConnectedFailed(ENetErrCode, int32_t):void</text><text x="621.5" y="469.5">+ OnErrored(uint64_t, ENetErrCode, int32_t):void</text><text x="621.5" y="483.5">+ OnClosed(uint64_t, ENetErrCode, int32_t):void</text><text x="621.5" y="497.5">+ OnReceived(uint64_t, const char*, uint32_t):void</text><text x="621.5" y="511.5">- OnMainToWorkerNewAccepter_(Event*):void</text><text x="621.5" y="525.5">- OnMainToWorkerNewConnecter_(Event*):void</text><text x="621.5" y="539.5">- OnMainToWorkerClose_(Event*):void</text><text x="621.5" y="553.5">- OnMainToWorkerSend_(Event*):void</text><text x="621.5" y="567.5">- HandleEvents_():void</text><text x="621.5" y="581.5">+ GetNetworkType():NetworkType </text></g><path d="M 680 42 L 680 16 L 1090 16 L 1090 42" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 680 42 L 680 126 L 1090 126 L 1090 42" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 680 42 L 1090 42" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="884.5" y="33.5">EventBasedObject</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-684-47-402-26-0)" font-size="12px"><text x="685.5" y="59.5">- event_func_map_: EventFuncMap</text></g><path d="M 680 72 L 1090 72" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-684-81-402-50-0)" font-size="12px"><text x="685.5" y="93.5">+ HandleEvent(Event*):void</text><text x="685.5" y="107.5">+ RegistereventHandler(EventID, EventHandle):void</text><text x="685.5" y="121.5">+ UnregisterEventHandler(EventID):void</text></g><path d="M 601 702 L 601 676 L 1111 676 L 1111 702" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 601 702 L 601 906 L 1111 906 L 1111 702" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 601 702 L 1111 702" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="855.5" y="693.5">ImpNetwork</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-605-707-502-54-0)" font-size="12px"><text x="606.5" y="719.5"># sock_mgr_:SocketPool&lt;SocketType&gt;</text><text x="606.5" y="733.5"># base_ctrl_:IOMultiplexingInterface*</text></g><path d="M 601 760 L 1111 760" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-605-769-502-142-0)" font-size="12px"><text x="606.5" y="781.5">+ Init(NetworkMaster* master, NetworkType network_type):void override</text><text x="606.5" y="795.5">+ UnInit():void override</text><text x="606.5" y="809.5">+ Update():void override</text><text x="606.5" y="823.5">+ GetBaseCtrl():IOMultiplexingInterface*</text><text x="606.5" y="837.5">+ CloseListenInMultiplexing(int32_t socket_id):void override</text><text x="606.5" y="851.5"># OnNewAccepter(const std::string&amp;, const uint16_t, int32_t, int32_t):uint64_t override</text><text x="606.5" y="865.5"># OnNewConnecter(const std::string&amp;, const uint16_t, int32_t, int32_t):uint64_t override</text><text x="606.5" y="879.5"># OnClose(uint64_t):void override</text><text x="606.5" y="893.5"># OnSend(uint64_t, const char*, std::size_t):void override</text></g><path d="M 316 1022 L 316 996 L 676 996 L 676 1022" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 316 1022 L 316 1236 L 676 1236 L 676 1022" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 316 1022 L 676 1022" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="495.5" y="1013.5">UdpEpollNetwork</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-320-1027-352-34-0)" font-size="12px"><text x="321.5" y="1039.5">- address_to_connect_: std::unordered_map&lt;uint64_t, uint32_t&gt;</text><text x="321.5" y="1053.5">- is_kcp_open_:bool</text></g><path d="M 316 1060 L 676 1060" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-320-1069-352-172-0)" font-size="12px"><text x="321.5" y="1081.5">+ Init(NetworkMaster*, NetworkType):void override</text><text x="321.5" y="1095.5">+ Update():void override</text><text x="321.5" y="1109.5">+ GetSocketByUdpAddress(const UdpAddress&amp;):UdpSocket*</text><text x="321.5" y="1123.5">+ AddUdpAddress(const UdpAddress&amp;, uint32_t):void</text><text x="321.5" y="1137.5">+ DeleteUdpAddress(const UdpAddress&amp;):void</text><text x="321.5" y="1151.5">+ OpenKcpMode():void</text><text x="321.5" y="1165.5">+ IsKcpModeOpen():bool</text><text x="321.5" y="1179.5"># OnNewAccepter(const std::string&amp;, const uint16_t, int32_t, int32_t):uint64_t override</text><text x="321.5" y="1193.5"># OnNewConnecter(const std::string&amp;, const uint16_t, int32_t, int32_t):uint64_t override</text><text x="321.5" y="1207.5"># OnClose(uint64_t):void override</text><text x="321.5" y="1221.5"># OnSend(uint64_t, const char*, std::size_t):void override</text></g><path d="M 836 1101 L 836 1075 L 1116 1075 L 1116 1101" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 836 1101 L 836 1127 L 1116 1127 L 1116 1101" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 836 1101 L 1116 1101" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="975.5" y="1092.5">TcpIocpNetwork</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-840-1106-272-26-0)" font-size="12px"><text x="841.5" y="1118.5">+ Init(NetworkMaster*, NetworkType):void override</text></g><path d="M 686 1032 L 686 1006 L 966 1006 L 966 1032" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 686 1032 L 686 1058 L 966 1058 L 966 1032" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 686 1032 L 966 1032" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="825.5" y="1023.5">TcpEpollNetwork</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-690-1037-272-26-0)" font-size="12px"><text x="691.5" y="1049.5">+ Init(NetworkMaster*, NetworkType):void override</text></g><path d="M 916 1162 L 916 1136 L 1316 1136 L 1316 1162" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 916 1162 L 916 1206 L 1316 1206 L 1316 1162" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 916 1162 L 1316 1162" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1115.5" y="1153.5">TcpKqueueNetwork</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-920-1167-392-44-0)" font-size="12px"><text x="921.5" y="1179.5">+ Init(NetworkMaster*, NetworkType):void override</text><text x="921.5" y="1193.5">+ CloseListenInMultiplexing(int32_t socket_id):void override</text></g><path d="M 16 237 L 16 211 L 426 211 L 426 237" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 16 237 L 16 571 L 426 571 L 426 237" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 16 237 L 426 237" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="220.5" y="228.5">NetworkMaster</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-20-242-402-64-0)" font-size="12px"><text x="21.5" y="254.5">- event2main_ : Event2Main</text><text x="21.5" y="268.5">- stop_ : std::atomic_bool</text><text x="21.5" y="282.5">- worker_ : std::unique_ptr&lt;std::thread&gt;</text><text x="21.5" y="296.5">- networks_ : NetworkArray</text></g><path d="M 16 305 L 426 305" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-20-314-402-262-0)" font-size="12px"><text x="21.5" y="326.5">+ Start(): bool virtual</text><text x="21.5" y="340.5">+ Update():void virtual</text><text x="21.5" y="354.5">+ StopWait() : void virtual  </text><text x="21.5" y="368.5">+ Close(NetworkType, uint64_t):void</text><text x="21.5" y="382.5">+ Send(NetworkType, uint64_t, const char*, uint32_t):void</text><text x="21.5" y="396.5">+ NotifyMain(NetEventMain*):bool</text><text x="21.5" y="410.5"># OnAccepted(uint64_t):void virtual</text><text x="21.5" y="424.5"># OnConnected(uint64_t):void virtual</text><text x="21.5" y="438.5"># OnConnectedFailed(ENetErrCode, int32_t):void virtual</text><text x="21.5" y="452.5"># OnErrored(uint64_t, ENetErrCode, int32_t):void virtual</text><text x="21.5" y="466.5"># OnClose(uint64_t, ENetErrCode, int32_t):void virtual</text><text x="21.5" y="480.5"># OnReceived(uint64_t, const char*, size_t):void virtual</text><text x="21.5" y="494.5">+ Accept(const std::string&amp;, uint16_t, NetworkType, int32_t, int32_t):void</text><text x="21.5" y="508.5">+ Connect(const std::string&amp;, uint16_t, NetworkType, int32_t, int32_t):void</text><text x="21.5" y="522.5">+ NotifyWorker(NetEventWorker*, NetworkType):void</text><text x="21.5" y="536.5">- DispatchMainEvent_():void </text><text x="21.5" y="550.5">- GetNetwork_(NetworkType): INetwork*</text></g></g></svg>