// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_coro_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fcoro_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fcoro_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fcoro_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fcoro_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fcoro_5frpc_2eproto;
namespace demo {
class GetUserRequest;
struct GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class GetUserResponse;
struct GetUserResponseDefaultTypeInternal;
extern GetUserResponseDefaultTypeInternal _GetUserResponse_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_Address;
struct User_AddressDefaultTypeInternal;
extern User_AddressDefaultTypeInternal _User_Address_default_instance_;
}  // namespace demo
PROTOBUF_NAMESPACE_OPEN
template<> ::demo::GetUserRequest* Arena::CreateMaybeMessage<::demo::GetUserRequest>(Arena*);
template<> ::demo::GetUserResponse* Arena::CreateMaybeMessage<::demo::GetUserResponse>(Arena*);
template<> ::demo::User* Arena::CreateMaybeMessage<::demo::User>(Arena*);
template<> ::demo::User_Address* Arena::CreateMaybeMessage<::demo::User_Address>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace demo {

enum User_Gender : int {
  User_Gender_UNKNOWN = 0,
  User_Gender_MALE = 1,
  User_Gender_FEMALE = 2,
  User_Gender_User_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  User_Gender_User_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool User_Gender_IsValid(int value);
constexpr User_Gender User_Gender_Gender_MIN = User_Gender_UNKNOWN;
constexpr User_Gender User_Gender_Gender_MAX = User_Gender_FEMALE;
constexpr int User_Gender_Gender_ARRAYSIZE = User_Gender_Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_Gender_descriptor();
template<typename T>
inline const std::string& User_Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, User_Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function User_Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    User_Gender_descriptor(), enum_t_value);
}
inline bool User_Gender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, User_Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<User_Gender>(
    User_Gender_descriptor(), name, value);
}
// ===================================================================

class User_Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.User.Address) */ {
 public:
  inline User_Address() : User_Address(nullptr) {}
  ~User_Address() override;
  explicit PROTOBUF_CONSTEXPR User_Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_Address(const User_Address& from);
  User_Address(User_Address&& from) noexcept
    : User_Address() {
    *this = ::std::move(from);
  }

  inline User_Address& operator=(const User_Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Address& operator=(User_Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Address* internal_default_instance() {
    return reinterpret_cast<const User_Address*>(
               &_User_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User_Address& a, User_Address& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Address* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User_Address& from) {
    User_Address::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_Address* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.User.Address";
  }
  protected:
  explicit User_Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetFieldNumber = 1,
    kCityFieldNumber = 2,
    kCountryFieldNumber = 3,
    kPostalCodeFieldNumber = 4,
  };
  // string street = 1;
  void clear_street();
  const std::string& street() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_street(ArgT0&& arg0, ArgT... args);
  std::string* mutable_street();
  PROTOBUF_NODISCARD std::string* release_street();
  void set_allocated_street(std::string* street);
  private:
  const std::string& _internal_street() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string city = 2;
  void clear_city();
  const std::string& city() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_city(ArgT0&& arg0, ArgT... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string country = 3;
  void clear_country();
  const std::string& country() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string postal_code = 4;
  void clear_postal_code();
  const std::string& postal_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postal_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postal_code();
  PROTOBUF_NODISCARD std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // @@protoc_insertion_point(class_scope:demo.User.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fcoro_5frpc_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef User_Address Address;

  typedef User_Gender Gender;
  static constexpr Gender UNKNOWN =
    User_Gender_UNKNOWN;
  static constexpr Gender MALE =
    User_Gender_MALE;
  static constexpr Gender FEMALE =
    User_Gender_FEMALE;
  static inline bool Gender_IsValid(int value) {
    return User_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN =
    User_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX =
    User_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE =
    User_Gender_Gender_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gender_descriptor() {
    return User_Gender_descriptor();
  }
  template<typename T>
  static inline const std::string& Gender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gender_Name.");
    return User_Gender_Name(enum_t_value);
  }
  static inline bool Gender_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Gender* value) {
    return User_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumbersFieldNumber = 5,
    kAddressesFieldNumber = 6,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kIdFieldNumber = 1,
    kGenderFieldNumber = 4,
    kCreatedAtFieldNumber = 7,
    kIsActiveFieldNumber = 8,
  };
  // repeated string phone_numbers = 5;
  int phone_numbers_size() const;
  private:
  int _internal_phone_numbers_size() const;
  public:
  void clear_phone_numbers();
  const std::string& phone_numbers(int index) const;
  std::string* mutable_phone_numbers(int index);
  void set_phone_numbers(int index, const std::string& value);
  void set_phone_numbers(int index, std::string&& value);
  void set_phone_numbers(int index, const char* value);
  void set_phone_numbers(int index, const char* value, size_t size);
  std::string* add_phone_numbers();
  void add_phone_numbers(const std::string& value);
  void add_phone_numbers(std::string&& value);
  void add_phone_numbers(const char* value);
  void add_phone_numbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phone_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phone_numbers();
  private:
  const std::string& _internal_phone_numbers(int index) const;
  std::string* _internal_add_phone_numbers();
  public:

  // repeated .demo.User.Address addresses = 6;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::demo::User_Address* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::User_Address >*
      mutable_addresses();
  private:
  const ::demo::User_Address& _internal_addresses(int index) const;
  ::demo::User_Address* _internal_add_addresses();
  public:
  const ::demo::User_Address& addresses(int index) const;
  ::demo::User_Address* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::User_Address >&
      addresses() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .demo.User.Gender gender = 4;
  void clear_gender();
  ::demo::User_Gender gender() const;
  void set_gender(::demo::User_Gender value);
  private:
  ::demo::User_Gender _internal_gender() const;
  void _internal_set_gender(::demo::User_Gender value);
  public:

  // int64 created_at = 7;
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // bool is_active = 8;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:demo.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phone_numbers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::User_Address > addresses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    int32_t id_;
    int gender_;
    int64_t created_at_;
    bool is_active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fcoro_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  ~GetUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserRequest& from) {
    GetUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:demo.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fcoro_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GetUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:demo.GetUserResponse) */ {
 public:
  inline GetUserResponse() : GetUserResponse(nullptr) {}
  ~GetUserResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserResponse(const GetUserResponse& from);
  GetUserResponse(GetUserResponse&& from) noexcept
    : GetUserResponse() {
    *this = ::std::move(from);
  }

  inline GetUserResponse& operator=(const GetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserResponse& operator=(GetUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserResponse*>(
               &_GetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserResponse& a, GetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserResponse& from) {
    GetUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "demo.GetUserResponse";
  }
  protected:
  explicit GetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kUserFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .demo.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::demo::User& user() const;
  PROTOBUF_NODISCARD ::demo::User* release_user();
  ::demo::User* mutable_user();
  void set_allocated_user(::demo::User* user);
  private:
  const ::demo::User& _internal_user() const;
  ::demo::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::demo::User* user);
  ::demo::User* unsafe_arena_release_user();

  // int32 status = 3;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:demo.GetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::demo::User* user_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fcoro_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User_Address

// string street = 1;
inline void User_Address::clear_street() {
  _impl_.street_.ClearToEmpty();
}
inline const std::string& User_Address::street() const {
  // @@protoc_insertion_point(field_get:demo.User.Address.street)
  return _internal_street();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Address::set_street(ArgT0&& arg0, ArgT... args) {
 
 _impl_.street_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.User.Address.street)
}
inline std::string* User_Address::mutable_street() {
  std::string* _s = _internal_mutable_street();
  // @@protoc_insertion_point(field_mutable:demo.User.Address.street)
  return _s;
}
inline const std::string& User_Address::_internal_street() const {
  return _impl_.street_.Get();
}
inline void User_Address::_internal_set_street(const std::string& value) {
  
  _impl_.street_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Address::_internal_mutable_street() {
  
  return _impl_.street_.Mutable(GetArenaForAllocation());
}
inline std::string* User_Address::release_street() {
  // @@protoc_insertion_point(field_release:demo.User.Address.street)
  return _impl_.street_.Release();
}
inline void User_Address::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  _impl_.street_.SetAllocated(street, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.street_.IsDefault()) {
    _impl_.street_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.User.Address.street)
}

// string city = 2;
inline void User_Address::clear_city() {
  _impl_.city_.ClearToEmpty();
}
inline const std::string& User_Address::city() const {
  // @@protoc_insertion_point(field_get:demo.User.Address.city)
  return _internal_city();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Address::set_city(ArgT0&& arg0, ArgT... args) {
 
 _impl_.city_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.User.Address.city)
}
inline std::string* User_Address::mutable_city() {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:demo.User.Address.city)
  return _s;
}
inline const std::string& User_Address::_internal_city() const {
  return _impl_.city_.Get();
}
inline void User_Address::_internal_set_city(const std::string& value) {
  
  _impl_.city_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Address::_internal_mutable_city() {
  
  return _impl_.city_.Mutable(GetArenaForAllocation());
}
inline std::string* User_Address::release_city() {
  // @@protoc_insertion_point(field_release:demo.User.Address.city)
  return _impl_.city_.Release();
}
inline void User_Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  _impl_.city_.SetAllocated(city, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.User.Address.city)
}

// string country = 3;
inline void User_Address::clear_country() {
  _impl_.country_.ClearToEmpty();
}
inline const std::string& User_Address::country() const {
  // @@protoc_insertion_point(field_get:demo.User.Address.country)
  return _internal_country();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Address::set_country(ArgT0&& arg0, ArgT... args) {
 
 _impl_.country_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.User.Address.country)
}
inline std::string* User_Address::mutable_country() {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:demo.User.Address.country)
  return _s;
}
inline const std::string& User_Address::_internal_country() const {
  return _impl_.country_.Get();
}
inline void User_Address::_internal_set_country(const std::string& value) {
  
  _impl_.country_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Address::_internal_mutable_country() {
  
  return _impl_.country_.Mutable(GetArenaForAllocation());
}
inline std::string* User_Address::release_country() {
  // @@protoc_insertion_point(field_release:demo.User.Address.country)
  return _impl_.country_.Release();
}
inline void User_Address::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  _impl_.country_.SetAllocated(country, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.User.Address.country)
}

// string postal_code = 4;
inline void User_Address::clear_postal_code() {
  _impl_.postal_code_.ClearToEmpty();
}
inline const std::string& User_Address::postal_code() const {
  // @@protoc_insertion_point(field_get:demo.User.Address.postal_code)
  return _internal_postal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Address::set_postal_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.postal_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.User.Address.postal_code)
}
inline std::string* User_Address::mutable_postal_code() {
  std::string* _s = _internal_mutable_postal_code();
  // @@protoc_insertion_point(field_mutable:demo.User.Address.postal_code)
  return _s;
}
inline const std::string& User_Address::_internal_postal_code() const {
  return _impl_.postal_code_.Get();
}
inline void User_Address::_internal_set_postal_code(const std::string& value) {
  
  _impl_.postal_code_.Set(value, GetArenaForAllocation());
}
inline std::string* User_Address::_internal_mutable_postal_code() {
  
  return _impl_.postal_code_.Mutable(GetArenaForAllocation());
}
inline std::string* User_Address::release_postal_code() {
  // @@protoc_insertion_point(field_release:demo.User.Address.postal_code)
  return _impl_.postal_code_.Release();
}
inline void User_Address::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  _impl_.postal_code_.SetAllocated(postal_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.postal_code_.IsDefault()) {
    _impl_.postal_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.User.Address.postal_code)
}

// -------------------------------------------------------------------

// User

// int32 id = 1;
inline void User::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t User::_internal_id() const {
  return _impl_.id_;
}
inline int32_t User::id() const {
  // @@protoc_insertion_point(field_get:demo.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void User::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:demo.User.id)
}

// string name = 2;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:demo.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:demo.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:demo.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.User.name)
}

// string email = 3;
inline void User::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:demo.User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.User.email)
}
inline std::string* User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:demo.User.email)
  return _s;
}
inline const std::string& User::_internal_email() const {
  return _impl_.email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:demo.User.email)
  return _impl_.email_.Release();
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.User.email)
}

// .demo.User.Gender gender = 4;
inline void User::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::demo::User_Gender User::_internal_gender() const {
  return static_cast< ::demo::User_Gender >(_impl_.gender_);
}
inline ::demo::User_Gender User::gender() const {
  // @@protoc_insertion_point(field_get:demo.User.gender)
  return _internal_gender();
}
inline void User::_internal_set_gender(::demo::User_Gender value) {
  
  _impl_.gender_ = value;
}
inline void User::set_gender(::demo::User_Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:demo.User.gender)
}

// repeated string phone_numbers = 5;
inline int User::_internal_phone_numbers_size() const {
  return _impl_.phone_numbers_.size();
}
inline int User::phone_numbers_size() const {
  return _internal_phone_numbers_size();
}
inline void User::clear_phone_numbers() {
  _impl_.phone_numbers_.Clear();
}
inline std::string* User::add_phone_numbers() {
  std::string* _s = _internal_add_phone_numbers();
  // @@protoc_insertion_point(field_add_mutable:demo.User.phone_numbers)
  return _s;
}
inline const std::string& User::_internal_phone_numbers(int index) const {
  return _impl_.phone_numbers_.Get(index);
}
inline const std::string& User::phone_numbers(int index) const {
  // @@protoc_insertion_point(field_get:demo.User.phone_numbers)
  return _internal_phone_numbers(index);
}
inline std::string* User::mutable_phone_numbers(int index) {
  // @@protoc_insertion_point(field_mutable:demo.User.phone_numbers)
  return _impl_.phone_numbers_.Mutable(index);
}
inline void User::set_phone_numbers(int index, const std::string& value) {
  _impl_.phone_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:demo.User.phone_numbers)
}
inline void User::set_phone_numbers(int index, std::string&& value) {
  _impl_.phone_numbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:demo.User.phone_numbers)
}
inline void User::set_phone_numbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.phone_numbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:demo.User.phone_numbers)
}
inline void User::set_phone_numbers(int index, const char* value, size_t size) {
  _impl_.phone_numbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:demo.User.phone_numbers)
}
inline std::string* User::_internal_add_phone_numbers() {
  return _impl_.phone_numbers_.Add();
}
inline void User::add_phone_numbers(const std::string& value) {
  _impl_.phone_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:demo.User.phone_numbers)
}
inline void User::add_phone_numbers(std::string&& value) {
  _impl_.phone_numbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:demo.User.phone_numbers)
}
inline void User::add_phone_numbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.phone_numbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:demo.User.phone_numbers)
}
inline void User::add_phone_numbers(const char* value, size_t size) {
  _impl_.phone_numbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:demo.User.phone_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
User::phone_numbers() const {
  // @@protoc_insertion_point(field_list:demo.User.phone_numbers)
  return _impl_.phone_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
User::mutable_phone_numbers() {
  // @@protoc_insertion_point(field_mutable_list:demo.User.phone_numbers)
  return &_impl_.phone_numbers_;
}

// repeated .demo.User.Address addresses = 6;
inline int User::_internal_addresses_size() const {
  return _impl_.addresses_.size();
}
inline int User::addresses_size() const {
  return _internal_addresses_size();
}
inline void User::clear_addresses() {
  _impl_.addresses_.Clear();
}
inline ::demo::User_Address* User::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:demo.User.addresses)
  return _impl_.addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::User_Address >*
User::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:demo.User.addresses)
  return &_impl_.addresses_;
}
inline const ::demo::User_Address& User::_internal_addresses(int index) const {
  return _impl_.addresses_.Get(index);
}
inline const ::demo::User_Address& User::addresses(int index) const {
  // @@protoc_insertion_point(field_get:demo.User.addresses)
  return _internal_addresses(index);
}
inline ::demo::User_Address* User::_internal_add_addresses() {
  return _impl_.addresses_.Add();
}
inline ::demo::User_Address* User::add_addresses() {
  ::demo::User_Address* _add = _internal_add_addresses();
  // @@protoc_insertion_point(field_add:demo.User.addresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::demo::User_Address >&
User::addresses() const {
  // @@protoc_insertion_point(field_list:demo.User.addresses)
  return _impl_.addresses_;
}

// int64 created_at = 7;
inline void User::clear_created_at() {
  _impl_.created_at_ = int64_t{0};
}
inline int64_t User::_internal_created_at() const {
  return _impl_.created_at_;
}
inline int64_t User::created_at() const {
  // @@protoc_insertion_point(field_get:demo.User.created_at)
  return _internal_created_at();
}
inline void User::_internal_set_created_at(int64_t value) {
  
  _impl_.created_at_ = value;
}
inline void User::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:demo.User.created_at)
}

// bool is_active = 8;
inline void User::clear_is_active() {
  _impl_.is_active_ = false;
}
inline bool User::_internal_is_active() const {
  return _impl_.is_active_;
}
inline bool User::is_active() const {
  // @@protoc_insertion_point(field_get:demo.User.is_active)
  return _internal_is_active();
}
inline void User::_internal_set_is_active(bool value) {
  
  _impl_.is_active_ = value;
}
inline void User::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:demo.User.is_active)
}

// -------------------------------------------------------------------

// GetUserRequest

// int32 user_id = 1;
inline void GetUserRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t GetUserRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t GetUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:demo.GetUserRequest.user_id)
  return _internal_user_id();
}
inline void GetUserRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetUserRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:demo.GetUserRequest.user_id)
}

// -------------------------------------------------------------------

// GetUserResponse

// .demo.User user = 1;
inline bool GetUserResponse::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool GetUserResponse::has_user() const {
  return _internal_has_user();
}
inline void GetUserResponse::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::demo::User& GetUserResponse::_internal_user() const {
  const ::demo::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::demo::User&>(
      ::demo::_User_default_instance_);
}
inline const ::demo::User& GetUserResponse::user() const {
  // @@protoc_insertion_point(field_get:demo.GetUserResponse.user)
  return _internal_user();
}
inline void GetUserResponse::unsafe_arena_set_allocated_user(
    ::demo::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:demo.GetUserResponse.user)
}
inline ::demo::User* GetUserResponse::release_user() {
  
  ::demo::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::demo::User* GetUserResponse::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:demo.GetUserResponse.user)
  
  ::demo::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::demo::User* GetUserResponse::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::demo::User>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::demo::User* GetUserResponse::mutable_user() {
  ::demo::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:demo.GetUserResponse.user)
  return _msg;
}
inline void GetUserResponse::set_allocated_user(::demo::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:demo.GetUserResponse.user)
}

// string message = 2;
inline void GetUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetUserResponse::message() const {
  // @@protoc_insertion_point(field_get:demo.GetUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:demo.GetUserResponse.message)
}
inline std::string* GetUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:demo.GetUserResponse.message)
  return _s;
}
inline const std::string& GetUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:demo.GetUserResponse.message)
  return _impl_.message_.Release();
}
inline void GetUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:demo.GetUserResponse.message)
}

// int32 status = 3;
inline void GetUserResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t GetUserResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t GetUserResponse::status() const {
  // @@protoc_insertion_point(field_get:demo.GetUserResponse.status)
  return _internal_status();
}
inline void GetUserResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void GetUserResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:demo.GetUserResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::demo::User_Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::demo::User_Gender>() {
  return ::demo::User_Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fcoro_5frpc_2eproto
