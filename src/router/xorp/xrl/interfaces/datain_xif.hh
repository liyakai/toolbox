/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/datain_xif.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ifndef __XRL_INTERFACES_DATAIN_XIF_HH__
#define __XRL_INTERFACES_DATAIN_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifDatain"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"

//#include <memory>

class XrlDatainV0p1Client {
public:
    XrlDatainV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlDatainV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr ReceiveCB;

    bool send_receive(
	const char*	dst_xrl_target_name,
	const string&	peer,
	const uint32_t&	genid,
	const bool&	status,
	const uint32_t&	secs,
	const uint32_t&	micro,
	const vector<uint8_t>&	data,
	const ReceiveCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ErrorCB;

    bool send_error(
	const char*	dst_xrl_target_name,
	const string&	peer,
	const uint32_t&	genid,
	const string&	reason,
	const ErrorCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ClosedCB;

    bool send_closed(
	const char*	dst_xrl_target_name,
	const string&	peer,
	const uint32_t&	genid,
	const ClosedCB&	cb
    );

protected:
    XrlSender* _sender;

private:
    static void unmarshall_receive(
	const XrlError&	e,
	XrlArgs*	a,
	ReceiveCB		cb
    );

    static void unmarshall_error(
	const XrlError&	e,
	XrlArgs*	a,
	ErrorCB		cb
    );

    static void unmarshall_closed(
	const XrlError&	e,
	XrlArgs*	a,
	ClosedCB		cb
    );

private:
    /* Declare cached Xrl pointers */
    unique_ptr<Xrl> ap_xrl_receive;
    unique_ptr<Xrl> ap_xrl_error;
    unique_ptr<Xrl> ap_xrl_closed;
};

#endif /* __XRL_INTERFACES_DATAIN_XIF_HH__ */
