/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/fea_fib_client_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "fea_fib_client_xif.hh"

bool
XrlFeaFibClientV0p1Client::send_add_route4(
	const char*	dst_xrl_target_name,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	protocol_origin,
	const bool&	xorp_route,
	const AddRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_add_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/add_route4");
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        x->args().add("admin_distance", admin_distance);
        x->args().add("protocol_origin", protocol_origin);
        x->args().add("xorp_route", xorp_route);
        ap_xrl_add_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);
    x->args().set_arg(1, nexthop);
    x->args().set_arg(2, ifname);
    x->args().set_arg(3, vifname);
    x->args().set_arg(4, metric);
    x->args().set_arg(5, admin_distance);
    x->args().set_arg(6, protocol_origin);
    x->args().set_arg(7, xorp_route);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_add_route4, cb));
}


/* Unmarshall add_route4 */
void
XrlFeaFibClientV0p1Client::unmarshall_add_route4(
	const XrlError&	e,
	XrlArgs*	a,
	AddRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_replace_route4(
	const char*	dst_xrl_target_name,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	protocol_origin,
	const bool&	xorp_route,
	const ReplaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_replace_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/replace_route4");
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        x->args().add("admin_distance", admin_distance);
        x->args().add("protocol_origin", protocol_origin);
        x->args().add("xorp_route", xorp_route);
        ap_xrl_replace_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);
    x->args().set_arg(1, nexthop);
    x->args().set_arg(2, ifname);
    x->args().set_arg(3, vifname);
    x->args().set_arg(4, metric);
    x->args().set_arg(5, admin_distance);
    x->args().set_arg(6, protocol_origin);
    x->args().set_arg(7, xorp_route);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_replace_route4, cb));
}


/* Unmarshall replace_route4 */
void
XrlFeaFibClientV0p1Client::unmarshall_replace_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_delete_route4(
	const char*	dst_xrl_target_name,
	const IPv4Net&	network,
	const string&	ifname,
	const string&	vifname,
	const DeleteRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_delete_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/delete_route4");
        x->args().add("network", network);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        ap_xrl_delete_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);
    x->args().set_arg(1, ifname);
    x->args().set_arg(2, vifname);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_delete_route4, cb));
}


/* Unmarshall delete_route4 */
void
XrlFeaFibClientV0p1Client::unmarshall_delete_route4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_resolve_route4(
	const char*	dst_xrl_target_name,
	const IPv4Net&	network,
	const ResolveRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_resolve_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/resolve_route4");
        x->args().add("network", network);
        ap_xrl_resolve_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_resolve_route4, cb));
}


/* Unmarshall resolve_route4 */
void
XrlFeaFibClientV0p1Client::unmarshall_resolve_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ResolveRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_add_route6(
	const char*	dst_xrl_target_name,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	protocol_origin,
	const bool&	xorp_route,
	const AddRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_add_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/add_route6");
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        x->args().add("admin_distance", admin_distance);
        x->args().add("protocol_origin", protocol_origin);
        x->args().add("xorp_route", xorp_route);
        ap_xrl_add_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);
    x->args().set_arg(1, nexthop);
    x->args().set_arg(2, ifname);
    x->args().set_arg(3, vifname);
    x->args().set_arg(4, metric);
    x->args().set_arg(5, admin_distance);
    x->args().set_arg(6, protocol_origin);
    x->args().set_arg(7, xorp_route);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_add_route6, cb));
}


/* Unmarshall add_route6 */
void
XrlFeaFibClientV0p1Client::unmarshall_add_route6(
	const XrlError&	e,
	XrlArgs*	a,
	AddRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_resolve_route6(
	const char*	dst_xrl_target_name,
	const IPv6Net&	network,
	const ResolveRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_resolve_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/resolve_route6");
        x->args().add("network", network);
        ap_xrl_resolve_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_resolve_route6, cb));
}


/* Unmarshall resolve_route6 */
void
XrlFeaFibClientV0p1Client::unmarshall_resolve_route6(
	const XrlError&	e,
	XrlArgs*	a,
	ResolveRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_replace_route6(
	const char*	dst_xrl_target_name,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	protocol_origin,
	const bool&	xorp_route,
	const ReplaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_replace_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/replace_route6");
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        x->args().add("admin_distance", admin_distance);
        x->args().add("protocol_origin", protocol_origin);
        x->args().add("xorp_route", xorp_route);
        ap_xrl_replace_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);
    x->args().set_arg(1, nexthop);
    x->args().set_arg(2, ifname);
    x->args().set_arg(3, vifname);
    x->args().set_arg(4, metric);
    x->args().set_arg(5, admin_distance);
    x->args().set_arg(6, protocol_origin);
    x->args().set_arg(7, xorp_route);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_replace_route6, cb));
}


/* Unmarshall replace_route6 */
void
XrlFeaFibClientV0p1Client::unmarshall_replace_route6(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlFeaFibClientV0p1Client::send_delete_route6(
	const char*	dst_xrl_target_name,
	const IPv6Net&	network,
	const string&	ifname,
	const string&	vifname,
	const DeleteRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_delete_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "fea_fib_client/0.1/delete_route6");
        x->args().add("network", network);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        ap_xrl_delete_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, network);
    x->args().set_arg(1, ifname);
    x->args().set_arg(2, vifname);

    return _sender->send(*x, callback(&XrlFeaFibClientV0p1Client::unmarshall_delete_route6, cb));
}


/* Unmarshall delete_route6 */
void
XrlFeaFibClientV0p1Client::unmarshall_delete_route6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
