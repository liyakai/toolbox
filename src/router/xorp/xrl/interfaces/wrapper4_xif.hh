/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/wrapper4_xif.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ifndef __XRL_INTERFACES_WRAPPER4_XIF_HH__
#define __XRL_INTERFACES_WRAPPER4_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifWrapper4"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"

//#include <memory>

class XrlWrapper4V0p1Client {
public:
    XrlWrapper4V0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlWrapper4V0p1Client() {}

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetAdminDistanceCB;
    /**
     *  Send Xrl intended to:
     *
     *  Get admin distance.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_get_admin_distance(
	const char*	dst_xrl_target_name,
	const GetAdminDistanceCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetAdminDistanceCB;
    /**
     *  Send Xrl intended to:
     *
     *  Set admin distance.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_set_admin_distance(
	const char*	dst_xrl_target_name,
	const uint32_t&	admin,
	const SetAdminDistanceCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const IPv4*>::RefPtr GetMainAddressCB;
    /**
     *  Send Xrl intended to:
     *
     *  Get Wrapper main address.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_get_main_address(
	const char*	dst_xrl_target_name,
	const GetMainAddressCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetMainAddressCB;
    /**
     *  Send Xrl intended to:
     *
     *  Set Wrapper main address.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_set_main_address(
	const char*	dst_xrl_target_name,
	const IPv4&	addr,
	const SetMainAddressCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr RestartCB;
    /**
     *  Send Xrl intended to:
     *
     *  Reset connection to xopr
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_restart(
	const char*	dst_xrl_target_name,
	const RestartCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const XrlAtomList*>::RefPtr GetInterfaceListCB;
    /**
     *  Send Xrl intended to:
     *
     *  Get the list of interfaces currently configured for Wrapper. Return a
     *  list of u32 type values. Each value is an internal ID that can be used
     *  with the get_interface_info XRL.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_get_interface_list(
	const char*	dst_xrl_target_name,
	const GetInterfaceListCB&	cb
    );

    typedef XorpCallback7<void, const XrlError&, const string*, const string*, const IPv4*, const uint32_t*, const IPv4*, const uint32_t*>::RefPtr GetInterfaceInfoCB;
    /**
     *  Send Xrl intended to:
     *
     *  Get the per-interface information for the given interface.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param faceid interface ID returned by get_interface_list.
     */
    bool send_get_interface_info(
	const char*	dst_xrl_target_name,
	const uint32_t&	faceid,
	const GetInterfaceInfoCB&	cb
    );

protected:
    XrlSender* _sender;

private:
    static void unmarshall_get_admin_distance(
	const XrlError&	e,
	XrlArgs*	a,
	GetAdminDistanceCB		cb
    );

    static void unmarshall_set_admin_distance(
	const XrlError&	e,
	XrlArgs*	a,
	SetAdminDistanceCB		cb
    );

    static void unmarshall_get_main_address(
	const XrlError&	e,
	XrlArgs*	a,
	GetMainAddressCB		cb
    );

    static void unmarshall_set_main_address(
	const XrlError&	e,
	XrlArgs*	a,
	SetMainAddressCB		cb
    );

    static void unmarshall_restart(
	const XrlError&	e,
	XrlArgs*	a,
	RestartCB		cb
    );

    static void unmarshall_get_interface_list(
	const XrlError&	e,
	XrlArgs*	a,
	GetInterfaceListCB		cb
    );

    static void unmarshall_get_interface_info(
	const XrlError&	e,
	XrlArgs*	a,
	GetInterfaceInfoCB		cb
    );

private:
    /* Declare cached Xrl pointers */
    unique_ptr<Xrl> ap_xrl_get_admin_distance;
    unique_ptr<Xrl> ap_xrl_set_admin_distance;
    unique_ptr<Xrl> ap_xrl_get_main_address;
    unique_ptr<Xrl> ap_xrl_set_main_address;
    unique_ptr<Xrl> ap_xrl_restart;
    unique_ptr<Xrl> ap_xrl_get_interface_list;
    unique_ptr<Xrl> ap_xrl_get_interface_info;
};

#endif /* __XRL_INTERFACES_WRAPPER4_XIF_HH__ */
