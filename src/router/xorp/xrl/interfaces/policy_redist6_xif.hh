/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/policy_redist6_xif.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ifndef __XRL_INTERFACES_POLICY_REDIST6_XIF_HH__
#define __XRL_INTERFACES_POLICY_REDIST6_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifPolicyRedist6"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"

//#include <memory>

class XrlPolicyRedist6V0p1Client {
public:
    XrlPolicyRedist6V0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlPolicyRedist6V0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddRoute6CB;
    /**
     *  Send Xrl intended to:
     *
     *  Start route redistribution for an IPv6 route.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param network the route to advertise.
     *
     *  @param unicast whether the route is unicast.
     *
     *  @param multicast whether the route is multicast.
     *
     *  @param nexthop the nexthop of the route.
     *
     *  @param metric the metric of the route.
     *
     *  @param policytags the set of policy-tags associated with the route.
     */
    bool send_add_route6(
	const char*	dst_xrl_target_name,
	const IPv6Net&	network,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6&	nexthop,
	const uint32_t&	metric,
	const XrlAtomList&	policytags,
	const AddRoute6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteRoute6CB;
    /**
     *  Send Xrl intended to:
     *
     *  Terminate route redistribution for an IPv6 route.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param network the route for which advertisements should cease.
     *
     *  @param unicast whether the route is unicast.
     *
     *  @param multicast whether the route is multicast.
     */
    bool send_delete_route6(
	const char*	dst_xrl_target_name,
	const IPv6Net&	network,
	const bool&	unicast,
	const bool&	multicast,
	const DeleteRoute6CB&	cb
    );

protected:
    XrlSender* _sender;

private:
    static void unmarshall_add_route6(
	const XrlError&	e,
	XrlArgs*	a,
	AddRoute6CB		cb
    );

    static void unmarshall_delete_route6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteRoute6CB		cb
    );

private:
    /* Declare cached Xrl pointers */
    unique_ptr<Xrl> ap_xrl_add_route6;
    unique_ptr<Xrl> ap_xrl_delete_route6;
};

#endif /* __XRL_INTERFACES_POLICY_REDIST6_XIF_HH__ */
