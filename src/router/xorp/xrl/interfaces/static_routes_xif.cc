/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/static_routes_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "static_routes_xif.hh"

bool
XrlStaticRoutesV0p1Client::send_enable_static_routes(
	const char*	dst_xrl_target_name,
	const bool&	enable,
	const EnableStaticRoutesCB&	cb
)
{
    Xrl* x = ap_xrl_enable_static_routes.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/enable_static_routes");
        x->args().add("enable", enable);
        ap_xrl_enable_static_routes.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, enable);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_enable_static_routes, cb));
}


/* Unmarshall enable_static_routes */
void
XrlStaticRoutesV0p1Client::unmarshall_enable_static_routes(
	const XrlError&	e,
	XrlArgs*	a,
	EnableStaticRoutesCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_start_static_routes(
	const char*	dst_xrl_target_name,
	const StartStaticRoutesCB&	cb
)
{
    Xrl* x = ap_xrl_start_static_routes.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/start_static_routes");
        ap_xrl_start_static_routes.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_start_static_routes, cb));
}


/* Unmarshall start_static_routes */
void
XrlStaticRoutesV0p1Client::unmarshall_start_static_routes(
	const XrlError&	e,
	XrlArgs*	a,
	StartStaticRoutesCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_stop_static_routes(
	const char*	dst_xrl_target_name,
	const StopStaticRoutesCB&	cb
)
{
    Xrl* x = ap_xrl_stop_static_routes.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/stop_static_routes");
        ap_xrl_stop_static_routes.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_stop_static_routes, cb));
}


/* Unmarshall stop_static_routes */
void
XrlStaticRoutesV0p1Client::unmarshall_stop_static_routes(
	const XrlError&	e,
	XrlArgs*	a,
	StopStaticRoutesCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const uint32_t&	metric,
	const AddRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_add_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_add_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_route4, cb));
}


/* Unmarshall add_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_route4(
	const XrlError&	e,
	XrlArgs*	a,
	AddRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const uint32_t&	metric,
	const AddRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_add_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_add_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_route6, cb));
}


/* Unmarshall add_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_route6(
	const XrlError&	e,
	XrlArgs*	a,
	AddRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const uint32_t&	metric,
	const ReplaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_replace_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_replace_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_route4, cb));
}


/* Unmarshall replace_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const uint32_t&	metric,
	const ReplaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_replace_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_replace_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_route6, cb));
}


/* Unmarshall replace_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_route6(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const DeleteRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_delete_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        ap_xrl_delete_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_route4, cb));
}


/* Unmarshall delete_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_route4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const DeleteRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_delete_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        ap_xrl_delete_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_route6, cb));
}


/* Unmarshall delete_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_route6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_mcast_route4(
	const char*	dst_xrl_target_name,
	const IPv4&	mcast_addr,
	const string&	input_if,
	const IPv4&	input_ip,
	const string&	output_ifs,
	const uint32_t&	distance,
	const AddMcastRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_add_mcast_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_mcast_route4");
        x->args().add("mcast_addr", mcast_addr);
        x->args().add("input_if", input_if);
        x->args().add("input_ip", input_ip);
        x->args().add("output_ifs", output_ifs);
        x->args().add("distance", distance);
        ap_xrl_add_mcast_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, mcast_addr);
    x->args().set_arg(1, input_if);
    x->args().set_arg(2, input_ip);
    x->args().set_arg(3, output_ifs);
    x->args().set_arg(4, distance);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_mcast_route4, cb));
}


/* Unmarshall add_mcast_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_mcast_route4(
	const XrlError&	e,
	XrlArgs*	a,
	AddMcastRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_mcast_route4(
	const char*	dst_xrl_target_name,
	const IPv4&	mcast_addr,
	const string&	input_if,
	const IPv4&	input_ip,
	const string&	output_ifs,
	const uint32_t&	distance,
	const ReplaceMcastRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_replace_mcast_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_mcast_route4");
        x->args().add("mcast_addr", mcast_addr);
        x->args().add("input_if", input_if);
        x->args().add("input_ip", input_ip);
        x->args().add("output_ifs", output_ifs);
        x->args().add("distance", distance);
        ap_xrl_replace_mcast_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, mcast_addr);
    x->args().set_arg(1, input_if);
    x->args().set_arg(2, input_ip);
    x->args().set_arg(3, output_ifs);
    x->args().set_arg(4, distance);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_mcast_route4, cb));
}


/* Unmarshall replace_mcast_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_mcast_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceMcastRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_mcast_route4(
	const char*	dst_xrl_target_name,
	const IPv4&	mcast_addr,
	const IPv4&	input_ip,
	const DeleteMcastRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_delete_mcast_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_mcast_route4");
        x->args().add("mcast_addr", mcast_addr);
        x->args().add("input_ip", input_ip);
        ap_xrl_delete_mcast_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, mcast_addr);
    x->args().set_arg(1, input_ip);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_mcast_route4, cb));
}


/* Unmarshall delete_mcast_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_mcast_route4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteMcastRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_backup_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const uint32_t&	metric,
	const AddBackupRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_add_backup_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_backup_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_add_backup_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_backup_route4, cb));
}


/* Unmarshall add_backup_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_backup_route4(
	const XrlError&	e,
	XrlArgs*	a,
	AddBackupRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_backup_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const uint32_t&	metric,
	const AddBackupRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_add_backup_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_backup_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_add_backup_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_backup_route6, cb));
}


/* Unmarshall add_backup_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_backup_route6(
	const XrlError&	e,
	XrlArgs*	a,
	AddBackupRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_backup_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const uint32_t&	metric,
	const ReplaceBackupRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_replace_backup_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_backup_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_replace_backup_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_backup_route4, cb));
}


/* Unmarshall replace_backup_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_backup_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceBackupRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_backup_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const uint32_t&	metric,
	const ReplaceBackupRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_replace_backup_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_backup_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("metric", metric);
        ap_xrl_replace_backup_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_backup_route6, cb));
}


/* Unmarshall replace_backup_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_backup_route6(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceBackupRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_backup_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const DeleteBackupRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_delete_backup_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_backup_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        ap_xrl_delete_backup_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_backup_route4, cb));
}


/* Unmarshall delete_backup_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_backup_route4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteBackupRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_backup_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const DeleteBackupRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_delete_backup_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_backup_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        ap_xrl_delete_backup_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_backup_route6, cb));
}


/* Unmarshall delete_backup_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_backup_route6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteBackupRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_interface_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const AddInterfaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_add_interface_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_interface_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_add_interface_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_interface_route4, cb));
}


/* Unmarshall add_interface_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_interface_route4(
	const XrlError&	e,
	XrlArgs*	a,
	AddInterfaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_interface_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const AddInterfaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_add_interface_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_interface_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_add_interface_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_interface_route6, cb));
}


/* Unmarshall add_interface_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_interface_route6(
	const XrlError&	e,
	XrlArgs*	a,
	AddInterfaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_interface_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const ReplaceInterfaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_replace_interface_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_interface_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_replace_interface_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_interface_route4, cb));
}


/* Unmarshall replace_interface_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_interface_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceInterfaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_interface_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const ReplaceInterfaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_replace_interface_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_interface_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_replace_interface_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_interface_route6, cb));
}


/* Unmarshall replace_interface_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_interface_route6(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceInterfaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_interface_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const DeleteInterfaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_delete_interface_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_interface_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        ap_xrl_delete_interface_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_interface_route4, cb));
}


/* Unmarshall delete_interface_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_interface_route4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteInterfaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_interface_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const DeleteInterfaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_delete_interface_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_interface_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        ap_xrl_delete_interface_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_interface_route6, cb));
}


/* Unmarshall delete_interface_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_interface_route6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteInterfaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_backup_interface_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const AddBackupInterfaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_add_backup_interface_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_backup_interface_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_add_backup_interface_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_backup_interface_route4, cb));
}


/* Unmarshall add_backup_interface_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_backup_interface_route4(
	const XrlError&	e,
	XrlArgs*	a,
	AddBackupInterfaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_add_backup_interface_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const AddBackupInterfaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_add_backup_interface_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/add_backup_interface_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_add_backup_interface_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_add_backup_interface_route6, cb));
}


/* Unmarshall add_backup_interface_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_add_backup_interface_route6(
	const XrlError&	e,
	XrlArgs*	a,
	AddBackupInterfaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_backup_interface_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const ReplaceBackupInterfaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_replace_backup_interface_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_backup_interface_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_replace_backup_interface_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_backup_interface_route4, cb));
}


/* Unmarshall replace_backup_interface_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_backup_interface_route4(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceBackupInterfaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_replace_backup_interface_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const ReplaceBackupInterfaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_replace_backup_interface_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/replace_backup_interface_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        ap_xrl_replace_backup_interface_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);
    x->args().set_arg(6, metric);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_replace_backup_interface_route6, cb));
}


/* Unmarshall replace_backup_interface_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_replace_backup_interface_route6(
	const XrlError&	e,
	XrlArgs*	a,
	ReplaceBackupInterfaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_backup_interface_route4(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const DeleteBackupInterfaceRoute4CB&	cb
)
{
    Xrl* x = ap_xrl_delete_backup_interface_route4.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_backup_interface_route4");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        ap_xrl_delete_backup_interface_route4.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_backup_interface_route4, cb));
}


/* Unmarshall delete_backup_interface_route4 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_backup_interface_route4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteBackupInterfaceRoute4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_delete_backup_interface_route6(
	const char*	dst_xrl_target_name,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const DeleteBackupInterfaceRoute6CB&	cb
)
{
    Xrl* x = ap_xrl_delete_backup_interface_route6.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/delete_backup_interface_route6");
        x->args().add("unicast", unicast);
        x->args().add("multicast", multicast);
        x->args().add("network", network);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        ap_xrl_delete_backup_interface_route6.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, unicast);
    x->args().set_arg(1, multicast);
    x->args().set_arg(2, network);
    x->args().set_arg(3, nexthop);
    x->args().set_arg(4, ifname);
    x->args().set_arg(5, vifname);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_delete_backup_interface_route6, cb));
}


/* Unmarshall delete_backup_interface_route6 */
void
XrlStaticRoutesV0p1Client::unmarshall_delete_backup_interface_route6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteBackupInterfaceRoute6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlStaticRoutesV0p1Client::send_enable_log_trace_all(
	const char*	dst_xrl_target_name,
	const bool&	enable,
	const EnableLogTraceAllCB&	cb
)
{
    Xrl* x = ap_xrl_enable_log_trace_all.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "static_routes/0.1/enable_log_trace_all");
        x->args().add("enable", enable);
        ap_xrl_enable_log_trace_all.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, enable);

    return _sender->send(*x, callback(&XrlStaticRoutesV0p1Client::unmarshall_enable_log_trace_all, cb));
}


/* Unmarshall enable_log_trace_all */
void
XrlStaticRoutesV0p1Client::unmarshall_enable_log_trace_all(
	const XrlError&	e,
	XrlArgs*	a,
	EnableLogTraceAllCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
