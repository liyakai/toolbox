/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/profile_xif.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ifndef __XRL_INTERFACES_PROFILE_XIF_HH__
#define __XRL_INTERFACES_PROFILE_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifProfile"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"

//#include <memory>

class XrlProfileV0p1Client {
public:
    XrlProfileV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlProfileV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnableCB;
    /**
     *  Send Xrl intended to:
     *
     *  Enable profiling
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param pname profile variable
     */
    bool send_enable(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const EnableCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisableCB;
    /**
     *  Send Xrl intended to:
     *
     *  Disable profiling
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param pname profile variable
     */
    bool send_disable(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const DisableCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr GetEntriesCB;
    /**
     *  Send Xrl intended to:
     *
     *  Get log entries.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param pname profile variable
     *
     *  @param instance_name to send the profiling info to.
     */
    bool send_get_entries(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const string&	instance_name,
	const GetEntriesCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ClearCB;
    /**
     *  Send Xrl intended to:
     *
     *  Clear the profiling entries
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     *
     *  @param pname profile variable
     */
    bool send_clear(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const ClearCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr ListCB;
    /**
     *  Send Xrl intended to:
     *
     *  List all the profiling variables registered with this target.
     *
     *  @param dst_xrl_target_name the Xrl target name of the destination.
     */
    bool send_list(
	const char*	dst_xrl_target_name,
	const ListCB&	cb
    );

protected:
    XrlSender* _sender;

private:
    static void unmarshall_enable(
	const XrlError&	e,
	XrlArgs*	a,
	EnableCB		cb
    );

    static void unmarshall_disable(
	const XrlError&	e,
	XrlArgs*	a,
	DisableCB		cb
    );

    static void unmarshall_get_entries(
	const XrlError&	e,
	XrlArgs*	a,
	GetEntriesCB		cb
    );

    static void unmarshall_clear(
	const XrlError&	e,
	XrlArgs*	a,
	ClearCB		cb
    );

    static void unmarshall_list(
	const XrlError&	e,
	XrlArgs*	a,
	ListCB		cb
    );

private:
    /* Declare cached Xrl pointers */
    unique_ptr<Xrl> ap_xrl_enable;
    unique_ptr<Xrl> ap_xrl_disable;
    unique_ptr<Xrl> ap_xrl_get_entries;
    unique_ptr<Xrl> ap_xrl_clear;
    unique_ptr<Xrl> ap_xrl_list;
};

#endif /* __XRL_INTERFACES_PROFILE_XIF_HH__ */
