/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/profile_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "profile_xif.hh"

bool
XrlProfileV0p1Client::send_enable(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const EnableCB&	cb
)
{
    Xrl* x = ap_xrl_enable.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "profile/0.1/enable");
        x->args().add("pname", pname);
        ap_xrl_enable.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, pname);

    return _sender->send(*x, callback(&XrlProfileV0p1Client::unmarshall_enable, cb));
}


/* Unmarshall enable */
void
XrlProfileV0p1Client::unmarshall_enable(
	const XrlError&	e,
	XrlArgs*	a,
	EnableCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlProfileV0p1Client::send_disable(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const DisableCB&	cb
)
{
    Xrl* x = ap_xrl_disable.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "profile/0.1/disable");
        x->args().add("pname", pname);
        ap_xrl_disable.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, pname);

    return _sender->send(*x, callback(&XrlProfileV0p1Client::unmarshall_disable, cb));
}


/* Unmarshall disable */
void
XrlProfileV0p1Client::unmarshall_disable(
	const XrlError&	e,
	XrlArgs*	a,
	DisableCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlProfileV0p1Client::send_get_entries(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const string&	instance_name,
	const GetEntriesCB&	cb
)
{
    Xrl* x = ap_xrl_get_entries.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "profile/0.1/get_entries");
        x->args().add("pname", pname);
        x->args().add("instance_name", instance_name);
        ap_xrl_get_entries.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, pname);
    x->args().set_arg(1, instance_name);

    return _sender->send(*x, callback(&XrlProfileV0p1Client::unmarshall_get_entries, cb));
}


/* Unmarshall get_entries */
void
XrlProfileV0p1Client::unmarshall_get_entries(
	const XrlError&	e,
	XrlArgs*	a,
	GetEntriesCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlProfileV0p1Client::send_clear(
	const char*	dst_xrl_target_name,
	const string&	pname,
	const ClearCB&	cb
)
{
    Xrl* x = ap_xrl_clear.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "profile/0.1/clear");
        x->args().add("pname", pname);
        ap_xrl_clear.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, pname);

    return _sender->send(*x, callback(&XrlProfileV0p1Client::unmarshall_clear, cb));
}


/* Unmarshall clear */
void
XrlProfileV0p1Client::unmarshall_clear(
	const XrlError&	e,
	XrlArgs*	a,
	ClearCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlProfileV0p1Client::send_list(
	const char*	dst_xrl_target_name,
	const ListCB&	cb
)
{
    Xrl* x = ap_xrl_list.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "profile/0.1/list");
        ap_xrl_list.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlProfileV0p1Client::unmarshall_list, cb));
}


/* Unmarshall list */
void
XrlProfileV0p1Client::unmarshall_list(
	const XrlError&	e,
	XrlArgs*	a,
	ListCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(1));
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    string info;
    try {
	a->get("info", info);
    } catch (const XrlArgs::BadArgs& bad_args_err) {
	UNUSED(bad_args_err);
	XLOG_ERROR("Error decoding the arguments: %s", bad_args_err.str().c_str());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &info);
}
