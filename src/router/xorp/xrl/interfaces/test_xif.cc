/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/test_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "test_xif.hh"

bool
XrlTestV1p0Client::send_print_hello_world(
	const char*	dst_xrl_target_name,
	const PrintHelloWorldCB&	cb
)
{
    Xrl* x = ap_xrl_print_hello_world.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "test/1.0/print_hello_world");
        ap_xrl_print_hello_world.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlTestV1p0Client::unmarshall_print_hello_world, cb));
}


/* Unmarshall print_hello_world */
void
XrlTestV1p0Client::unmarshall_print_hello_world(
	const XrlError&	e,
	XrlArgs*	a,
	PrintHelloWorldCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestV1p0Client::send_print_hello_world_and_message(
	const char*	dst_xrl_target_name,
	const string&	msg,
	const PrintHelloWorldAndMessageCB&	cb
)
{
    Xrl* x = ap_xrl_print_hello_world_and_message.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "test/1.0/print_hello_world_and_message");
        x->args().add("msg", msg);
        ap_xrl_print_hello_world_and_message.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, msg);

    return _sender->send(*x, callback(&XrlTestV1p0Client::unmarshall_print_hello_world_and_message, cb));
}


/* Unmarshall print_hello_world_and_message */
void
XrlTestV1p0Client::unmarshall_print_hello_world_and_message(
	const XrlError&	e,
	XrlArgs*	a,
	PrintHelloWorldAndMessageCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestV1p0Client::send_get_greeting_count(
	const char*	dst_xrl_target_name,
	const GetGreetingCountCB&	cb
)
{
    Xrl* x = ap_xrl_get_greeting_count.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "test/1.0/get_greeting_count");
        ap_xrl_get_greeting_count.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlTestV1p0Client::unmarshall_get_greeting_count, cb));
}


/* Unmarshall get_greeting_count */
void
XrlTestV1p0Client::unmarshall_get_greeting_count(
	const XrlError&	e,
	XrlArgs*	a,
	GetGreetingCountCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(1));
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    int32_t num_msgs;
    try {
	a->get("num_msgs", num_msgs);
    } catch (const XrlArgs::BadArgs& bad_args_err) {
	UNUSED(bad_args_err);
	XLOG_ERROR("Error decoding the arguments: %s", bad_args_err.str().c_str());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &num_msgs);
}

bool
XrlTestV1p0Client::send_get_greeting(
	const char*	dst_xrl_target_name,
	const int32_t&	greeting_num,
	const GetGreetingCB&	cb
)
{
    Xrl* x = ap_xrl_get_greeting.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "test/1.0/get_greeting");
        x->args().add("greeting_num", greeting_num);
        ap_xrl_get_greeting.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, greeting_num);

    return _sender->send(*x, callback(&XrlTestV1p0Client::unmarshall_get_greeting, cb));
}


/* Unmarshall get_greeting */
void
XrlTestV1p0Client::unmarshall_get_greeting(
	const XrlError&	e,
	XrlArgs*	a,
	GetGreetingCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(1));
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    string greeting;
    try {
	a->get("greeting", greeting);
    } catch (const XrlArgs::BadArgs& bad_args_err) {
	UNUSED(bad_args_err);
	XLOG_ERROR("Error decoding the arguments: %s", bad_args_err.str().c_str());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &greeting);
}

bool
XrlTestV1p0Client::send_shoot_foot(
	const char*	dst_xrl_target_name,
	const ShootFootCB&	cb
)
{
    Xrl* x = ap_xrl_shoot_foot.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "test/1.0/shoot_foot");
        ap_xrl_shoot_foot.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlTestV1p0Client::unmarshall_shoot_foot, cb));
}


/* Unmarshall shoot_foot */
void
XrlTestV1p0Client::unmarshall_shoot_foot(
	const XrlError&	e,
	XrlArgs*	a,
	ShootFootCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestV1p0Client::send_float_my_point(
	const char*	dst_xrl_target_name,
	const fp64_t&	input,
	const FloatMyPointCB&	cb
)
{
    Xrl* x = ap_xrl_float_my_point.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "test/1.0/float_my_point");
        x->args().add("input", input);
        ap_xrl_float_my_point.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, input);

    return _sender->send(*x, callback(&XrlTestV1p0Client::unmarshall_float_my_point, cb));
}


/* Unmarshall float_my_point */
void
XrlTestV1p0Client::unmarshall_float_my_point(
	const XrlError&	e,
	XrlArgs*	a,
	FloatMyPointCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(1));
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    fp64_t output;
    try {
	a->get("output", output);
    } catch (const XrlArgs::BadArgs& bad_args_err) {
	UNUSED(bad_args_err);
	XLOG_ERROR("Error decoding the arguments: %s", bad_args_err.str().c_str());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &output);
}
