/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/datain_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "datain_xif.hh"

bool
XrlDatainV0p1Client::send_receive(
	const char*	dst_xrl_target_name,
	const string&	peer,
	const uint32_t&	genid,
	const bool&	status,
	const uint32_t&	secs,
	const uint32_t&	micro,
	const vector<uint8_t>&	data,
	const ReceiveCB&	cb
)
{
    Xrl* x = ap_xrl_receive.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "datain/0.1/receive");
        x->args().add("peer", peer);
        x->args().add("genid", genid);
        x->args().add("status", status);
        x->args().add("secs", secs);
        x->args().add("micro", micro);
        x->args().add("data", data);
        ap_xrl_receive.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, peer);
    x->args().set_arg(1, genid);
    x->args().set_arg(2, status);
    x->args().set_arg(3, secs);
    x->args().set_arg(4, micro);
    x->args().set_arg(5, data);

    return _sender->send(*x, callback(&XrlDatainV0p1Client::unmarshall_receive, cb));
}


/* Unmarshall receive */
void
XrlDatainV0p1Client::unmarshall_receive(
	const XrlError&	e,
	XrlArgs*	a,
	ReceiveCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlDatainV0p1Client::send_error(
	const char*	dst_xrl_target_name,
	const string&	peer,
	const uint32_t&	genid,
	const string&	reason,
	const ErrorCB&	cb
)
{
    Xrl* x = ap_xrl_error.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "datain/0.1/error");
        x->args().add("peer", peer);
        x->args().add("genid", genid);
        x->args().add("reason", reason);
        ap_xrl_error.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, peer);
    x->args().set_arg(1, genid);
    x->args().set_arg(2, reason);

    return _sender->send(*x, callback(&XrlDatainV0p1Client::unmarshall_error, cb));
}


/* Unmarshall error */
void
XrlDatainV0p1Client::unmarshall_error(
	const XrlError&	e,
	XrlArgs*	a,
	ErrorCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlDatainV0p1Client::send_closed(
	const char*	dst_xrl_target_name,
	const string&	peer,
	const uint32_t&	genid,
	const ClosedCB&	cb
)
{
    Xrl* x = ap_xrl_closed.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "datain/0.1/closed");
        x->args().add("peer", peer);
        x->args().add("genid", genid);
        ap_xrl_closed.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, peer);
    x->args().set_arg(1, genid);

    return _sender->send(*x, callback(&XrlDatainV0p1Client::unmarshall_closed, cb));
}


/* Unmarshall closed */
void
XrlDatainV0p1Client::unmarshall_closed(
	const XrlError&	e,
	XrlArgs*	a,
	ClosedCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
