/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/redist6_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "redist6_xif.hh"

bool
XrlRedist6V0p1Client::send_add_route(
	const char*	dst_xrl_target_name,
	const IPv6Net&	dst,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	cookie,
	const string&	protocol_origin,
	const AddRouteCB&	cb
)
{
    Xrl* x = ap_xrl_add_route.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "redist6/0.1/add_route");
        x->args().add("dst", dst);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        x->args().add("admin_distance", admin_distance);
        x->args().add("cookie", cookie);
        x->args().add("protocol_origin", protocol_origin);
        ap_xrl_add_route.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, dst);
    x->args().set_arg(1, nexthop);
    x->args().set_arg(2, ifname);
    x->args().set_arg(3, vifname);
    x->args().set_arg(4, metric);
    x->args().set_arg(5, admin_distance);
    x->args().set_arg(6, cookie);
    x->args().set_arg(7, protocol_origin);

    return _sender->send(*x, callback(&XrlRedist6V0p1Client::unmarshall_add_route, cb));
}


/* Unmarshall add_route */
void
XrlRedist6V0p1Client::unmarshall_add_route(
	const XrlError&	e,
	XrlArgs*	a,
	AddRouteCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlRedist6V0p1Client::send_delete_route(
	const char*	dst_xrl_target_name,
	const IPv6Net&	dst,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	cookie,
	const string&	protocol_origin,
	const DeleteRouteCB&	cb
)
{
    Xrl* x = ap_xrl_delete_route.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "redist6/0.1/delete_route");
        x->args().add("dst", dst);
        x->args().add("nexthop", nexthop);
        x->args().add("ifname", ifname);
        x->args().add("vifname", vifname);
        x->args().add("metric", metric);
        x->args().add("admin_distance", admin_distance);
        x->args().add("cookie", cookie);
        x->args().add("protocol_origin", protocol_origin);
        ap_xrl_delete_route.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, dst);
    x->args().set_arg(1, nexthop);
    x->args().set_arg(2, ifname);
    x->args().set_arg(3, vifname);
    x->args().set_arg(4, metric);
    x->args().set_arg(5, admin_distance);
    x->args().set_arg(6, cookie);
    x->args().set_arg(7, protocol_origin);

    return _sender->send(*x, callback(&XrlRedist6V0p1Client::unmarshall_delete_route, cb));
}


/* Unmarshall delete_route */
void
XrlRedist6V0p1Client::unmarshall_delete_route(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteRouteCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlRedist6V0p1Client::send_starting_route_dump(
	const char*	dst_xrl_target_name,
	const string&	cookie,
	const StartingRouteDumpCB&	cb
)
{
    Xrl* x = ap_xrl_starting_route_dump.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "redist6/0.1/starting_route_dump");
        x->args().add("cookie", cookie);
        ap_xrl_starting_route_dump.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, cookie);

    return _sender->send(*x, callback(&XrlRedist6V0p1Client::unmarshall_starting_route_dump, cb));
}


/* Unmarshall starting_route_dump */
void
XrlRedist6V0p1Client::unmarshall_starting_route_dump(
	const XrlError&	e,
	XrlArgs*	a,
	StartingRouteDumpCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlRedist6V0p1Client::send_finishing_route_dump(
	const char*	dst_xrl_target_name,
	const string&	cookie,
	const FinishingRouteDumpCB&	cb
)
{
    Xrl* x = ap_xrl_finishing_route_dump.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "redist6/0.1/finishing_route_dump");
        x->args().add("cookie", cookie);
        ap_xrl_finishing_route_dump.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, cookie);

    return _sender->send(*x, callback(&XrlRedist6V0p1Client::unmarshall_finishing_route_dump, cb));
}


/* Unmarshall finishing_route_dump */
void
XrlRedist6V0p1Client::unmarshall_finishing_route_dump(
	const XrlError&	e,
	XrlArgs*	a,
	FinishingRouteDumpCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
