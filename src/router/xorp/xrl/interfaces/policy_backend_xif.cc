/*
 * obj/x86_64-unknown-linux-gnu/xrl/interfaces/policy_backend_xif.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#include "policy_backend_xif.hh"

bool
XrlPolicyBackendV0p1Client::send_configure(
	const char*	dst_xrl_target_name,
	const uint32_t&	filter,
	const string&	conf,
	const ConfigureCB&	cb
)
{
    Xrl* x = ap_xrl_configure.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "policy_backend/0.1/configure");
        x->args().add("filter", filter);
        x->args().add("conf", conf);
        ap_xrl_configure.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, filter);
    x->args().set_arg(1, conf);

    return _sender->send(*x, callback(&XrlPolicyBackendV0p1Client::unmarshall_configure, cb));
}


/* Unmarshall configure */
void
XrlPolicyBackendV0p1Client::unmarshall_configure(
	const XrlError&	e,
	XrlArgs*	a,
	ConfigureCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlPolicyBackendV0p1Client::send_reset(
	const char*	dst_xrl_target_name,
	const uint32_t&	filter,
	const ResetCB&	cb
)
{
    Xrl* x = ap_xrl_reset.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "policy_backend/0.1/reset");
        x->args().add("filter", filter);
        ap_xrl_reset.reset(x);
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, filter);

    return _sender->send(*x, callback(&XrlPolicyBackendV0p1Client::unmarshall_reset, cb));
}


/* Unmarshall reset */
void
XrlPolicyBackendV0p1Client::unmarshall_reset(
	const XrlError&	e,
	XrlArgs*	a,
	ResetCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlPolicyBackendV0p1Client::send_push_routes(
	const char*	dst_xrl_target_name,
	const PushRoutesCB&	cb
)
{
    Xrl* x = ap_xrl_push_routes.get();

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "policy_backend/0.1/push_routes");
        ap_xrl_push_routes.reset(x);
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(&XrlPolicyBackendV0p1Client::unmarshall_push_routes, cb));
}


/* Unmarshall push_routes */
void
XrlPolicyBackendV0p1Client::unmarshall_push_routes(
	const XrlError&	e,
	XrlArgs*	a,
	PushRoutesCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
