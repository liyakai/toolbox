/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/test_socket4.xrls
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

/**
 *  Get name of Xrl Target
 */
finder://test_socket4/common/0.1/get_target_name->name:txt

/**
 *  Get version string from Xrl Target
 */
finder://test_socket4/common/0.1/get_version->version:txt

/**
 *  Get status of Xrl Target
 */
finder://test_socket4/common/0.1/get_status->status:u32&reason:txt

/**
 *  Request clean shutdown of Xrl Target
 */
finder://test_socket4/common/0.1/shutdown

/**
 *  Request a startup of Xrl Target
 */
finder://test_socket4/common/0.1/startup

/**
 *  Method invoked by target implementing socket4/0.1 when a packet arrives
 *  from an IPv4 source.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 *
 *  @param if_name the interface name the packet arrived on, if known. If
 *  unknown, then it is an empty string.
 *
 *  @param vif_name the vif name the packet arrived on, if known. If unknown,
 *  then it is an empty string.
 *
 *  @param src_host the originating host.
 *
 *  @param src_port the originating IP port.
 *
 *  @param data the data received.
 */
finder://test_socket4/socket4_user/0.1/recv_event?sockid:txt&if_name:txt&vif_name:txt&src_host:ipv4&src_port:u32&data:binary

/**
 *  Method invoked by target implementing socket4/0.1 when a connection request
 *  is received from an IPv4 source. It applies only to TCP sockets.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 *
 *  @param src_host the connecting host.
 *
 *  @param src_port the connecting IP port.
 *
 *  @param new_sockid the identifier associated with the new socket that has
 *  been created to handle the new connection.
 *
 *  @param accept if true, the connection request has been accepted, otherwise
 *  it has been rejected.
 */
finder://test_socket4/socket4_user/0.1/inbound_connect_event?sockid:txt&src_host:ipv4&src_port:u32&new_sockid:txt->accept:bool

/**
 *  Method invoked by target implementing socket4/0.1 when an outgoing
 *  connection request originated by the local host is completed. It applies
 *  only to TCP sockets. Note that if the connection failed, the error_event
 *  will be dispatched instead.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 */
finder://test_socket4/socket4_user/0.1/outgoing_connect_event?sockid:txt

/**
 *  Method invoked by target implementing socket4/0.1 when an error occurs.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 *
 *  @param error a textual description of the error.
 *
 *  @param fatal indication of whether socket is shutdown because of error.
 */
finder://test_socket4/socket4_user/0.1/error_event?sockid:txt&error:txt&fatal:bool

/**
 *  Method invoked by target implementing socket4/0.1 when the peer has closed
 *  the connection. It applies only to TCP sockets. Note that the socket itself
 *  is left open and must be explicitly closed.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 */
finder://test_socket4/socket4_user/0.1/disconnect_event?sockid:txt

