/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/test_xrls_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_TEST_XRLS_BASE_HH__
#define __XRL_TARGETS_TEST_XRLS_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlTestXrlsTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlTestXrlsTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlTestXrlsTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlTestXrlsTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "test_xrls/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    virtual XrlCmdError test_xrls_0_1_start_transmission() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01StartTransmissionRF;

    class TestXrls01StartTransmissionCB {
        TestXrls01StartTransmissionRF cb;

    public:
        operator const TestXrls01StartTransmissionRF& () const { return cb; }
        const TestXrls01StartTransmissionRF& operator ->() const { return cb; }
        TestXrls01StartTransmissionCB(const TestXrls01StartTransmissionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01StartTransmissionRsp :
      public TestXrls01StartTransmissionCB {
        TestXrls01StartTransmissionRsp(const TestXrls01StartTransmissionRF& cb)
          : TestXrls01StartTransmissionCB(cb) { }

    };

    virtual void async_test_xrls_0_1_start_transmission
       (
	TestXrls01StartTransmissionCB);
#endif

    virtual XrlCmdError test_xrls_0_1_end_transmission() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01EndTransmissionRF;

    class TestXrls01EndTransmissionCB {
        TestXrls01EndTransmissionRF cb;

    public:
        operator const TestXrls01EndTransmissionRF& () const { return cb; }
        const TestXrls01EndTransmissionRF& operator ->() const { return cb; }
        TestXrls01EndTransmissionCB(const TestXrls01EndTransmissionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01EndTransmissionRsp :
      public TestXrls01EndTransmissionCB {
        TestXrls01EndTransmissionRsp(const TestXrls01EndTransmissionRF& cb)
          : TestXrls01EndTransmissionCB(cb) { }

    };

    virtual void async_test_xrls_0_1_end_transmission
       (
	TestXrls01EndTransmissionCB);
#endif

    virtual XrlCmdError test_xrls_0_1_add_xrl0() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01AddXrl0RF;

    class TestXrls01AddXrl0CB {
        TestXrls01AddXrl0RF cb;

    public:
        operator const TestXrls01AddXrl0RF& () const { return cb; }
        const TestXrls01AddXrl0RF& operator ->() const { return cb; }
        TestXrls01AddXrl0CB(const TestXrls01AddXrl0RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01AddXrl0Rsp :
      public TestXrls01AddXrl0CB {
        TestXrls01AddXrl0Rsp(const TestXrls01AddXrl0RF& cb)
          : TestXrls01AddXrl0CB(cb) { }

    };

    virtual void async_test_xrls_0_1_add_xrl0
       (
	TestXrls01AddXrl0CB);
#endif

    virtual XrlCmdError test_xrls_0_1_add_xrl1(
	// Input values,
	const string&	data1) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01AddXrl1RF;

    class TestXrls01AddXrl1CB {
        TestXrls01AddXrl1RF cb;

    public:
        operator const TestXrls01AddXrl1RF& () const { return cb; }
        const TestXrls01AddXrl1RF& operator ->() const { return cb; }
        TestXrls01AddXrl1CB(const TestXrls01AddXrl1RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01AddXrl1Rsp :
      public TestXrls01AddXrl1CB {
        TestXrls01AddXrl1Rsp(const TestXrls01AddXrl1RF& cb)
          : TestXrls01AddXrl1CB(cb) { }

    };

    virtual void async_test_xrls_0_1_add_xrl1
       (
	const string&	data1,
	TestXrls01AddXrl1CB);
#endif

    virtual XrlCmdError test_xrls_0_1_add_xrl2(
	// Input values,
	const string&	data1,
	const string&	data2) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01AddXrl2RF;

    class TestXrls01AddXrl2CB {
        TestXrls01AddXrl2RF cb;

    public:
        operator const TestXrls01AddXrl2RF& () const { return cb; }
        const TestXrls01AddXrl2RF& operator ->() const { return cb; }
        TestXrls01AddXrl2CB(const TestXrls01AddXrl2RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01AddXrl2Rsp :
      public TestXrls01AddXrl2CB {
        TestXrls01AddXrl2Rsp(const TestXrls01AddXrl2RF& cb)
          : TestXrls01AddXrl2CB(cb) { }

    };

    virtual void async_test_xrls_0_1_add_xrl2
       (
	const string&	data1,
	const string&	data2,
	TestXrls01AddXrl2CB);
#endif

    virtual XrlCmdError test_xrls_0_1_add_xrl9(
	// Input values,
	const bool&	data1,
	const int32_t&	data2,
	const IPv4&	data3,
	const IPv4Net&	data4,
	const IPv6&	data5,
	const IPv6Net&	data6,
	const Mac&	data7,
	const string&	data8,
	const vector<uint8_t>&	data9) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01AddXrl9RF;

    class TestXrls01AddXrl9CB {
        TestXrls01AddXrl9RF cb;

    public:
        operator const TestXrls01AddXrl9RF& () const { return cb; }
        const TestXrls01AddXrl9RF& operator ->() const { return cb; }
        TestXrls01AddXrl9CB(const TestXrls01AddXrl9RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01AddXrl9Rsp :
      public TestXrls01AddXrl9CB {
        TestXrls01AddXrl9Rsp(const TestXrls01AddXrl9RF& cb)
          : TestXrls01AddXrl9CB(cb) { }

    };

    virtual void async_test_xrls_0_1_add_xrl9
       (
	const bool&	data1,
	const int32_t&	data2,
	const IPv4&	data3,
	const IPv4Net&	data4,
	const IPv6&	data5,
	const IPv6Net&	data6,
	const Mac&	data7,
	const string&	data8,
	const vector<uint8_t>&	data9,
	TestXrls01AddXrl9CB);
#endif

    virtual XrlCmdError test_xrls_0_1_add_xrlx(
	// Input values,
	const XrlAtomList&	data) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    TestXrls01AddXrlxRF;

    class TestXrls01AddXrlxCB {
        TestXrls01AddXrlxRF cb;

    public:
        operator const TestXrls01AddXrlxRF& () const { return cb; }
        const TestXrls01AddXrlxRF& operator ->() const { return cb; }
        TestXrls01AddXrlxCB(const TestXrls01AddXrlxRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct TestXrls01AddXrlxRsp :
      public TestXrls01AddXrlxCB {
        TestXrls01AddXrlxRsp(const TestXrls01AddXrlxRF& cb)
          : TestXrls01AddXrlxCB(cb) { }

    };

    virtual void async_test_xrls_0_1_add_xrlx
       (
	const XrlAtomList&	data,
	TestXrls01AddXrlxCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_start_transmission(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_start_transmission
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_end_transmission(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_end_transmission
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_add_xrl0(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_add_xrl0
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_add_xrl1(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_add_xrl1
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_add_xrl2(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_add_xrl2
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_add_xrl9(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_add_xrl9
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_xrls_0_1_add_xrlx(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_xrls_0_1_add_xrlx
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlTestXrlsTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_TEST_XRLS_BASE_HH__
