/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/static_routes_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "static_routes_base.hh"


const struct XrlStaticRoutesTargetBase::handler_table XrlStaticRoutesTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlStaticRoutesTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlStaticRoutesTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlStaticRoutesTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlStaticRoutesTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlStaticRoutesTargetBase::handle_common_0_1_startup },
    { "finder_event_observer/0.1/xrl_target_birth",
      &XrlStaticRoutesTargetBase::handle_finder_event_observer_0_1_xrl_target_birth },
    { "finder_event_observer/0.1/xrl_target_death",
      &XrlStaticRoutesTargetBase::handle_finder_event_observer_0_1_xrl_target_death },
    { "policy_backend/0.1/configure",
      &XrlStaticRoutesTargetBase::handle_policy_backend_0_1_configure },
    { "policy_backend/0.1/reset",
      &XrlStaticRoutesTargetBase::handle_policy_backend_0_1_reset },
    { "policy_backend/0.1/push_routes",
      &XrlStaticRoutesTargetBase::handle_policy_backend_0_1_push_routes },
    { "mfea_client/0.1/recv_kernel_signal_message4",
      &XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message4 },
    { "mfea_client/0.1/recv_dataflow_signal4",
      &XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_dataflow_signal4 },
    { "mfea_client/0.1/recv_kernel_signal_message6",
      &XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message6 },
    { "mfea_client/0.1/recv_dataflow_signal6",
      &XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_dataflow_signal6 },
    { "static_routes/0.1/enable_static_routes",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_enable_static_routes },
    { "static_routes/0.1/start_static_routes",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_start_static_routes },
    { "static_routes/0.1/stop_static_routes",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_stop_static_routes },
    { "static_routes/0.1/add_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_route4 },
    { "static_routes/0.1/add_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_route6 },
    { "static_routes/0.1/replace_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_route4 },
    { "static_routes/0.1/replace_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_route6 },
    { "static_routes/0.1/delete_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_route4 },
    { "static_routes/0.1/delete_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_route6 },
    { "static_routes/0.1/add_mcast_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_mcast_route4 },
    { "static_routes/0.1/replace_mcast_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_mcast_route4 },
    { "static_routes/0.1/delete_mcast_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_mcast_route4 },
    { "static_routes/0.1/add_backup_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_route4 },
    { "static_routes/0.1/add_backup_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_route6 },
    { "static_routes/0.1/replace_backup_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_route4 },
    { "static_routes/0.1/replace_backup_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_route6 },
    { "static_routes/0.1/delete_backup_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_route4 },
    { "static_routes/0.1/delete_backup_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_route6 },
    { "static_routes/0.1/add_interface_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_interface_route4 },
    { "static_routes/0.1/add_interface_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_interface_route6 },
    { "static_routes/0.1/replace_interface_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_interface_route4 },
    { "static_routes/0.1/replace_interface_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_interface_route6 },
    { "static_routes/0.1/delete_interface_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_interface_route4 },
    { "static_routes/0.1/delete_interface_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_interface_route6 },
    { "static_routes/0.1/add_backup_interface_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_interface_route4 },
    { "static_routes/0.1/add_backup_interface_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_interface_route6 },
    { "static_routes/0.1/replace_backup_interface_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_interface_route4 },
    { "static_routes/0.1/replace_backup_interface_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_interface_route6 },
    { "static_routes/0.1/delete_backup_interface_route4",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_interface_route4 },
    { "static_routes/0.1/delete_backup_interface_route6",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_interface_route6 },
    { "static_routes/0.1/enable_log_trace_all",
      &XrlStaticRoutesTargetBase::handle_static_routes_0_1_enable_log_trace_all },
};

const size_t XrlStaticRoutesTargetBase::num_handlers = (sizeof(XrlStaticRoutesTargetBase::handlers) / sizeof(XrlStaticRoutesTargetBase::handlers[0]));


XrlStaticRoutesTargetBase::XrlStaticRoutesTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlStaticRoutesTargetBase::~XrlStaticRoutesTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlStaticRoutesTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_finder_event_observer_0_1_xrl_target_birth
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_finder_event_observer_0_1_xrl_target_birth(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetBirthCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_birth");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetBirthRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_finder_event_observer_0_1_xrl_target_birth, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_finder_event_observer_0_1_xrl_target_death
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_finder_event_observer_0_1_xrl_target_death(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetDeathCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_death");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetDeathRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_finder_event_observer_0_1_xrl_target_death, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_policy_backend_0_1_configure
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/configure", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_policy_backend_0_1_configure(
	const uint32_t&	arg_filter,
	const string&	arg_conf,
	PolicyBackend01ConfigureCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_configure(
        arg_filter,
        arg_conf);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_policy_backend_0_1_configure(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/configure");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ConfigureRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_policy_backend_0_1_configure, pxa_outputs);
	async_policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/configure", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_policy_backend_0_1_reset
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/reset", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_policy_backend_0_1_reset(
	const uint32_t&	arg_filter,
	PolicyBackend01ResetCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_reset(
        arg_filter);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_policy_backend_0_1_reset(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/reset");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ResetRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_policy_backend_0_1_reset, pxa_outputs);
	async_policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/reset", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_policy_backend_0_1_push_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/push_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_policy_backend_0_1_push_routes(
	PolicyBackend01PushRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_push_routes();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_policy_backend_0_1_push_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/push_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01PushRoutesRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_policy_backend_0_1_push_routes, pxa_outputs);
	async_policy_backend_0_1_push_routes( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_push_routes();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/push_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_kernel_signal_message4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea_client/0.1/recv_kernel_signal_message4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_mfea_client_0_1_recv_kernel_signal_message4(
	const string&	arg_xrl_sender_name,
	const uint32_t&	arg_message_type,
	const string&	arg_vif_name,
	const uint32_t&	arg_vif_index,
	const IPv4&	arg_source_address,
	const IPv4&	arg_dest_address,
	const vector<uint8_t>&	arg_protocol_message,
	MfeaClient01RecvKernelSignalMessage4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message4(
        arg_xrl_sender_name,
        arg_message_type,
        arg_vif_name,
        arg_vif_index,
        arg_source_address,
        arg_dest_address,
        arg_protocol_message);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "mfea_client/0.1/recv_kernel_signal_message4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	MfeaClient01RecvKernelSignalMessage4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_kernel_signal_message4, pxa_outputs);
	async_mfea_client_0_1_recv_kernel_signal_message4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "message_type").uint32(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "vif_index").uint32(),
	    xa_inputs.get(4, "source_address").ipv4(),
	    xa_inputs.get(5, "dest_address").ipv4(),
	    xa_inputs.get(6, "protocol_message").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "message_type").uint32(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "vif_index").uint32(),
	    xa_inputs.get(4, "source_address").ipv4(),
	    xa_inputs.get(5, "dest_address").ipv4(),
	    xa_inputs.get(6, "protocol_message").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea_client/0.1/recv_kernel_signal_message4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_dataflow_signal4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea_client/0.1/recv_dataflow_signal4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_mfea_client_0_1_recv_dataflow_signal4(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	const uint32_t&	arg_threshold_interval_sec,
	const uint32_t&	arg_threshold_interval_usec,
	const uint32_t&	arg_measured_interval_sec,
	const uint32_t&	arg_measured_interval_usec,
	const uint32_t&	arg_threshold_packets,
	const uint32_t&	arg_threshold_bytes,
	const uint32_t&	arg_measured_packets,
	const uint32_t&	arg_measured_bytes,
	const bool&	arg_is_threshold_in_packets,
	const bool&	arg_is_threshold_in_bytes,
	const bool&	arg_is_geq_upcall,
	const bool&	arg_is_leq_upcall,
	MfeaClient01RecvDataflowSignal4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_client_0_1_recv_dataflow_signal4(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_threshold_interval_sec,
        arg_threshold_interval_usec,
        arg_measured_interval_sec,
        arg_measured_interval_usec,
        arg_threshold_packets,
        arg_threshold_bytes,
        arg_measured_packets,
        arg_measured_bytes,
        arg_is_threshold_in_packets,
        arg_is_threshold_in_bytes,
        arg_is_geq_upcall,
        arg_is_leq_upcall);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_dataflow_signal4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 15) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(15), XORP_UINT_CAST(xa_inputs.size()), "mfea_client/0.1/recv_dataflow_signal4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	MfeaClient01RecvDataflowSignal4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_dataflow_signal4, pxa_outputs);
	async_mfea_client_0_1_recv_dataflow_signal4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "measured_interval_sec").uint32(),
	    xa_inputs.get(6, "measured_interval_usec").uint32(),
	    xa_inputs.get(7, "threshold_packets").uint32(),
	    xa_inputs.get(8, "threshold_bytes").uint32(),
	    xa_inputs.get(9, "measured_packets").uint32(),
	    xa_inputs.get(10, "measured_bytes").uint32(),
	    xa_inputs.get(11, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(12, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(13, "is_geq_upcall").boolean(),
	    xa_inputs.get(14, "is_leq_upcall").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "measured_interval_sec").uint32(),
	    xa_inputs.get(6, "measured_interval_usec").uint32(),
	    xa_inputs.get(7, "threshold_packets").uint32(),
	    xa_inputs.get(8, "threshold_bytes").uint32(),
	    xa_inputs.get(9, "measured_packets").uint32(),
	    xa_inputs.get(10, "measured_bytes").uint32(),
	    xa_inputs.get(11, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(12, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(13, "is_geq_upcall").boolean(),
	    xa_inputs.get(14, "is_leq_upcall").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea_client/0.1/recv_dataflow_signal4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_kernel_signal_message6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea_client/0.1/recv_kernel_signal_message6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_mfea_client_0_1_recv_kernel_signal_message6(
	const string&	arg_xrl_sender_name,
	const uint32_t&	arg_message_type,
	const string&	arg_vif_name,
	const uint32_t&	arg_vif_index,
	const IPv6&	arg_source_address,
	const IPv6&	arg_dest_address,
	const vector<uint8_t>&	arg_protocol_message,
	MfeaClient01RecvKernelSignalMessage6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message6(
        arg_xrl_sender_name,
        arg_message_type,
        arg_vif_name,
        arg_vif_index,
        arg_source_address,
        arg_dest_address,
        arg_protocol_message);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "mfea_client/0.1/recv_kernel_signal_message6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	MfeaClient01RecvKernelSignalMessage6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_kernel_signal_message6, pxa_outputs);
	async_mfea_client_0_1_recv_kernel_signal_message6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "message_type").uint32(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "vif_index").uint32(),
	    xa_inputs.get(4, "source_address").ipv6(),
	    xa_inputs.get(5, "dest_address").ipv6(),
	    xa_inputs.get(6, "protocol_message").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "message_type").uint32(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "vif_index").uint32(),
	    xa_inputs.get(4, "source_address").ipv6(),
	    xa_inputs.get(5, "dest_address").ipv6(),
	    xa_inputs.get(6, "protocol_message").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea_client/0.1/recv_kernel_signal_message6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_dataflow_signal6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea_client/0.1/recv_dataflow_signal6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_mfea_client_0_1_recv_dataflow_signal6(
	const string&	arg_xrl_sender_name,
	const IPv6&	arg_source_address,
	const IPv6&	arg_group_address,
	const uint32_t&	arg_threshold_interval_sec,
	const uint32_t&	arg_threshold_interval_usec,
	const uint32_t&	arg_measured_interval_sec,
	const uint32_t&	arg_measured_interval_usec,
	const uint32_t&	arg_threshold_packets,
	const uint32_t&	arg_threshold_bytes,
	const uint32_t&	arg_measured_packets,
	const uint32_t&	arg_measured_bytes,
	const bool&	arg_is_threshold_in_packets,
	const bool&	arg_is_threshold_in_bytes,
	const bool&	arg_is_geq_upcall,
	const bool&	arg_is_leq_upcall,
	MfeaClient01RecvDataflowSignal6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_client_0_1_recv_dataflow_signal6(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_threshold_interval_sec,
        arg_threshold_interval_usec,
        arg_measured_interval_sec,
        arg_measured_interval_usec,
        arg_threshold_packets,
        arg_threshold_bytes,
        arg_measured_packets,
        arg_measured_bytes,
        arg_is_threshold_in_packets,
        arg_is_threshold_in_bytes,
        arg_is_geq_upcall,
        arg_is_leq_upcall);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_mfea_client_0_1_recv_dataflow_signal6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 15) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(15), XORP_UINT_CAST(xa_inputs.size()), "mfea_client/0.1/recv_dataflow_signal6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	MfeaClient01RecvDataflowSignal6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_mfea_client_0_1_recv_dataflow_signal6, pxa_outputs);
	async_mfea_client_0_1_recv_dataflow_signal6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "measured_interval_sec").uint32(),
	    xa_inputs.get(6, "measured_interval_usec").uint32(),
	    xa_inputs.get(7, "threshold_packets").uint32(),
	    xa_inputs.get(8, "threshold_bytes").uint32(),
	    xa_inputs.get(9, "measured_packets").uint32(),
	    xa_inputs.get(10, "measured_bytes").uint32(),
	    xa_inputs.get(11, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(12, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(13, "is_geq_upcall").boolean(),
	    xa_inputs.get(14, "is_leq_upcall").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "measured_interval_sec").uint32(),
	    xa_inputs.get(6, "measured_interval_usec").uint32(),
	    xa_inputs.get(7, "threshold_packets").uint32(),
	    xa_inputs.get(8, "threshold_bytes").uint32(),
	    xa_inputs.get(9, "measured_packets").uint32(),
	    xa_inputs.get(10, "measured_bytes").uint32(),
	    xa_inputs.get(11, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(12, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(13, "is_geq_upcall").boolean(),
	    xa_inputs.get(14, "is_leq_upcall").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea_client/0.1/recv_dataflow_signal6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_enable_static_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/enable_static_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_enable_static_routes(
	const bool&	arg_enable,
	StaticRoutes01EnableStaticRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_enable_static_routes(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_enable_static_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/enable_static_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01EnableStaticRoutesRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_enable_static_routes, pxa_outputs);
	async_static_routes_0_1_enable_static_routes(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_enable_static_routes(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/enable_static_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_start_static_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/start_static_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_start_static_routes(
	StaticRoutes01StartStaticRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_start_static_routes();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_start_static_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/start_static_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01StartStaticRoutesRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_start_static_routes, pxa_outputs);
	async_static_routes_0_1_start_static_routes( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_start_static_routes();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/start_static_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_stop_static_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/stop_static_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_stop_static_routes(
	StaticRoutes01StopStaticRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_stop_static_routes();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_stop_static_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/stop_static_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01StopStaticRoutesRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_stop_static_routes, pxa_outputs);
	async_static_routes_0_1_stop_static_routes( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_stop_static_routes();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/stop_static_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01AddRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_route4, pxa_outputs);
	async_static_routes_0_1_add_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01AddRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_route6, pxa_outputs);
	async_static_routes_0_1_add_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_route4, pxa_outputs);
	async_static_routes_0_1_replace_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_route6, pxa_outputs);
	async_static_routes_0_1_replace_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	StaticRoutes01DeleteRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_route4, pxa_outputs);
	async_static_routes_0_1_delete_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	StaticRoutes01DeleteRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_route6, pxa_outputs);
	async_static_routes_0_1_delete_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_mcast_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_mcast_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_mcast_route4(
	const IPv4&	arg_mcast_addr,
	const string&	arg_input_if,
	const IPv4&	arg_input_ip,
	const string&	arg_output_ifs,
	const uint32_t&	arg_distance,
	StaticRoutes01AddMcastRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_mcast_route4(
        arg_mcast_addr,
        arg_input_if,
        arg_input_ip,
        arg_output_ifs,
        arg_distance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_mcast_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_mcast_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddMcastRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_mcast_route4, pxa_outputs);
	async_static_routes_0_1_add_mcast_route4(
	    xa_inputs.get(0, "mcast_addr").ipv4(),
	    xa_inputs.get(1, "input_if").text(),
	    xa_inputs.get(2, "input_ip").ipv4(),
	    xa_inputs.get(3, "output_ifs").text(),
	    xa_inputs.get(4, "distance").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_mcast_route4(
	    xa_inputs.get(0, "mcast_addr").ipv4(),
	    xa_inputs.get(1, "input_if").text(),
	    xa_inputs.get(2, "input_ip").ipv4(),
	    xa_inputs.get(3, "output_ifs").text(),
	    xa_inputs.get(4, "distance").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_mcast_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_mcast_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_mcast_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_mcast_route4(
	const IPv4&	arg_mcast_addr,
	const string&	arg_input_if,
	const IPv4&	arg_input_ip,
	const string&	arg_output_ifs,
	const uint32_t&	arg_distance,
	StaticRoutes01ReplaceMcastRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_mcast_route4(
        arg_mcast_addr,
        arg_input_if,
        arg_input_ip,
        arg_output_ifs,
        arg_distance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_mcast_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_mcast_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceMcastRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_mcast_route4, pxa_outputs);
	async_static_routes_0_1_replace_mcast_route4(
	    xa_inputs.get(0, "mcast_addr").ipv4(),
	    xa_inputs.get(1, "input_if").text(),
	    xa_inputs.get(2, "input_ip").ipv4(),
	    xa_inputs.get(3, "output_ifs").text(),
	    xa_inputs.get(4, "distance").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_mcast_route4(
	    xa_inputs.get(0, "mcast_addr").ipv4(),
	    xa_inputs.get(1, "input_if").text(),
	    xa_inputs.get(2, "input_ip").ipv4(),
	    xa_inputs.get(3, "output_ifs").text(),
	    xa_inputs.get(4, "distance").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_mcast_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_mcast_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_mcast_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_mcast_route4(
	const IPv4&	arg_mcast_addr,
	const IPv4&	arg_input_ip,
	StaticRoutes01DeleteMcastRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_mcast_route4(
        arg_mcast_addr,
        arg_input_ip);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_mcast_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_mcast_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteMcastRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_mcast_route4, pxa_outputs);
	async_static_routes_0_1_delete_mcast_route4(
	    xa_inputs.get(0, "mcast_addr").ipv4(),
	    xa_inputs.get(1, "input_ip").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_mcast_route4(
	    xa_inputs.get(0, "mcast_addr").ipv4(),
	    xa_inputs.get(1, "input_ip").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_mcast_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_backup_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_backup_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01AddBackupRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_backup_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_backup_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddBackupRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_route4, pxa_outputs);
	async_static_routes_0_1_add_backup_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_backup_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_backup_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_backup_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_backup_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01AddBackupRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_backup_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_backup_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddBackupRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_route6, pxa_outputs);
	async_static_routes_0_1_add_backup_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_backup_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_backup_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_backup_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_backup_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceBackupRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_backup_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_backup_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceBackupRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_route4, pxa_outputs);
	async_static_routes_0_1_replace_backup_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_backup_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_backup_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_backup_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_backup_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceBackupRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_backup_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_backup_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceBackupRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_route6, pxa_outputs);
	async_static_routes_0_1_replace_backup_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_backup_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_backup_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_backup_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_backup_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	StaticRoutes01DeleteBackupRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_backup_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_backup_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteBackupRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_route4, pxa_outputs);
	async_static_routes_0_1_delete_backup_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_backup_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_backup_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_backup_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_backup_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	StaticRoutes01DeleteBackupRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_backup_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_backup_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteBackupRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_route6, pxa_outputs);
	async_static_routes_0_1_delete_backup_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_backup_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_backup_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_interface_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01AddInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_interface_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddInterfaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_interface_route4, pxa_outputs);
	async_static_routes_0_1_add_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_interface_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01AddInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_interface_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddInterfaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_interface_route6, pxa_outputs);
	async_static_routes_0_1_add_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_interface_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_interface_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceInterfaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_interface_route4, pxa_outputs);
	async_static_routes_0_1_replace_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_interface_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_interface_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceInterfaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_interface_route6, pxa_outputs);
	async_static_routes_0_1_replace_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_interface_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	StaticRoutes01DeleteInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_interface_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteInterfaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_interface_route4, pxa_outputs);
	async_static_routes_0_1_delete_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_interface_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	StaticRoutes01DeleteInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_interface_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteInterfaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_interface_route6, pxa_outputs);
	async_static_routes_0_1_delete_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_backup_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_backup_interface_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01AddBackupInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_backup_interface_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_backup_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddBackupInterfaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_interface_route4, pxa_outputs);
	async_static_routes_0_1_add_backup_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_backup_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_backup_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/add_backup_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_add_backup_interface_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01AddBackupInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_add_backup_interface_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_add_backup_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/add_backup_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01AddBackupInterfaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_add_backup_interface_route6, pxa_outputs);
	async_static_routes_0_1_add_backup_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_add_backup_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/add_backup_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_backup_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_backup_interface_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceBackupInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_backup_interface_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_backup_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceBackupInterfaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_interface_route4, pxa_outputs);
	async_static_routes_0_1_replace_backup_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_backup_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_backup_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/replace_backup_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_replace_backup_interface_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	StaticRoutes01ReplaceBackupInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_replace_backup_interface_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_replace_backup_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/replace_backup_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01ReplaceBackupInterfaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_replace_backup_interface_route6, pxa_outputs);
	async_static_routes_0_1_replace_backup_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_replace_backup_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(),
	    xa_inputs.get(6, "metric").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/replace_backup_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_backup_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_backup_interface_route4(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	StaticRoutes01DeleteBackupInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_backup_interface_route4(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_backup_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteBackupInterfaceRoute4RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_interface_route4, pxa_outputs);
	async_static_routes_0_1_delete_backup_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_backup_interface_route4(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv4net(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_backup_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/delete_backup_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_delete_backup_interface_route6(
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	StaticRoutes01DeleteBackupInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_delete_backup_interface_route6(
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_delete_backup_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/delete_backup_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01DeleteBackupInterfaceRoute6RF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_delete_backup_interface_route6, pxa_outputs);
	async_static_routes_0_1_delete_backup_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_delete_backup_interface_route6(
	    xa_inputs.get(0, "unicast").boolean(),
	    xa_inputs.get(1, "multicast").boolean(),
	    xa_inputs.get(2, "network").ipv6net(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "ifname").text(),
	    xa_inputs.get(5, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/delete_backup_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlStaticRoutesTargetBase::callback_static_routes_0_1_enable_log_trace_all
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "static_routes/0.1/enable_log_trace_all", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlStaticRoutesTargetBase::async_static_routes_0_1_enable_log_trace_all(
	const bool&	arg_enable,
	StaticRoutes01EnableLogTraceAllCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = static_routes_0_1_enable_log_trace_all(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlStaticRoutesTargetBase::handle_static_routes_0_1_enable_log_trace_all(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "static_routes/0.1/enable_log_trace_all");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	StaticRoutes01EnableLogTraceAllRF mycb =
	    callback(this, &XrlStaticRoutesTargetBase::callback_static_routes_0_1_enable_log_trace_all, pxa_outputs);
	async_static_routes_0_1_enable_log_trace_all(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = static_routes_0_1_enable_log_trace_all(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "static_routes/0.1/enable_log_trace_all", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlStaticRoutesTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "static_routes", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlStaticRoutesTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
