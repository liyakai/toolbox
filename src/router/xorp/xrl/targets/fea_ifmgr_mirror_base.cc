/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/fea_ifmgr_mirror_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "fea_ifmgr_mirror_base.hh"


const struct XrlFeaIfmgrMirrorTargetBase::handler_table XrlFeaIfmgrMirrorTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_startup },
    { "fea_ifmgr_mirror/0.1/interface_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_add },
    { "fea_ifmgr_mirror/0.1/interface_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_remove },
    { "fea_ifmgr_mirror/0.1/interface_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_enabled },
    { "fea_ifmgr_mirror/0.1/interface_set_discard",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_discard },
    { "fea_ifmgr_mirror/0.1/interface_set_unreachable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_unreachable },
    { "fea_ifmgr_mirror/0.1/interface_set_management",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_management },
    { "fea_ifmgr_mirror/0.1/interface_set_mtu",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mtu },
    { "fea_ifmgr_mirror/0.1/interface_set_mac",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mac },
    { "fea_ifmgr_mirror/0.1/interface_set_pif_index",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_pif_index },
    { "fea_ifmgr_mirror/0.1/interface_set_no_carrier",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_no_carrier },
    { "fea_ifmgr_mirror/0.1/interface_set_baudrate",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_baudrate },
    { "fea_ifmgr_mirror/0.1/interface_set_parent_ifname",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_parent_ifname },
    { "fea_ifmgr_mirror/0.1/interface_set_iface_type",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_iface_type },
    { "fea_ifmgr_mirror/0.1/interface_set_vid",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_vid },
    { "fea_ifmgr_mirror/0.1/vif_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_add },
    { "fea_ifmgr_mirror/0.1/vif_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_remove },
    { "fea_ifmgr_mirror/0.1/vif_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_enabled },
    { "fea_ifmgr_mirror/0.1/vif_set_multicast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_multicast_capable },
    { "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable },
    { "fea_ifmgr_mirror/0.1/vif_set_p2p_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_p2p_capable },
    { "fea_ifmgr_mirror/0.1/vif_set_loopback",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_loopback },
    { "fea_ifmgr_mirror/0.1/vif_set_pim_register",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pim_register },
    { "fea_ifmgr_mirror/0.1/vif_set_pif_index",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pif_index },
    { "fea_ifmgr_mirror/0.1/vif_set_vif_index",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vif_index },
    { "fea_ifmgr_mirror/0.1/ipv4_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_add },
    { "fea_ifmgr_mirror/0.1/ipv4_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_remove },
    { "fea_ifmgr_mirror/0.1/ipv4_set_prefix",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_prefix },
    { "fea_ifmgr_mirror/0.1/ipv4_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_enabled },
    { "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable },
    { "fea_ifmgr_mirror/0.1/ipv4_set_loopback",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_loopback },
    { "fea_ifmgr_mirror/0.1/ipv4_set_broadcast",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_broadcast },
    { "fea_ifmgr_mirror/0.1/ipv4_set_endpoint",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_endpoint },
    { "fea_ifmgr_mirror/0.1/ipv6_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_add },
    { "fea_ifmgr_mirror/0.1/ipv6_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_remove },
    { "fea_ifmgr_mirror/0.1/ipv6_set_prefix",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_prefix },
    { "fea_ifmgr_mirror/0.1/ipv6_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_enabled },
    { "fea_ifmgr_mirror/0.1/ipv6_set_loopback",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_loopback },
    { "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable },
    { "fea_ifmgr_mirror/0.1/ipv6_set_endpoint",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_endpoint },
    { "fea_ifmgr_mirror/0.1/hint_tree_complete",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_tree_complete },
    { "fea_ifmgr_mirror/0.1/hint_updates_made",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_updates_made },
};

const size_t XrlFeaIfmgrMirrorTargetBase::num_handlers = (sizeof(XrlFeaIfmgrMirrorTargetBase::handlers) / sizeof(XrlFeaIfmgrMirrorTargetBase::handlers[0]));


XrlFeaIfmgrMirrorTargetBase::XrlFeaIfmgrMirrorTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlFeaIfmgrMirrorTargetBase::~XrlFeaIfmgrMirrorTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlFeaIfmgrMirrorTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_add
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_add", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_add(
	const string&	arg_ifname,
	FeaIfmgrMirror01InterfaceAddCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_add(
        arg_ifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_add(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_add");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceAddRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_add, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_add(
	    xa_inputs.get(0, "ifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_add(
	    xa_inputs.get(0, "ifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_remove
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_remove", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_remove(
	const string&	arg_ifname,
	FeaIfmgrMirror01InterfaceRemoveCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_remove(
        arg_ifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_remove(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_remove");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceRemoveRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_remove, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_remove(
	    xa_inputs.get(0, "ifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_remove(
	    xa_inputs.get(0, "ifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_enabled
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_enabled(
	const string&	arg_ifname,
	const bool&	arg_enabled,
	FeaIfmgrMirror01InterfaceSetEnabledCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_enabled(
        arg_ifname,
        arg_enabled);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetEnabledRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_enabled, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "enabled").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_discard
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_discard", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_discard(
	const string&	arg_ifname,
	const bool&	arg_discard,
	FeaIfmgrMirror01InterfaceSetDiscardCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_discard(
        arg_ifname,
        arg_discard);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_discard(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_discard");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetDiscardRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_discard, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_discard(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "discard").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_discard(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "discard").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_discard", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_unreachable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_unreachable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_unreachable(
	const string&	arg_ifname,
	const bool&	arg_unreachable,
	FeaIfmgrMirror01InterfaceSetUnreachableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_unreachable(
        arg_ifname,
        arg_unreachable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_unreachable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_unreachable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetUnreachableRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_unreachable, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_unreachable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "unreachable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_unreachable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "unreachable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_unreachable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_management
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_management", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_management(
	const string&	arg_ifname,
	const bool&	arg_management,
	FeaIfmgrMirror01InterfaceSetManagementCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_management(
        arg_ifname,
        arg_management);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_management(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_management");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetManagementRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_management, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_management(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "management").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_management(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "management").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_management", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_mtu
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_mtu", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_mtu(
	const string&	arg_ifname,
	const uint32_t&	arg_mtu,
	FeaIfmgrMirror01InterfaceSetMtuCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_mtu(
        arg_ifname,
        arg_mtu);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mtu(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_mtu");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetMtuRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_mtu, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_mtu(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "mtu").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_mtu(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "mtu").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_mtu", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_mac
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_mac", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_mac(
	const string&	arg_ifname,
	const Mac&	arg_mac,
	FeaIfmgrMirror01InterfaceSetMacCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_mac(
        arg_ifname,
        arg_mac);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mac(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_mac");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetMacRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_mac, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_mac(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "mac").mac(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_mac(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "mac").mac());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_mac", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_pif_index
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_pif_index", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_pif_index(
	const string&	arg_ifname,
	const uint32_t&	arg_pif_index,
	FeaIfmgrMirror01InterfaceSetPifIndexCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_pif_index(
        arg_ifname,
        arg_pif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_pif_index(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_pif_index");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetPifIndexRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_pif_index, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_pif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "pif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_pif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "pif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_pif_index", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_no_carrier
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_no_carrier", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_no_carrier(
	const string&	arg_ifname,
	const bool&	arg_no_carrier,
	FeaIfmgrMirror01InterfaceSetNoCarrierCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_no_carrier(
        arg_ifname,
        arg_no_carrier);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_no_carrier(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_no_carrier");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetNoCarrierRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_no_carrier, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_no_carrier(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "no_carrier").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_no_carrier(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "no_carrier").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_no_carrier", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_baudrate
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_baudrate", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_baudrate(
	const string&	arg_ifname,
	const uint64_t&	arg_baudrate,
	FeaIfmgrMirror01InterfaceSetBaudrateCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_baudrate(
        arg_ifname,
        arg_baudrate);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_baudrate(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_baudrate");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetBaudrateRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_baudrate, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_baudrate(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "baudrate").uint64(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_baudrate(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "baudrate").uint64());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_baudrate", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_parent_ifname
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_parent_ifname", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_parent_ifname(
	const string&	arg_ifname,
	const string&	arg_parent_ifname,
	FeaIfmgrMirror01InterfaceSetParentIfnameCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_parent_ifname(
        arg_ifname,
        arg_parent_ifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_parent_ifname(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_parent_ifname");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetParentIfnameRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_parent_ifname, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_parent_ifname(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "parent_ifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_parent_ifname(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "parent_ifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_parent_ifname", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_iface_type
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_iface_type", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_iface_type(
	const string&	arg_ifname,
	const string&	arg_iface_type,
	FeaIfmgrMirror01InterfaceSetIfaceTypeCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_iface_type(
        arg_ifname,
        arg_iface_type);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_iface_type(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_iface_type");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetIfaceTypeRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_iface_type, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_iface_type(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "iface_type").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_iface_type(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "iface_type").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_iface_type", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_vid
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/interface_set_vid", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_interface_set_vid(
	const string&	arg_ifname,
	const string&	arg_vid,
	FeaIfmgrMirror01InterfaceSetVidCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_vid(
        arg_ifname,
        arg_vid);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_vid(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_vid");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01InterfaceSetVidRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_interface_set_vid, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_interface_set_vid(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vid").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_vid(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vid").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_vid", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_add
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_add", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_add(
	const string&	arg_ifname,
	const string&	arg_vifname,
	FeaIfmgrMirror01VifAddCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_add(
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_add(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_add");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifAddRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_add, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_remove
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_remove", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_remove(
	const string&	arg_ifname,
	const string&	arg_vifname,
	FeaIfmgrMirror01VifRemoveCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_remove(
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_remove(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_remove");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifRemoveRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_remove, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_enabled
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_enabled(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_enabled,
	FeaIfmgrMirror01VifSetEnabledCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_enabled(
        arg_ifname,
        arg_vifname,
        arg_enabled);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetEnabledRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_enabled, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "enabled").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_multicast_capable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_multicast_capable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_multicast_capable(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_capable,
	FeaIfmgrMirror01VifSetMulticastCapableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_multicast_capable(
        arg_ifname,
        arg_vifname,
        arg_capable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_multicast_capable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_multicast_capable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetMulticastCapableRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_multicast_capable, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_multicast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_capable,
	FeaIfmgrMirror01VifSetBroadcastCapableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(
        arg_ifname,
        arg_vifname,
        arg_capable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetBroadcastCapableRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_p2p_capable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_p2p_capable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_p2p_capable(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_capable,
	FeaIfmgrMirror01VifSetP2PCapableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_p2p_capable(
        arg_ifname,
        arg_vifname,
        arg_capable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_p2p_capable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_p2p_capable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetP2PCapableRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_p2p_capable, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_p2p_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_p2p_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_p2p_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_loopback
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_loopback", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_loopback(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_loopback,
	FeaIfmgrMirror01VifSetLoopbackCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_loopback(
        arg_ifname,
        arg_vifname,
        arg_loopback);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_loopback(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_loopback");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetLoopbackRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_loopback, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "loopback").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "loopback").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_loopback", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_pim_register
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_pim_register", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_pim_register(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_pim_register,
	FeaIfmgrMirror01VifSetPimRegisterCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_pim_register(
        arg_ifname,
        arg_vifname,
        arg_pim_register);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pim_register(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_pim_register");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetPimRegisterRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_pim_register, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_pim_register(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "pim_register").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_pim_register(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "pim_register").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_pim_register", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_pif_index
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_pif_index", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_pif_index(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_pif_index,
	FeaIfmgrMirror01VifSetPifIndexCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_pif_index(
        arg_ifname,
        arg_vifname,
        arg_pif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pif_index(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_pif_index");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetPifIndexRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_pif_index, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_pif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "pif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_pif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "pif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_pif_index", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_vif_index
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/vif_set_vif_index", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_vif_set_vif_index(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vif_index,
	FeaIfmgrMirror01VifSetVifIndexCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_vif_index(
        arg_ifname,
        arg_vifname,
        arg_vif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vif_index(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_vif_index");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01VifSetVifIndexRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_vif_set_vif_index, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_vif_set_vif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_vif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_vif_index", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_add
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_add", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_add(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	FeaIfmgrMirror01Ipv4AddCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_add(
        arg_ifname,
        arg_vifname,
        arg_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_add(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_add");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4AddRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_add, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_remove
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_remove", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_remove(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	FeaIfmgrMirror01Ipv4RemoveCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_remove(
        arg_ifname,
        arg_vifname,
        arg_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_remove(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_remove");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4RemoveRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_remove, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_prefix
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_set_prefix", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_set_prefix(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const uint32_t&	arg_prefix_len,
	FeaIfmgrMirror01Ipv4SetPrefixCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_prefix(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_prefix_len);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_prefix(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_prefix");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4SetPrefixRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_prefix, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "prefix_len").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_prefix", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_enabled
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_set_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_set_enabled(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const bool&	arg_enabled,
	FeaIfmgrMirror01Ipv4SetEnabledCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_enabled(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_enabled);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4SetEnabledRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_enabled, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "enabled").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const bool&	arg_capable,
	FeaIfmgrMirror01Ipv4SetMulticastCapableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_capable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4SetMulticastCapableRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "capable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_loopback
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_set_loopback", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_set_loopback(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const bool&	arg_loopback,
	FeaIfmgrMirror01Ipv4SetLoopbackCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_loopback(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_loopback);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_loopback(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_loopback");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4SetLoopbackRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_loopback, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "loopback").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "loopback").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_loopback", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_broadcast
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_set_broadcast", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_set_broadcast(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const IPv4&	arg_broadcast_addr,
	FeaIfmgrMirror01Ipv4SetBroadcastCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_broadcast(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_broadcast_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_broadcast(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_broadcast");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4SetBroadcastRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_broadcast, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_set_broadcast(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "broadcast_addr").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_broadcast(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "broadcast_addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_broadcast", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_endpoint
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv4_set_endpoint", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv4_set_endpoint(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const IPv4&	arg_endpoint_addr,
	FeaIfmgrMirror01Ipv4SetEndpointCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_endpoint(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_endpoint_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_endpoint(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_endpoint");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv4SetEndpointRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv4_set_endpoint, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv4_set_endpoint(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "endpoint_addr").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_endpoint(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "endpoint_addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_endpoint", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_add
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_add", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_add(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	FeaIfmgrMirror01Ipv6AddCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_add(
        arg_ifname,
        arg_vifname,
        arg_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_add(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_add");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6AddRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_add, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_remove
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_remove", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_remove(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	FeaIfmgrMirror01Ipv6RemoveCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_remove(
        arg_ifname,
        arg_vifname,
        arg_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_remove(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_remove");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6RemoveRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_remove, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_prefix
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_set_prefix", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_set_prefix(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_prefix_len,
	FeaIfmgrMirror01Ipv6SetPrefixCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_prefix(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_prefix_len);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_prefix(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_prefix");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6SetPrefixRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_prefix, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "prefix_len").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_prefix", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_enabled
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_set_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_set_enabled(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_enabled,
	FeaIfmgrMirror01Ipv6SetEnabledCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_enabled(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_enabled);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6SetEnabledRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_enabled, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "enabled").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_loopback
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_set_loopback", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_set_loopback(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_loopback,
	FeaIfmgrMirror01Ipv6SetLoopbackCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_loopback(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_loopback);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_loopback(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_loopback");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6SetLoopbackRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_loopback, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "loopback").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "loopback").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_loopback", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_capable,
	FeaIfmgrMirror01Ipv6SetMulticastCapableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_capable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6SetMulticastCapableRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "capable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_endpoint
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/ipv6_set_endpoint", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_ipv6_set_endpoint(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const IPv6&	arg_endpoint_addr,
	FeaIfmgrMirror01Ipv6SetEndpointCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_endpoint(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_endpoint_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_endpoint(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_endpoint");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01Ipv6SetEndpointRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_ipv6_set_endpoint, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_ipv6_set_endpoint(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "endpoint_addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_endpoint(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "endpoint_addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_endpoint", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_hint_tree_complete
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/hint_tree_complete", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_hint_tree_complete(
	FeaIfmgrMirror01HintTreeCompleteCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_hint_tree_complete();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_tree_complete(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/hint_tree_complete");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01HintTreeCompleteRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_hint_tree_complete, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_hint_tree_complete( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_hint_tree_complete();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/hint_tree_complete", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_hint_updates_made
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "fea_ifmgr_mirror/0.1/hint_updates_made", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFeaIfmgrMirrorTargetBase::async_fea_ifmgr_mirror_0_1_hint_updates_made(
	FeaIfmgrMirror01HintUpdatesMadeCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = fea_ifmgr_mirror_0_1_hint_updates_made();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_updates_made(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/hint_updates_made");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FeaIfmgrMirror01HintUpdatesMadeRF mycb =
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::callback_fea_ifmgr_mirror_0_1_hint_updates_made, pxa_outputs);
	async_fea_ifmgr_mirror_0_1_hint_updates_made( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_hint_updates_made();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/hint_updates_made", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlFeaIfmgrMirrorTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "fea_ifmgr_mirror", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlFeaIfmgrMirrorTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
