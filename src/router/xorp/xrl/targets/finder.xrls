/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/finder.xrls
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

/**
 *  Get name of Xrl Target
 */
finder://finder/common/0.1/get_target_name->name:txt

/**
 *  Get version string from Xrl Target
 */
finder://finder/common/0.1/get_version->version:txt

/**
 *  Get status of Xrl Target
 */
finder://finder/common/0.1/get_status->status:u32&reason:txt

/**
 *  Request clean shutdown of Xrl Target
 */
finder://finder/common/0.1/shutdown

/**
 *  Request a startup of Xrl Target
 */
finder://finder/common/0.1/startup

/**
 *  Register client with Finder. Once client has been registered Xrl
 *  registrations may proceed. Once Xrl registrations have have been completed
 *  the client needs to be enabled for the Finder to respond to queries about
 *  the client. Fails if instance_name is already registered, or another
 *  instance of the same class is registered as a singleton. The client must
 *  support the finder_client interface in order to be able to process messages
 *  from the finder.
 */
finder://finder/finder/0.2/register_finder_client?instance_name:txt&class_name:txt&singleton:bool&in_cookie:txt->out_cookie:txt

finder://finder/finder/0.2/unregister_finder_client?instance_name:txt

/**
 *  Enable resolution of Xrls associated with target. Disabling Xrls at present
 *  does not cause clients to flush state associated with target so cached
 *  entries in clients are unaffected by this Xrl. Caller must be client that
 *  registered Xrl.
 */
finder://finder/finder/0.2/set_finder_client_enabled?instance_name:txt&enabled:bool

/**
 *  Get enabled state information associated with finder client.
 */
finder://finder/finder/0.2/finder_client_enabled?instance_name:txt->enabled:bool

/**
 *  Add resolved Xrl into system, fails if xrl is already registered.
 */
finder://finder/finder/0.2/add_xrl?xrl:txt&protocol_name:txt&protocol_args:txt->resolved_xrl_method_name:txt

/**
 *  Remove xrl
 */
finder://finder/finder/0.2/remove_xrl?xrl:txt

/**
 *  Resolve Xrl
 */
finder://finder/finder/0.2/resolve_xrl?xrl:txt->resolutions:list

/**
 *  Get list of registered Xrl targets
 */
finder://finder/finder/0.2/get_xrl_targets->target_names:list

/**
 *  Get list of Xrls registered by target
 */
finder://finder/finder/0.2/get_xrls_registered_by?target_name:txt->xrls:list

/**
 *  Get list of IPv4 hosts that clients should accept IPC requests from.
 */
finder://finder/finder/0.2/get_ipv4_permitted_hosts->ipv4s:list

/**
 *  Get list of IPv4 nets that clients should accept IPC requests from.
 */
finder://finder/finder/0.2/get_ipv4_permitted_nets->ipv4nets:list

/**
 *  Get list of IPv6 hosts that clients should accept IPC requests from.
 */
finder://finder/finder/0.2/get_ipv6_permitted_hosts->ipv6s:list

/**
 *  Get list of IPv6 nets that clients should accept IPC requests from.
 */
finder://finder/finder/0.2/get_ipv6_permitted_nets->ipv6nets:list

/**
 *  Register interest in events relating to a particular class. Following this
 *  call the requester will receive birth event notifications for existing
 *  instances within the named class and will receive birth and deatch event
 *  notifications as instances are created and destroyed subsequently.
 *
 *  @param requester_instance instance name of Xrl Target interested in
 *  receiving event notifications.
 *
 *  @param class_name class of Xrl Targets to generate event notifications for.
 */
finder://finder/finder_event_notifier/0.1/register_class_event_interest?requester_instance:txt&class_name:txt

/**
 *  Deregister interest in events relating to a particular class.
 *
 *  @param requester_instance instance name of Xrl Target interested in
 *  receiving event notifications.
 *
 *  @param class_name class of Xrl Targets to stop event notifications for.
 */
finder://finder/finder_event_notifier/0.1/deregister_class_event_interest?requester_instance:txt&class_name:txt

/**
 *  Register interest in events relating to a particular instance. Following
 *  this call the requester will receive a birth event notification for the
 *  named instance if it exists. When the named instance dies, the requester
 *  will receive a death event notification. This method will fail if the named
 *  instance does not exist.
 *
 *  @param requester_instance instance name of Xrl Target interested in
 *  receiving event notifications.
 *
 *  @param instance_name name of Xrl Target instance to receive event
 *  notifications for.
 */
finder://finder/finder_event_notifier/0.1/register_instance_event_interest?requester_instance:txt&instance_name:txt

/**
 *  Register interest in events relating to a particular instance.
 *
 *  @param requester_instance instance name of Xrl Target interested in
 *  receiving event notifications.
 *
 *  @param instance_name name of Xrl Target instance to stop event
 *  notifications for.
 */
finder://finder/finder_event_notifier/0.1/deregister_instance_event_interest?requester_instance:txt&instance_name:txt

