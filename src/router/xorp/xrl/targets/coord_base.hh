/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/coord_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_COORD_BASE_HH__
#define __XRL_TARGETS_COORD_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlCoordTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlCoordTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlCoordTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlCoordTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "coord/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Command to be executed by the coordinating process.
     *
     *  @param command to be sent to the coordinator.
     */
    virtual XrlCmdError coord_0_1_command(
	// Input values,
	const string&	command) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Coord01CommandRF;

    class Coord01CommandCB {
        Coord01CommandRF cb;

    public:
        operator const Coord01CommandRF& () const { return cb; }
        const Coord01CommandRF& operator ->() const { return cb; }
        Coord01CommandCB(const Coord01CommandRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Coord01CommandRsp :
      public Coord01CommandCB {
        Coord01CommandRsp(const Coord01CommandRF& cb)
          : Coord01CommandCB(cb) { }

    };

    virtual void async_coord_0_1_command
       (
	const string&	command,
	Coord01CommandCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Status, show the state of this peer.
     */
    virtual XrlCmdError coord_0_1_status(
	// Input values,
	const string&	peer,
	// Output values,
	string&	status) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Coord01StatusRF;

    class Coord01StatusCB {
        Coord01StatusRF cb;

    public:
        operator const Coord01StatusRF& () const { return cb; }
        const Coord01StatusRF& operator ->() const { return cb; }
        Coord01StatusCB(const Coord01StatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_status) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status);
        }
    };

    struct Coord01StatusRsp :
      public Coord01StatusCB {
        struct args_str {
            string status;
        };

    private:
        args_str args;

    public:
        Coord01StatusRsp(const Coord01StatusRF& cb)
          : Coord01StatusCB(cb) { }

        void respond() const {
            Coord01StatusCB::
            respond(args.status);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_coord_0_1_status
       (
	const string&	peer,
	Coord01StatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  If there are still any outstanding commands pending will return true.
     *  Can be used to poll the coordinating process to verify that the
     *  previous command has completed.
     */
    virtual XrlCmdError coord_0_1_pending(
	// Output values,
	bool&	pending) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const bool*>::RefPtr
    Coord01PendingRF;

    class Coord01PendingCB {
        Coord01PendingRF cb;

    public:
        operator const Coord01PendingRF& () const { return cb; }
        const Coord01PendingRF& operator ->() const { return cb; }
        Coord01PendingCB(const Coord01PendingRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const bool& arg_pending) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_pending);
        }
    };

    struct Coord01PendingRsp :
      public Coord01PendingCB {
        struct args_str {
            bool pending;
        };

    private:
        args_str args;

    public:
        Coord01PendingRsp(const Coord01PendingRF& cb)
          : Coord01PendingCB(cb) { }

        void respond() const {
            Coord01PendingCB::
            respond(args.pending);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_coord_0_1_pending
       (
	Coord01PendingCB);
#endif

    virtual XrlCmdError datain_0_1_receive(
	// Input values,
	const string&	peer,
	const uint32_t&	genid,
	const bool&	status,
	const uint32_t&	secs,
	const uint32_t&	micro,
	const vector<uint8_t>&	data) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Datain01ReceiveRF;

    class Datain01ReceiveCB {
        Datain01ReceiveRF cb;

    public:
        operator const Datain01ReceiveRF& () const { return cb; }
        const Datain01ReceiveRF& operator ->() const { return cb; }
        Datain01ReceiveCB(const Datain01ReceiveRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Datain01ReceiveRsp :
      public Datain01ReceiveCB {
        Datain01ReceiveRsp(const Datain01ReceiveRF& cb)
          : Datain01ReceiveCB(cb) { }

    };

    virtual void async_datain_0_1_receive
       (
	const string&	peer,
	const uint32_t&	genid,
	const bool&	status,
	const uint32_t&	secs,
	const uint32_t&	micro,
	const vector<uint8_t>&	data,
	Datain01ReceiveCB);
#endif

    virtual XrlCmdError datain_0_1_error(
	// Input values,
	const string&	peer,
	const uint32_t&	genid,
	const string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Datain01ErrorRF;

    class Datain01ErrorCB {
        Datain01ErrorRF cb;

    public:
        operator const Datain01ErrorRF& () const { return cb; }
        const Datain01ErrorRF& operator ->() const { return cb; }
        Datain01ErrorCB(const Datain01ErrorRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Datain01ErrorRsp :
      public Datain01ErrorCB {
        Datain01ErrorRsp(const Datain01ErrorRF& cb)
          : Datain01ErrorCB(cb) { }

    };

    virtual void async_datain_0_1_error
       (
	const string&	peer,
	const uint32_t&	genid,
	const string&	reason,
	Datain01ErrorCB);
#endif

    virtual XrlCmdError datain_0_1_closed(
	// Input values,
	const string&	peer,
	const uint32_t&	genid) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Datain01ClosedRF;

    class Datain01ClosedCB {
        Datain01ClosedRF cb;

    public:
        operator const Datain01ClosedRF& () const { return cb; }
        const Datain01ClosedRF& operator ->() const { return cb; }
        Datain01ClosedCB(const Datain01ClosedRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Datain01ClosedRsp :
      public Datain01ClosedCB {
        Datain01ClosedRsp(const Datain01ClosedRF& cb)
          : Datain01ClosedCB(cb) { }

    };

    virtual void async_datain_0_1_closed
       (
	const string&	peer,
	const uint32_t&	genid,
	Datain01ClosedCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_coord_0_1_command(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_coord_0_1_command
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_coord_0_1_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_coord_0_1_status
       (const XrlCmdError &e,
	const string* arg_status,
        XrlRespCallback);
#endif

    XrlCmdRT handle_coord_0_1_pending(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_coord_0_1_pending
       (const XrlCmdError &e,
	const bool* arg_pending,
        XrlRespCallback);
#endif

    XrlCmdRT handle_datain_0_1_receive(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_datain_0_1_receive
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_datain_0_1_error(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_datain_0_1_error
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_datain_0_1_closed(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_datain_0_1_closed
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlCoordTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_COORD_BASE_HH__
