/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/vrrp_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_VRRP_BASE_HH__
#define __XRL_TARGETS_VRRP_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlVrrpTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlVrrpTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlVrrpTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlVrrpTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "vrrp/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create a VRRP instance.
     *
     *  @param ifname the interface name.
     *
     *  @param vifname the vif name.
     *
     *  @param vrid the VRRP router ID.
     */
    virtual XrlCmdError vrrp_0_1_add_vrid(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01AddVridRF;

    class Vrrp01AddVridCB {
        Vrrp01AddVridRF cb;

    public:
        operator const Vrrp01AddVridRF& () const { return cb; }
        const Vrrp01AddVridRF& operator ->() const { return cb; }
        Vrrp01AddVridCB(const Vrrp01AddVridRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01AddVridRsp :
      public Vrrp01AddVridCB {
        Vrrp01AddVridRsp(const Vrrp01AddVridRF& cb)
          : Vrrp01AddVridCB(cb) { }

    };

    virtual void async_vrrp_0_1_add_vrid
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	Vrrp01AddVridCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Remove a VRRP instance.
     *
     *  @param ifname the interface name.
     *
     *  @param vifname the vif name.
     *
     *  @param vrid the VRRP router ID.
     */
    virtual XrlCmdError vrrp_0_1_delete_vrid(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01DeleteVridRF;

    class Vrrp01DeleteVridCB {
        Vrrp01DeleteVridRF cb;

    public:
        operator const Vrrp01DeleteVridRF& () const { return cb; }
        const Vrrp01DeleteVridRF& operator ->() const { return cb; }
        Vrrp01DeleteVridCB(const Vrrp01DeleteVridRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01DeleteVridRsp :
      public Vrrp01DeleteVridCB {
        Vrrp01DeleteVridRsp(const Vrrp01DeleteVridRF& cb)
          : Vrrp01DeleteVridCB(cb) { }

    };

    virtual void async_vrrp_0_1_delete_vrid
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	Vrrp01DeleteVridCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the router's priority.
     *
     *  @param ifname the interface on which VRRP is running.
     *
     *  @param vifname the vif on which VRRP is running.
     *
     *  @param vrid the VRRP router ID.
     *
     *  @param priority the new priority value.
     */
    virtual XrlCmdError vrrp_0_1_set_priority(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const uint32_t&	priority) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01SetPriorityRF;

    class Vrrp01SetPriorityCB {
        Vrrp01SetPriorityRF cb;

    public:
        operator const Vrrp01SetPriorityRF& () const { return cb; }
        const Vrrp01SetPriorityRF& operator ->() const { return cb; }
        Vrrp01SetPriorityCB(const Vrrp01SetPriorityRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01SetPriorityRsp :
      public Vrrp01SetPriorityCB {
        Vrrp01SetPriorityRsp(const Vrrp01SetPriorityRF& cb)
          : Vrrp01SetPriorityCB(cb) { }

    };

    virtual void async_vrrp_0_1_set_priority
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const uint32_t&	priority,
	Vrrp01SetPriorityCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the advertisement interval.
     *
     *  @param ifname the interface on which VRRP is running.
     *
     *  @param vifname the vif on which VRRP is running.
     *
     *  @param vrid the VRRP router ID.
     *
     *  @param interval the new advertisement interval.
     */
    virtual XrlCmdError vrrp_0_1_set_interval(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const uint32_t&	interval) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01SetIntervalRF;

    class Vrrp01SetIntervalCB {
        Vrrp01SetIntervalRF cb;

    public:
        operator const Vrrp01SetIntervalRF& () const { return cb; }
        const Vrrp01SetIntervalRF& operator ->() const { return cb; }
        Vrrp01SetIntervalCB(const Vrrp01SetIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01SetIntervalRsp :
      public Vrrp01SetIntervalCB {
        Vrrp01SetIntervalRsp(const Vrrp01SetIntervalRF& cb)
          : Vrrp01SetIntervalCB(cb) { }

    };

    virtual void async_vrrp_0_1_set_interval
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const uint32_t&	interval,
	Vrrp01SetIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set whether a high priority backup router should preempt a low priority
     *  router that is acting as a master.
     *
     *  @param ifname the interface on which VRRP is running.
     *
     *  @param vifname the vif on which VRRP is running.
     *
     *  @param vrid the VRRP router ID.
     *
     *  @param preempt true if preemption should occur.
     */
    virtual XrlCmdError vrrp_0_1_set_preempt(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const bool&	preempt) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01SetPreemptRF;

    class Vrrp01SetPreemptCB {
        Vrrp01SetPreemptRF cb;

    public:
        operator const Vrrp01SetPreemptRF& () const { return cb; }
        const Vrrp01SetPreemptRF& operator ->() const { return cb; }
        Vrrp01SetPreemptCB(const Vrrp01SetPreemptRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01SetPreemptRsp :
      public Vrrp01SetPreemptCB {
        Vrrp01SetPreemptRsp(const Vrrp01SetPreemptRF& cb)
          : Vrrp01SetPreemptCB(cb) { }

    };

    virtual void async_vrrp_0_1_set_preempt
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const bool&	preempt,
	Vrrp01SetPreemptCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Start or stop a VRRP instance.
     *
     *  @param ifname the interface on which VRRP is running.
     *
     *  @param vifname the vif on which VRRP is running.
     *
     *  @param vrid the VRRP router ID.
     *
     *  @param disable if true, stop VRRP. Start it otherwise.
     */
    virtual XrlCmdError vrrp_0_1_set_disable(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const bool&	disable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01SetDisableRF;

    class Vrrp01SetDisableCB {
        Vrrp01SetDisableRF cb;

    public:
        operator const Vrrp01SetDisableRF& () const { return cb; }
        const Vrrp01SetDisableRF& operator ->() const { return cb; }
        Vrrp01SetDisableCB(const Vrrp01SetDisableRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01SetDisableRsp :
      public Vrrp01SetDisableCB {
        Vrrp01SetDisableRsp(const Vrrp01SetDisableRF& cb)
          : Vrrp01SetDisableCB(cb) { }

    };

    virtual void async_vrrp_0_1_set_disable
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const bool&	disable,
	Vrrp01SetDisableCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add an IP to the virtual router.
     *
     *  @param ifname the interface on which VRRP is running.
     *
     *  @param vifname the vif on which VRRP is running.
     *
     *  @param vrid the VRRP router ID.
     *
     *  @param ip the IP address to add.
     */
    virtual XrlCmdError vrrp_0_1_add_ip(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const IPv4&	ip) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01AddIpRF;

    class Vrrp01AddIpCB {
        Vrrp01AddIpRF cb;

    public:
        operator const Vrrp01AddIpRF& () const { return cb; }
        const Vrrp01AddIpRF& operator ->() const { return cb; }
        Vrrp01AddIpCB(const Vrrp01AddIpRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01AddIpRsp :
      public Vrrp01AddIpCB {
        Vrrp01AddIpRsp(const Vrrp01AddIpRF& cb)
          : Vrrp01AddIpCB(cb) { }

    };

    virtual void async_vrrp_0_1_add_ip
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const IPv4&	ip,
	Vrrp01AddIpCB);
#endif

    virtual XrlCmdError vrrp_0_1_set_prefix(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const IPv4&	ip,
	const uint32_t&	prefix_len) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01SetPrefixRF;

    class Vrrp01SetPrefixCB {
        Vrrp01SetPrefixRF cb;

    public:
        operator const Vrrp01SetPrefixRF& () const { return cb; }
        const Vrrp01SetPrefixRF& operator ->() const { return cb; }
        Vrrp01SetPrefixCB(const Vrrp01SetPrefixRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01SetPrefixRsp :
      public Vrrp01SetPrefixCB {
        Vrrp01SetPrefixRsp(const Vrrp01SetPrefixRF& cb)
          : Vrrp01SetPrefixCB(cb) { }

    };

    virtual void async_vrrp_0_1_set_prefix
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const IPv4&	ip,
	const uint32_t&	prefix_len,
	Vrrp01SetPrefixCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Remove an IP from the virtual router.
     *
     *  @param ifname the interface on which VRRP is running.
     *
     *  @param vifname the vif on which VRRP is running.
     *
     *  @param vrid the VRRP router ID.
     *
     *  @param ip the IP address to remove.
     */
    virtual XrlCmdError vrrp_0_1_delete_ip(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const IPv4&	ip) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Vrrp01DeleteIpRF;

    class Vrrp01DeleteIpCB {
        Vrrp01DeleteIpRF cb;

    public:
        operator const Vrrp01DeleteIpRF& () const { return cb; }
        const Vrrp01DeleteIpRF& operator ->() const { return cb; }
        Vrrp01DeleteIpCB(const Vrrp01DeleteIpRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Vrrp01DeleteIpRsp :
      public Vrrp01DeleteIpCB {
        Vrrp01DeleteIpRsp(const Vrrp01DeleteIpRF& cb)
          : Vrrp01DeleteIpCB(cb) { }

    };

    virtual void async_vrrp_0_1_delete_ip
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	const IPv4&	ip,
	Vrrp01DeleteIpCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the physical interfaces on which VRRP is running.
     *
     *  @param ifs a list of interface names (strings).
     */
    virtual XrlCmdError vrrp_0_1_get_ifs(
	// Output values,
	XrlAtomList&	ifs) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const XrlAtomList*>::RefPtr
    Vrrp01GetIfsRF;

    class Vrrp01GetIfsCB {
        Vrrp01GetIfsRF cb;

    public:
        operator const Vrrp01GetIfsRF& () const { return cb; }
        const Vrrp01GetIfsRF& operator ->() const { return cb; }
        Vrrp01GetIfsCB(const Vrrp01GetIfsRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const XrlAtomList& arg_ifs) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_ifs);
        }
    };

    struct Vrrp01GetIfsRsp :
      public Vrrp01GetIfsCB {
        struct args_str {
            XrlAtomList ifs;
        };

    private:
        args_str args;

    public:
        Vrrp01GetIfsRsp(const Vrrp01GetIfsRF& cb)
          : Vrrp01GetIfsCB(cb) { }

        void respond() const {
            Vrrp01GetIfsCB::
            respond(args.ifs);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_vrrp_0_1_get_ifs
       (
	Vrrp01GetIfsCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  For a given physical interface, get the virtual interfaces on which
     *  VRRP is running.
     *
     *  @param ifname the physical interface name.
     *
     *  @param vifs a list of virtual interface names (strings).
     */
    virtual XrlCmdError vrrp_0_1_get_vifs(
	// Input values,
	const string&	ifname,
	// Output values,
	XrlAtomList&	vifs) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const XrlAtomList*>::RefPtr
    Vrrp01GetVifsRF;

    class Vrrp01GetVifsCB {
        Vrrp01GetVifsRF cb;

    public:
        operator const Vrrp01GetVifsRF& () const { return cb; }
        const Vrrp01GetVifsRF& operator ->() const { return cb; }
        Vrrp01GetVifsCB(const Vrrp01GetVifsRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const XrlAtomList& arg_vifs) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_vifs);
        }
    };

    struct Vrrp01GetVifsRsp :
      public Vrrp01GetVifsCB {
        struct args_str {
            XrlAtomList vifs;
        };

    private:
        args_str args;

    public:
        Vrrp01GetVifsRsp(const Vrrp01GetVifsRF& cb)
          : Vrrp01GetVifsCB(cb) { }

        void respond() const {
            Vrrp01GetVifsCB::
            respond(args.vifs);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_vrrp_0_1_get_vifs
       (
	const string&	ifname,
	Vrrp01GetVifsCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the virtual router IDs of all the VRRP instances running on a
     *  network interface.
     *
     *  @param ifname the physical interface name.
     *
     *  @param vifname the logical interface name.
     *
     *  @param vrids a list of VRRP router IDs (integers).
     */
    virtual XrlCmdError vrrp_0_1_get_vrids(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	// Output values,
	XrlAtomList&	vrids) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const XrlAtomList*>::RefPtr
    Vrrp01GetVridsRF;

    class Vrrp01GetVridsCB {
        Vrrp01GetVridsRF cb;

    public:
        operator const Vrrp01GetVridsRF& () const { return cb; }
        const Vrrp01GetVridsRF& operator ->() const { return cb; }
        Vrrp01GetVridsCB(const Vrrp01GetVridsRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const XrlAtomList& arg_vrids) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_vrids);
        }
    };

    struct Vrrp01GetVridsRsp :
      public Vrrp01GetVridsCB {
        struct args_str {
            XrlAtomList vrids;
        };

    private:
        args_str args;

    public:
        Vrrp01GetVridsRsp(const Vrrp01GetVridsRF& cb)
          : Vrrp01GetVridsCB(cb) { }

        void respond() const {
            Vrrp01GetVridsCB::
            respond(args.vrids);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_vrrp_0_1_get_vrids
       (
	const string&	ifname,
	const string&	vifname,
	Vrrp01GetVridsCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get state information from a particular VRRP instance.
     *
     *  @param ifname the interface on which the VRRP instance is running.
     *
     *  @param vifname the vif on which the instance is running.
     *
     *  @param vrid the virtual router ID of the VRRP instance.
     *
     *  @param state the state of the router (initialize, master, backup).
     *
     *  @param master the IP address of the master. Only valid when running.
     */
    virtual XrlCmdError vrrp_0_1_get_vrid_info(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	// Output values,
	string&	state,
	IPv4&	master) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const string*,
	const IPv4*>::RefPtr
    Vrrp01GetVridInfoRF;

    class Vrrp01GetVridInfoCB {
        Vrrp01GetVridInfoRF cb;

    public:
        operator const Vrrp01GetVridInfoRF& () const { return cb; }
        const Vrrp01GetVridInfoRF& operator ->() const { return cb; }
        Vrrp01GetVridInfoCB(const Vrrp01GetVridInfoRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const string& arg_state,
                     const IPv4& arg_master) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_state,
                         &arg_master);
        }
    };

    struct Vrrp01GetVridInfoRsp :
      public Vrrp01GetVridInfoCB {
        struct args_str {
            string state;
            IPv4 master;
        };

    private:
        args_str args;

    public:
        Vrrp01GetVridInfoRsp(const Vrrp01GetVridInfoRF& cb)
          : Vrrp01GetVridInfoCB(cb) { }

        void respond() const {
            Vrrp01GetVridInfoCB::
            respond(args.state,
                        args.master);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_vrrp_0_1_get_vrid_info
       (
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	vrid,
	Vrrp01GetVridInfoCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Receive an IPv4 packet from a raw socket.
     *
     *  @param if_name the interface name the packet arrived on.
     *
     *  @param vif_name the vif name the packet arrived on.
     *
     *  @param src_address the IP source address.
     *
     *  @param dst_address the IP destination address.
     *
     *  @param ip_protocol the IP protocol number.
     *
     *  @param ip_ttl the IP TTL (hop-limit). If it has a negative value, then
     *  the received value is unknown.
     *
     *  @param ip_tos the Type of Service (Diffserv/ECN bits for IPv4). If it
     *  has a negative value, then the received value is unknown.
     *
     *  @param ip_router_alert if true, the IP Router Alert option was included
     *  in the IP packet.
     *
     *  @param ip_internet_control if true, then this is IP control traffic.
     *
     *  @param payload the payload, everything after the IP header and options.
     */
    virtual XrlCmdError raw_packet4_client_0_1_recv(
	// Input values,
	const string&	if_name,
	const string&	vif_name,
	const IPv4&	src_address,
	const IPv4&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const vector<uint8_t>&	payload) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    RawPacket4Client01RecvRF;

    class RawPacket4Client01RecvCB {
        RawPacket4Client01RecvRF cb;

    public:
        operator const RawPacket4Client01RecvRF& () const { return cb; }
        const RawPacket4Client01RecvRF& operator ->() const { return cb; }
        RawPacket4Client01RecvCB(const RawPacket4Client01RecvRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct RawPacket4Client01RecvRsp :
      public RawPacket4Client01RecvCB {
        RawPacket4Client01RecvRsp(const RawPacket4Client01RecvRF& cb)
          : RawPacket4Client01RecvCB(cb) { }

    };

    virtual void async_raw_packet4_client_0_1_recv
       (
	const string&	if_name,
	const string&	vif_name,
	const IPv4&	src_address,
	const IPv4&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const vector<uint8_t>&	payload,
	RawPacket4Client01RecvCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Receive a raw link-level packet on an interface.
     *
     *  @param if_name the interface name the packet arrived on.
     *
     *  @param vif_name the vif name the packet arrived on.
     *
     *  @param src_address the MAC source address.
     *
     *  @param dst_address the MAC destination address.
     *
     *  @param ether_type the EtherType protocol number or the Destination SAP.
     *  It must be between 1536 and 65535 to specify the EtherType, or between
     *  1 and 255 to specify the Destination SAP for IEEE 802.2 LLC frames.
     *
     *  @param payload the payload, everything after the MAC header.
     */
    virtual XrlCmdError raw_link_client_0_1_recv(
	// Input values,
	const string&	if_name,
	const string&	vif_name,
	const Mac&	src_address,
	const Mac&	dst_address,
	const uint32_t&	ether_type,
	const vector<uint8_t>&	payload) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    RawLinkClient01RecvRF;

    class RawLinkClient01RecvCB {
        RawLinkClient01RecvRF cb;

    public:
        operator const RawLinkClient01RecvRF& () const { return cb; }
        const RawLinkClient01RecvRF& operator ->() const { return cb; }
        RawLinkClient01RecvCB(const RawLinkClient01RecvRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct RawLinkClient01RecvRsp :
      public RawLinkClient01RecvCB {
        RawLinkClient01RecvRsp(const RawLinkClient01RecvRF& cb)
          : RawLinkClient01RecvCB(cb) { }

    };

    virtual void async_raw_link_client_0_1_recv
       (
	const string&	if_name,
	const string&	vif_name,
	const Mac&	src_address,
	const Mac&	dst_address,
	const uint32_t&	ether_type,
	const vector<uint8_t>&	payload,
	RawLinkClient01RecvCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_add_vrid(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_add_vrid
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_delete_vrid(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_delete_vrid
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_set_priority(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_set_priority
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_set_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_set_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_set_preempt(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_set_preempt
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_set_disable(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_set_disable
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_add_ip(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_add_ip
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_set_prefix(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_set_prefix
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_delete_ip(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_delete_ip
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_get_ifs(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_get_ifs
       (const XrlCmdError &e,
	const XrlAtomList* arg_ifs,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_get_vifs(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_get_vifs
       (const XrlCmdError &e,
	const XrlAtomList* arg_vifs,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_get_vrids(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_get_vrids
       (const XrlCmdError &e,
	const XrlAtomList* arg_vrids,
        XrlRespCallback);
#endif

    XrlCmdRT handle_vrrp_0_1_get_vrid_info(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_vrrp_0_1_get_vrid_info
       (const XrlCmdError &e,
	const string* arg_state,
	const IPv4* arg_master,
        XrlRespCallback);
#endif

    XrlCmdRT handle_raw_packet4_client_0_1_recv(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_raw_packet4_client_0_1_recv
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_raw_link_client_0_1_recv(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_raw_link_client_0_1_recv
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlVrrpTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_VRRP_BASE_HH__
