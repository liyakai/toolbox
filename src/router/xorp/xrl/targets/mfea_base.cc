/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/mfea_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "mfea_base.hh"


const struct XrlMfeaTargetBase::handler_table XrlMfeaTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlMfeaTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlMfeaTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlMfeaTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlMfeaTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlMfeaTargetBase::handle_common_0_1_startup },
    { "cli_processor/0.1/process_command",
      &XrlMfeaTargetBase::handle_cli_processor_0_1_process_command },
    { "ifmgr_replicator/0.1/register_ifmgr_mirror",
      &XrlMfeaTargetBase::handle_ifmgr_replicator_0_1_register_ifmgr_mirror },
    { "ifmgr_replicator/0.1/unregister_ifmgr_mirror",
      &XrlMfeaTargetBase::handle_ifmgr_replicator_0_1_unregister_ifmgr_mirror },
    { "finder_event_observer/0.1/xrl_target_birth",
      &XrlMfeaTargetBase::handle_finder_event_observer_0_1_xrl_target_birth },
    { "finder_event_observer/0.1/xrl_target_death",
      &XrlMfeaTargetBase::handle_finder_event_observer_0_1_xrl_target_death },
    { "mfea/0.1/have_multicast_routing4",
      &XrlMfeaTargetBase::handle_mfea_0_1_have_multicast_routing4 },
    { "mfea/0.1/register_protocol4",
      &XrlMfeaTargetBase::handle_mfea_0_1_register_protocol4 },
    { "mfea/0.1/unregister_protocol4",
      &XrlMfeaTargetBase::handle_mfea_0_1_unregister_protocol4 },
    { "mfea/0.1/add_mfc4",
      &XrlMfeaTargetBase::handle_mfea_0_1_add_mfc4 },
    { "mfea/0.1/delete_mfc4",
      &XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc4 },
    { "mfea/0.1/add_mfc4_str",
      &XrlMfeaTargetBase::handle_mfea_0_1_add_mfc4_str },
    { "mfea/0.1/add_dataflow_monitor4",
      &XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor4 },
    { "mfea/0.1/delete_dataflow_monitor4",
      &XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor4 },
    { "mfea/0.1/delete_all_dataflow_monitor4",
      &XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor4 },
    { "mfea/0.1/enable_vif",
      &XrlMfeaTargetBase::handle_mfea_0_1_enable_vif },
    { "mfea/0.1/start_vif",
      &XrlMfeaTargetBase::handle_mfea_0_1_start_vif },
    { "mfea/0.1/stop_vif",
      &XrlMfeaTargetBase::handle_mfea_0_1_stop_vif },
    { "mfea/0.1/enable_all_vifs",
      &XrlMfeaTargetBase::handle_mfea_0_1_enable_all_vifs },
    { "mfea/0.1/start_all_vifs",
      &XrlMfeaTargetBase::handle_mfea_0_1_start_all_vifs },
    { "mfea/0.1/stop_all_vifs",
      &XrlMfeaTargetBase::handle_mfea_0_1_stop_all_vifs },
    { "mfea/0.1/enable_mfea",
      &XrlMfeaTargetBase::handle_mfea_0_1_enable_mfea },
    { "mfea/0.1/start_mfea",
      &XrlMfeaTargetBase::handle_mfea_0_1_start_mfea },
    { "mfea/0.1/stop_mfea",
      &XrlMfeaTargetBase::handle_mfea_0_1_stop_mfea },
    { "mfea/0.1/enable_cli",
      &XrlMfeaTargetBase::handle_mfea_0_1_enable_cli },
    { "mfea/0.1/start_cli",
      &XrlMfeaTargetBase::handle_mfea_0_1_start_cli },
    { "mfea/0.1/stop_cli",
      &XrlMfeaTargetBase::handle_mfea_0_1_stop_cli },
    { "mfea/0.1/log_trace_all",
      &XrlMfeaTargetBase::handle_mfea_0_1_log_trace_all },
    { "mfea/0.1/have_multicast_routing6",
      &XrlMfeaTargetBase::handle_mfea_0_1_have_multicast_routing6 },
    { "mfea/0.1/register_protocol6",
      &XrlMfeaTargetBase::handle_mfea_0_1_register_protocol6 },
    { "mfea/0.1/unregister_protocol6",
      &XrlMfeaTargetBase::handle_mfea_0_1_unregister_protocol6 },
    { "mfea/0.1/add_mfc6",
      &XrlMfeaTargetBase::handle_mfea_0_1_add_mfc6 },
    { "mfea/0.1/delete_mfc6",
      &XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc6 },
    { "mfea/0.1/add_dataflow_monitor6",
      &XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor6 },
    { "mfea/0.1/delete_dataflow_monitor6",
      &XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor6 },
    { "mfea/0.1/delete_all_dataflow_monitor6",
      &XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor6 },
};

const size_t XrlMfeaTargetBase::num_handlers = (sizeof(XrlMfeaTargetBase::handlers) / sizeof(XrlMfeaTargetBase::handlers[0]));


XrlMfeaTargetBase::XrlMfeaTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlMfeaTargetBase::~XrlMfeaTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlMfeaTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_cli_processor_0_1_process_command
    (const XrlCmdError &e,
     const string* rarg_ret_processor_name,
     const string* rarg_ret_cli_term_name,
     const uint32_t* rarg_ret_cli_session_id,
     const string* rarg_ret_command_output,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_processor/0.1/process_command", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ret_processor_name", *rarg_ret_processor_name);
	    out.add("ret_cli_term_name", *rarg_ret_cli_term_name);
	    out.add("ret_cli_session_id", *rarg_ret_cli_session_id);
	    out.add("ret_command_output", *rarg_ret_command_output);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_cli_processor_0_1_process_command(
	const string&	arg_processor_name,
	const string&	arg_cli_term_name,
	const uint32_t&	arg_cli_session_id,
	const string&	arg_command_name,
	const string&	arg_command_args,
	CliProcessor01ProcessCommandCB c_b)
{

    /* Return value declarations */
    string rarg_ret_processor_name;
    string rarg_ret_cli_term_name;
    uint32_t rarg_ret_cli_session_id;
    string rarg_ret_command_output;
    XrlCmdError e = cli_processor_0_1_process_command(
        arg_processor_name,
        arg_cli_term_name,
        arg_cli_session_id,
        arg_command_name,
        arg_command_args,
        rarg_ret_processor_name,
        rarg_ret_cli_term_name,
        rarg_ret_cli_session_id,
        rarg_ret_command_output);
    return c_b->dispatch(e,
        &rarg_ret_processor_name,
        &rarg_ret_cli_term_name,
        &rarg_ret_cli_session_id,
        &rarg_ret_command_output);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_cli_processor_0_1_process_command(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "cli_processor/0.1/process_command");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliProcessor01ProcessCommandRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_cli_processor_0_1_process_command, pxa_outputs);
	async_cli_processor_0_1_process_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "cli_term_name").text(),
	    xa_inputs.get(2, "cli_session_id").uint32(),
	    xa_inputs.get(3, "command_name").text(),
	    xa_inputs.get(4, "command_args").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_ret_processor_name;
    string r_ret_cli_term_name;
    uint32_t r_ret_cli_session_id;
    string r_ret_command_output;
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "cli_term_name").text(),
	    xa_inputs.get(2, "cli_session_id").uint32(),
	    xa_inputs.get(3, "command_name").text(),
	    xa_inputs.get(4, "command_args").text(),
	    r_ret_processor_name,
	    r_ret_cli_term_name,
	    r_ret_cli_session_id,
	    r_ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_processor/0.1/process_command", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ret_processor_name", r_ret_processor_name);
	pxa_outputs->add("ret_cli_term_name", r_ret_cli_term_name);
	pxa_outputs->add("ret_cli_session_id", r_ret_cli_session_id);
	pxa_outputs->add("ret_command_output", r_ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_ifmgr_replicator_0_1_register_ifmgr_mirror
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ifmgr_replicator/0.1/register_ifmgr_mirror", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_ifmgr_replicator_0_1_register_ifmgr_mirror(
	const string&	arg_clientname,
	IfmgrReplicator01RegisterIfmgrMirrorCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ifmgr_replicator_0_1_register_ifmgr_mirror(
        arg_clientname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_ifmgr_replicator_0_1_register_ifmgr_mirror(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ifmgr_replicator/0.1/register_ifmgr_mirror");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	IfmgrReplicator01RegisterIfmgrMirrorRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_ifmgr_replicator_0_1_register_ifmgr_mirror, pxa_outputs);
	async_ifmgr_replicator_0_1_register_ifmgr_mirror(
	    xa_inputs.get(0, "clientname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_replicator_0_1_register_ifmgr_mirror(
	    xa_inputs.get(0, "clientname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ifmgr_replicator/0.1/register_ifmgr_mirror", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_ifmgr_replicator_0_1_unregister_ifmgr_mirror
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ifmgr_replicator/0.1/unregister_ifmgr_mirror", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_ifmgr_replicator_0_1_unregister_ifmgr_mirror(
	const string&	arg_clientname,
	IfmgrReplicator01UnregisterIfmgrMirrorCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ifmgr_replicator_0_1_unregister_ifmgr_mirror(
        arg_clientname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_ifmgr_replicator_0_1_unregister_ifmgr_mirror(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ifmgr_replicator/0.1/unregister_ifmgr_mirror");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	IfmgrReplicator01UnregisterIfmgrMirrorRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_ifmgr_replicator_0_1_unregister_ifmgr_mirror, pxa_outputs);
	async_ifmgr_replicator_0_1_unregister_ifmgr_mirror(
	    xa_inputs.get(0, "clientname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_replicator_0_1_unregister_ifmgr_mirror(
	    xa_inputs.get(0, "clientname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ifmgr_replicator/0.1/unregister_ifmgr_mirror", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_finder_event_observer_0_1_xrl_target_birth
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_finder_event_observer_0_1_xrl_target_birth(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetBirthCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_birth");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetBirthRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_finder_event_observer_0_1_xrl_target_birth, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_finder_event_observer_0_1_xrl_target_death
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_finder_event_observer_0_1_xrl_target_death(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetDeathCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_death");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetDeathRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_finder_event_observer_0_1_xrl_target_death, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_have_multicast_routing4
    (const XrlCmdError &e,
     const bool* rarg_result,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/have_multicast_routing4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("result", *rarg_result);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_have_multicast_routing4(
	Mfea01HaveMulticastRouting4CB c_b)
{

    /* Return value declarations */
    bool rarg_result;
    XrlCmdError e = mfea_0_1_have_multicast_routing4(
        rarg_result);
    return c_b->dispatch(e,
        &rarg_result);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_have_multicast_routing4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/have_multicast_routing4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01HaveMulticastRouting4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_have_multicast_routing4, pxa_outputs);
	async_mfea_0_1_have_multicast_routing4( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_result;
    try {
	XrlCmdError e = mfea_0_1_have_multicast_routing4(
	    r_result);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/have_multicast_routing4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("result", r_result);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_register_protocol4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/register_protocol4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_register_protocol4(
	const string&	arg_xrl_sender_name,
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const uint32_t&	arg_ip_protocol,
	Mfea01RegisterProtocol4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_register_protocol4(
        arg_xrl_sender_name,
        arg_if_name,
        arg_vif_name,
        arg_ip_protocol);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_register_protocol4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/register_protocol4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01RegisterProtocol4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_register_protocol4, pxa_outputs);
	async_mfea_0_1_register_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "ip_protocol").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_register_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "ip_protocol").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/register_protocol4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_unregister_protocol4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/unregister_protocol4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_unregister_protocol4(
	const string&	arg_xrl_sender_name,
	const string&	arg_if_name,
	const string&	arg_vif_name,
	Mfea01UnregisterProtocol4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_unregister_protocol4(
        arg_xrl_sender_name,
        arg_if_name,
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_unregister_protocol4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/unregister_protocol4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01UnregisterProtocol4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_unregister_protocol4, pxa_outputs);
	async_mfea_0_1_unregister_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_unregister_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/unregister_protocol4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_add_mfc4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/add_mfc4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_add_mfc4(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	const uint32_t&	arg_iif_vif_index,
	const vector<uint8_t>&	arg_oiflist,
	const vector<uint8_t>&	arg_oiflist_disable_wrongvif,
	const uint32_t&	arg_max_vifs_oiflist,
	const IPv4&	arg_rp_address,
	const uint32_t&	arg_distance,
	Mfea01AddMfc4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_add_mfc4(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_iif_vif_index,
        arg_oiflist,
        arg_oiflist_disable_wrongvif,
        arg_max_vifs_oiflist,
        arg_rp_address,
        arg_distance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(9), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/add_mfc4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01AddMfc4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_add_mfc4, pxa_outputs);
	async_mfea_0_1_add_mfc4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "iif_vif_index").uint32(),
	    xa_inputs.get(4, "oiflist").binary(),
	    xa_inputs.get(5, "oiflist_disable_wrongvif").binary(),
	    xa_inputs.get(6, "max_vifs_oiflist").uint32(),
	    xa_inputs.get(7, "rp_address").ipv4(),
	    xa_inputs.get(8, "distance").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_mfc4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "iif_vif_index").uint32(),
	    xa_inputs.get(4, "oiflist").binary(),
	    xa_inputs.get(5, "oiflist_disable_wrongvif").binary(),
	    xa_inputs.get(6, "max_vifs_oiflist").uint32(),
	    xa_inputs.get(7, "rp_address").ipv4(),
	    xa_inputs.get(8, "distance").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/add_mfc4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_delete_mfc4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/delete_mfc4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_delete_mfc4(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	Mfea01DeleteMfc4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_delete_mfc4(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/delete_mfc4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01DeleteMfc4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_delete_mfc4, pxa_outputs);
	async_mfea_0_1_delete_mfc4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_mfc4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/delete_mfc4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_add_mfc4_str
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/add_mfc4_str", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_add_mfc4_str(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	const string&	arg_iif_name,
	const string&	arg_oif_names,
	const uint32_t&	arg_distance,
	Mfea01AddMfc4StrCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_add_mfc4_str(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_iif_name,
        arg_oif_names,
        arg_distance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc4_str(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/add_mfc4_str");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01AddMfc4StrRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_add_mfc4_str, pxa_outputs);
	async_mfea_0_1_add_mfc4_str(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "iif_name").text(),
	    xa_inputs.get(4, "oif_names").text(),
	    xa_inputs.get(5, "distance").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_mfc4_str(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "iif_name").text(),
	    xa_inputs.get(4, "oif_names").text(),
	    xa_inputs.get(5, "distance").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/add_mfc4_str", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_add_dataflow_monitor4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/add_dataflow_monitor4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_add_dataflow_monitor4(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	const uint32_t&	arg_threshold_interval_sec,
	const uint32_t&	arg_threshold_interval_usec,
	const uint32_t&	arg_threshold_packets,
	const uint32_t&	arg_threshold_bytes,
	const bool&	arg_is_threshold_in_packets,
	const bool&	arg_is_threshold_in_bytes,
	const bool&	arg_is_geq_upcall,
	const bool&	arg_is_leq_upcall,
	Mfea01AddDataflowMonitor4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_add_dataflow_monitor4(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_threshold_interval_sec,
        arg_threshold_interval_usec,
        arg_threshold_packets,
        arg_threshold_bytes,
        arg_is_threshold_in_packets,
        arg_is_threshold_in_bytes,
        arg_is_geq_upcall,
        arg_is_leq_upcall);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(11), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/add_dataflow_monitor4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01AddDataflowMonitor4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_add_dataflow_monitor4, pxa_outputs);
	async_mfea_0_1_add_dataflow_monitor4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_dataflow_monitor4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/add_dataflow_monitor4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_delete_dataflow_monitor4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/delete_dataflow_monitor4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_delete_dataflow_monitor4(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	const uint32_t&	arg_threshold_interval_sec,
	const uint32_t&	arg_threshold_interval_usec,
	const uint32_t&	arg_threshold_packets,
	const uint32_t&	arg_threshold_bytes,
	const bool&	arg_is_threshold_in_packets,
	const bool&	arg_is_threshold_in_bytes,
	const bool&	arg_is_geq_upcall,
	const bool&	arg_is_leq_upcall,
	Mfea01DeleteDataflowMonitor4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_delete_dataflow_monitor4(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_threshold_interval_sec,
        arg_threshold_interval_usec,
        arg_threshold_packets,
        arg_threshold_bytes,
        arg_is_threshold_in_packets,
        arg_is_threshold_in_bytes,
        arg_is_geq_upcall,
        arg_is_leq_upcall);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(11), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/delete_dataflow_monitor4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01DeleteDataflowMonitor4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_delete_dataflow_monitor4, pxa_outputs);
	async_mfea_0_1_delete_dataflow_monitor4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_dataflow_monitor4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/delete_dataflow_monitor4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_delete_all_dataflow_monitor4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/delete_all_dataflow_monitor4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_delete_all_dataflow_monitor4(
	const string&	arg_xrl_sender_name,
	const IPv4&	arg_source_address,
	const IPv4&	arg_group_address,
	Mfea01DeleteAllDataflowMonitor4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor4(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/delete_all_dataflow_monitor4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01DeleteAllDataflowMonitor4RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_delete_all_dataflow_monitor4, pxa_outputs);
	async_mfea_0_1_delete_all_dataflow_monitor4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv4(),
	    xa_inputs.get(2, "group_address").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/delete_all_dataflow_monitor4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_enable_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/enable_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_enable_vif(
	const string&	arg_vif_name,
	const bool&	arg_enable,
	Mfea01EnableVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_enable_vif(
        arg_vif_name,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_enable_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/enable_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01EnableVifRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_enable_vif, pxa_outputs);
	async_mfea_0_1_enable_vif(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_vif(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/enable_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_start_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/start_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_start_vif(
	const string&	arg_vif_name,
	Mfea01StartVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_start_vif(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_start_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/start_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StartVifRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_start_vif, pxa_outputs);
	async_mfea_0_1_start_vif(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_vif(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/start_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_stop_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/stop_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_stop_vif(
	const string&	arg_vif_name,
	Mfea01StopVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_stop_vif(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_stop_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/stop_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StopVifRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_stop_vif, pxa_outputs);
	async_mfea_0_1_stop_vif(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_vif(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/stop_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_enable_all_vifs
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/enable_all_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_enable_all_vifs(
	const bool&	arg_enable,
	Mfea01EnableAllVifsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_enable_all_vifs(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_enable_all_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/enable_all_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01EnableAllVifsRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_enable_all_vifs, pxa_outputs);
	async_mfea_0_1_enable_all_vifs(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_all_vifs(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/enable_all_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_start_all_vifs
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/start_all_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_start_all_vifs(
	Mfea01StartAllVifsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_start_all_vifs();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_start_all_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/start_all_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StartAllVifsRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_start_all_vifs, pxa_outputs);
	async_mfea_0_1_start_all_vifs( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/start_all_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_stop_all_vifs
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/stop_all_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_stop_all_vifs(
	Mfea01StopAllVifsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_stop_all_vifs();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_stop_all_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/stop_all_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StopAllVifsRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_stop_all_vifs, pxa_outputs);
	async_mfea_0_1_stop_all_vifs( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/stop_all_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_enable_mfea
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/enable_mfea", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_enable_mfea(
	const bool&	arg_enable,
	Mfea01EnableMfeaCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_enable_mfea(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_enable_mfea(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/enable_mfea");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01EnableMfeaRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_enable_mfea, pxa_outputs);
	async_mfea_0_1_enable_mfea(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_mfea(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/enable_mfea", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_start_mfea
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/start_mfea", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_start_mfea(
	Mfea01StartMfeaCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_start_mfea();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_start_mfea(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/start_mfea");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StartMfeaRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_start_mfea, pxa_outputs);
	async_mfea_0_1_start_mfea( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_mfea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/start_mfea", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_stop_mfea
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/stop_mfea", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_stop_mfea(
	Mfea01StopMfeaCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_stop_mfea();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_stop_mfea(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/stop_mfea");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StopMfeaRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_stop_mfea, pxa_outputs);
	async_mfea_0_1_stop_mfea( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_mfea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/stop_mfea", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_enable_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/enable_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_enable_cli(
	const bool&	arg_enable,
	Mfea01EnableCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_enable_cli(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_enable_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/enable_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01EnableCliRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_enable_cli, pxa_outputs);
	async_mfea_0_1_enable_cli(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_cli(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/enable_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_start_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/start_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_start_cli(
	Mfea01StartCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_start_cli();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_start_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/start_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StartCliRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_start_cli, pxa_outputs);
	async_mfea_0_1_start_cli( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/start_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_stop_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/stop_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_stop_cli(
	Mfea01StopCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_stop_cli();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_stop_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/stop_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01StopCliRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_stop_cli, pxa_outputs);
	async_mfea_0_1_stop_cli( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/stop_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_log_trace_all
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/log_trace_all", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_log_trace_all(
	const bool&	arg_enable,
	Mfea01LogTraceAllCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_log_trace_all(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_log_trace_all(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/log_trace_all");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01LogTraceAllRF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_log_trace_all, pxa_outputs);
	async_mfea_0_1_log_trace_all(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_log_trace_all(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/log_trace_all", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_have_multicast_routing6
    (const XrlCmdError &e,
     const bool* rarg_result,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/have_multicast_routing6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("result", *rarg_result);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_have_multicast_routing6(
	Mfea01HaveMulticastRouting6CB c_b)
{

    /* Return value declarations */
    bool rarg_result;
    XrlCmdError e = mfea_0_1_have_multicast_routing6(
        rarg_result);
    return c_b->dispatch(e,
        &rarg_result);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_have_multicast_routing6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/have_multicast_routing6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01HaveMulticastRouting6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_have_multicast_routing6, pxa_outputs);
	async_mfea_0_1_have_multicast_routing6( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_result;
    try {
	XrlCmdError e = mfea_0_1_have_multicast_routing6(
	    r_result);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/have_multicast_routing6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("result", r_result);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_register_protocol6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/register_protocol6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_register_protocol6(
	const string&	arg_xrl_sender_name,
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const uint32_t&	arg_ip_protocol,
	Mfea01RegisterProtocol6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_register_protocol6(
        arg_xrl_sender_name,
        arg_if_name,
        arg_vif_name,
        arg_ip_protocol);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_register_protocol6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/register_protocol6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01RegisterProtocol6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_register_protocol6, pxa_outputs);
	async_mfea_0_1_register_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "ip_protocol").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_register_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "ip_protocol").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/register_protocol6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_unregister_protocol6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/unregister_protocol6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_unregister_protocol6(
	const string&	arg_xrl_sender_name,
	const string&	arg_if_name,
	const string&	arg_vif_name,
	Mfea01UnregisterProtocol6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_unregister_protocol6(
        arg_xrl_sender_name,
        arg_if_name,
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_unregister_protocol6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/unregister_protocol6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01UnregisterProtocol6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_unregister_protocol6, pxa_outputs);
	async_mfea_0_1_unregister_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_unregister_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/unregister_protocol6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_add_mfc6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/add_mfc6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_add_mfc6(
	const string&	arg_xrl_sender_name,
	const IPv6&	arg_source_address,
	const IPv6&	arg_group_address,
	const uint32_t&	arg_iif_vif_index,
	const vector<uint8_t>&	arg_oiflist,
	const vector<uint8_t>&	arg_oiflist_disable_wrongvif,
	const uint32_t&	arg_max_vifs_oiflist,
	const IPv6&	arg_rp_address,
	const uint32_t&	arg_distance,
	Mfea01AddMfc6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_add_mfc6(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_iif_vif_index,
        arg_oiflist,
        arg_oiflist_disable_wrongvif,
        arg_max_vifs_oiflist,
        arg_rp_address,
        arg_distance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(9), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/add_mfc6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01AddMfc6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_add_mfc6, pxa_outputs);
	async_mfea_0_1_add_mfc6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "iif_vif_index").uint32(),
	    xa_inputs.get(4, "oiflist").binary(),
	    xa_inputs.get(5, "oiflist_disable_wrongvif").binary(),
	    xa_inputs.get(6, "max_vifs_oiflist").uint32(),
	    xa_inputs.get(7, "rp_address").ipv6(),
	    xa_inputs.get(8, "distance").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_mfc6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "iif_vif_index").uint32(),
	    xa_inputs.get(4, "oiflist").binary(),
	    xa_inputs.get(5, "oiflist_disable_wrongvif").binary(),
	    xa_inputs.get(6, "max_vifs_oiflist").uint32(),
	    xa_inputs.get(7, "rp_address").ipv6(),
	    xa_inputs.get(8, "distance").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/add_mfc6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_delete_mfc6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/delete_mfc6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_delete_mfc6(
	const string&	arg_xrl_sender_name,
	const IPv6&	arg_source_address,
	const IPv6&	arg_group_address,
	Mfea01DeleteMfc6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_delete_mfc6(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/delete_mfc6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01DeleteMfc6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_delete_mfc6, pxa_outputs);
	async_mfea_0_1_delete_mfc6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_mfc6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/delete_mfc6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_add_dataflow_monitor6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/add_dataflow_monitor6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_add_dataflow_monitor6(
	const string&	arg_xrl_sender_name,
	const IPv6&	arg_source_address,
	const IPv6&	arg_group_address,
	const uint32_t&	arg_threshold_interval_sec,
	const uint32_t&	arg_threshold_interval_usec,
	const uint32_t&	arg_threshold_packets,
	const uint32_t&	arg_threshold_bytes,
	const bool&	arg_is_threshold_in_packets,
	const bool&	arg_is_threshold_in_bytes,
	const bool&	arg_is_geq_upcall,
	const bool&	arg_is_leq_upcall,
	Mfea01AddDataflowMonitor6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_add_dataflow_monitor6(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_threshold_interval_sec,
        arg_threshold_interval_usec,
        arg_threshold_packets,
        arg_threshold_bytes,
        arg_is_threshold_in_packets,
        arg_is_threshold_in_bytes,
        arg_is_geq_upcall,
        arg_is_leq_upcall);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(11), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/add_dataflow_monitor6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01AddDataflowMonitor6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_add_dataflow_monitor6, pxa_outputs);
	async_mfea_0_1_add_dataflow_monitor6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_dataflow_monitor6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/add_dataflow_monitor6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_delete_dataflow_monitor6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/delete_dataflow_monitor6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_delete_dataflow_monitor6(
	const string&	arg_xrl_sender_name,
	const IPv6&	arg_source_address,
	const IPv6&	arg_group_address,
	const uint32_t&	arg_threshold_interval_sec,
	const uint32_t&	arg_threshold_interval_usec,
	const uint32_t&	arg_threshold_packets,
	const uint32_t&	arg_threshold_bytes,
	const bool&	arg_is_threshold_in_packets,
	const bool&	arg_is_threshold_in_bytes,
	const bool&	arg_is_geq_upcall,
	const bool&	arg_is_leq_upcall,
	Mfea01DeleteDataflowMonitor6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_delete_dataflow_monitor6(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address,
        arg_threshold_interval_sec,
        arg_threshold_interval_usec,
        arg_threshold_packets,
        arg_threshold_bytes,
        arg_is_threshold_in_packets,
        arg_is_threshold_in_bytes,
        arg_is_geq_upcall,
        arg_is_leq_upcall);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(11), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/delete_dataflow_monitor6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01DeleteDataflowMonitor6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_delete_dataflow_monitor6, pxa_outputs);
	async_mfea_0_1_delete_dataflow_monitor6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_dataflow_monitor6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(),
	    xa_inputs.get(3, "threshold_interval_sec").uint32(),
	    xa_inputs.get(4, "threshold_interval_usec").uint32(),
	    xa_inputs.get(5, "threshold_packets").uint32(),
	    xa_inputs.get(6, "threshold_bytes").uint32(),
	    xa_inputs.get(7, "is_threshold_in_packets").boolean(),
	    xa_inputs.get(8, "is_threshold_in_bytes").boolean(),
	    xa_inputs.get(9, "is_geq_upcall").boolean(),
	    xa_inputs.get(10, "is_leq_upcall").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/delete_dataflow_monitor6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMfeaTargetBase::callback_mfea_0_1_delete_all_dataflow_monitor6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mfea/0.1/delete_all_dataflow_monitor6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMfeaTargetBase::async_mfea_0_1_delete_all_dataflow_monitor6(
	const string&	arg_xrl_sender_name,
	const IPv6&	arg_source_address,
	const IPv6&	arg_group_address,
	Mfea01DeleteAllDataflowMonitor6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor6(
        arg_xrl_sender_name,
        arg_source_address,
        arg_group_address);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mfea/0.1/delete_all_dataflow_monitor6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mfea01DeleteAllDataflowMonitor6RF mycb =
	    callback(this, &XrlMfeaTargetBase::callback_mfea_0_1_delete_all_dataflow_monitor6, pxa_outputs);
	async_mfea_0_1_delete_all_dataflow_monitor6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "source_address").ipv6(),
	    xa_inputs.get(2, "group_address").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mfea/0.1/delete_all_dataflow_monitor6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlMfeaTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "mfea", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlMfeaTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
