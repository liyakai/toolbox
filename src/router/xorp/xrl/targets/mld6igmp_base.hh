/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/mld6igmp_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_MLD6IGMP_BASE_HH__
#define __XRL_TARGETS_MLD6IGMP_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlMld6igmpTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlMld6igmpTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlMld6igmpTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlMld6igmpTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "mld6igmp/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Process a CLI command.
     *
     *  @param processor_name the processor name for this command.
     *
     *  @param cli_term_name the terminal name the command was entered from.
     *
     *  @param cli_session_id the CLI session ID the command was entered from.
     *
     *  @param command_name the command name to process.
     *
     *  @param command_args the command arguments to process.
     *
     *  @param ret_processor_name the processor name to return back to the CLI.
     *
     *  @param ret_cli_term_name the terminal name to return back.
     *
     *  @param ret_cli_session_id the CLI session ID to return back.
     *
     *  @param ret_command_output the command output to return back.
     */
    virtual XrlCmdError cli_processor_0_1_process_command(
	// Input values,
	const string&	processor_name,
	const string&	cli_term_name,
	const uint32_t&	cli_session_id,
	const string&	command_name,
	const string&	command_args,
	// Output values,
	string&	ret_processor_name,
	string&	ret_cli_term_name,
	uint32_t&	ret_cli_session_id,
	string&	ret_command_output) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback5<void, const XrlCmdError &,
	const string*,
	const string*,
	const uint32_t*,
	const string*>::RefPtr
    CliProcessor01ProcessCommandRF;

    class CliProcessor01ProcessCommandCB {
        CliProcessor01ProcessCommandRF cb;

    public:
        operator const CliProcessor01ProcessCommandRF& () const { return cb; }
        const CliProcessor01ProcessCommandRF& operator ->() const { return cb; }
        CliProcessor01ProcessCommandCB(const CliProcessor01ProcessCommandRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL, NULL, NULL); }

        void respond(const string& arg_ret_processor_name,
                     const string& arg_ret_cli_term_name,
                     const uint32_t& arg_ret_cli_session_id,
                     const string& arg_ret_command_output) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_ret_processor_name,
                         &arg_ret_cli_term_name,
                         &arg_ret_cli_session_id,
                         &arg_ret_command_output);
        }
    };

    struct CliProcessor01ProcessCommandRsp :
      public CliProcessor01ProcessCommandCB {
        struct args_str {
            string ret_processor_name;
            string ret_cli_term_name;
            uint32_t ret_cli_session_id;
            string ret_command_output;
        };

    private:
        args_str args;

    public:
        CliProcessor01ProcessCommandRsp(const CliProcessor01ProcessCommandRF& cb)
          : CliProcessor01ProcessCommandCB(cb) { }

        void respond() const {
            CliProcessor01ProcessCommandCB::
            respond(args.ret_processor_name,
                        args.ret_cli_term_name,
                        args.ret_cli_session_id,
                        args.ret_command_output);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_cli_processor_0_1_process_command
       (
	const string&	processor_name,
	const string&	cli_term_name,
	const uint32_t&	cli_session_id,
	const string&	command_name,
	const string&	command_args,
	CliProcessor01ProcessCommandCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Announce target birth to observer.
     *
     *  @param target_class the target class name.
     *
     *  @param target_instance the target instance name.
     */
    virtual XrlCmdError finder_event_observer_0_1_xrl_target_birth(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    FinderEventObserver01XrlTargetBirthRF;

    class FinderEventObserver01XrlTargetBirthCB {
        FinderEventObserver01XrlTargetBirthRF cb;

    public:
        operator const FinderEventObserver01XrlTargetBirthRF& () const { return cb; }
        const FinderEventObserver01XrlTargetBirthRF& operator ->() const { return cb; }
        FinderEventObserver01XrlTargetBirthCB(const FinderEventObserver01XrlTargetBirthRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct FinderEventObserver01XrlTargetBirthRsp :
      public FinderEventObserver01XrlTargetBirthCB {
        FinderEventObserver01XrlTargetBirthRsp(const FinderEventObserver01XrlTargetBirthRF& cb)
          : FinderEventObserver01XrlTargetBirthCB(cb) { }

    };

    virtual void async_finder_event_observer_0_1_xrl_target_birth
       (
	const string&	target_class,
	const string&	target_instance,
	FinderEventObserver01XrlTargetBirthCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Announce target death to observer.
     *
     *  @param target_class the target class name.
     *
     *  @param target_instance the target instance name.
     */
    virtual XrlCmdError finder_event_observer_0_1_xrl_target_death(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    FinderEventObserver01XrlTargetDeathRF;

    class FinderEventObserver01XrlTargetDeathCB {
        FinderEventObserver01XrlTargetDeathRF cb;

    public:
        operator const FinderEventObserver01XrlTargetDeathRF& () const { return cb; }
        const FinderEventObserver01XrlTargetDeathRF& operator ->() const { return cb; }
        FinderEventObserver01XrlTargetDeathCB(const FinderEventObserver01XrlTargetDeathRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct FinderEventObserver01XrlTargetDeathRsp :
      public FinderEventObserver01XrlTargetDeathCB {
        FinderEventObserver01XrlTargetDeathRsp(const FinderEventObserver01XrlTargetDeathRF& cb)
          : FinderEventObserver01XrlTargetDeathCB(cb) { }

    };

    virtual void async_finder_event_observer_0_1_xrl_target_death
       (
	const string&	target_class,
	const string&	target_instance,
	FinderEventObserver01XrlTargetDeathCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Receive an IPv4 packet from a raw socket.
     *
     *  @param if_name the interface name the packet arrived on.
     *
     *  @param vif_name the vif name the packet arrived on.
     *
     *  @param src_address the IP source address.
     *
     *  @param dst_address the IP destination address.
     *
     *  @param ip_protocol the IP protocol number.
     *
     *  @param ip_ttl the IP TTL (hop-limit). If it has a negative value, then
     *  the received value is unknown.
     *
     *  @param ip_tos the Type of Service (Diffserv/ECN bits for IPv4). If it
     *  has a negative value, then the received value is unknown.
     *
     *  @param ip_router_alert if true, the IP Router Alert option was included
     *  in the IP packet.
     *
     *  @param ip_internet_control if true, then this is IP control traffic.
     *
     *  @param payload the payload, everything after the IP header and options.
     */
    virtual XrlCmdError raw_packet4_client_0_1_recv(
	// Input values,
	const string&	if_name,
	const string&	vif_name,
	const IPv4&	src_address,
	const IPv4&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const vector<uint8_t>&	payload) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    RawPacket4Client01RecvRF;

    class RawPacket4Client01RecvCB {
        RawPacket4Client01RecvRF cb;

    public:
        operator const RawPacket4Client01RecvRF& () const { return cb; }
        const RawPacket4Client01RecvRF& operator ->() const { return cb; }
        RawPacket4Client01RecvCB(const RawPacket4Client01RecvRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct RawPacket4Client01RecvRsp :
      public RawPacket4Client01RecvCB {
        RawPacket4Client01RecvRsp(const RawPacket4Client01RecvRF& cb)
          : RawPacket4Client01RecvCB(cb) { }

    };

    virtual void async_raw_packet4_client_0_1_recv
       (
	const string&	if_name,
	const string&	vif_name,
	const IPv4&	src_address,
	const IPv4&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const vector<uint8_t>&	payload,
	RawPacket4Client01RecvCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Receive an IPv6 packet from a raw socket.
     *
     *  @param if_name the interface name the packet arrived on.
     *
     *  @param vif_name the vif name the packet arrived on.
     *
     *  @param src_address the IP source address.
     *
     *  @param dst_address the IP destination address.
     *
     *  @param ip_protocol the IP protocol number.
     *
     *  @param ip_ttl the IP TTL (hop-limit). If it has a negative value, then
     *  the received value is unknown.
     *
     *  @param ip_tos the Type Of Service (IP traffic class for IPv4). If it
     *  has a negative value, then the received value is unknown.
     *
     *  @param ip_router_alert if true, the IP Router Alert option was included
     *  in the IP packet.
     *
     *  @param ip_internet_control if true, then this is IP control traffic.
     *
     *  @param ext_headers_type a list of u32 integers with the types of the
     *  optional extention headers.
     *
     *  @param ext_headers_payload a list of payload data, one for each
     *  optional extention header. The number of entries must match
     *  ext_headers_type.
     *
     *  @param payload the payload, everything after the IP header and options.
     */
    virtual XrlCmdError raw_packet6_client_0_1_recv(
	// Input values,
	const string&	if_name,
	const string&	vif_name,
	const IPv6&	src_address,
	const IPv6&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const XrlAtomList&	ext_headers_type,
	const XrlAtomList&	ext_headers_payload,
	const vector<uint8_t>&	payload) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    RawPacket6Client01RecvRF;

    class RawPacket6Client01RecvCB {
        RawPacket6Client01RecvRF cb;

    public:
        operator const RawPacket6Client01RecvRF& () const { return cb; }
        const RawPacket6Client01RecvRF& operator ->() const { return cb; }
        RawPacket6Client01RecvCB(const RawPacket6Client01RecvRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct RawPacket6Client01RecvRsp :
      public RawPacket6Client01RecvCB {
        RawPacket6Client01RecvRsp(const RawPacket6Client01RecvRF& cb)
          : RawPacket6Client01RecvCB(cb) { }

    };

    virtual void async_raw_packet6_client_0_1_recv
       (
	const string&	if_name,
	const string&	vif_name,
	const IPv6&	src_address,
	const IPv6&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const XrlAtomList&	ext_headers_type,
	const XrlAtomList&	ext_headers_payload,
	const vector<uint8_t>&	payload,
	RawPacket6Client01RecvCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable/start/stop a MLD6IGMP vif interface.
     *
     *  @param vif_name the name of the vif to enable/disable/start/stop.
     *
     *  @param enable if true, then enable the vif, otherwise disable it.
     */
    virtual XrlCmdError mld6igmp_0_1_enable_vif(
	// Input values,
	const string&	vif_name,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01EnableVifRF;

    class Mld6Igmp01EnableVifCB {
        Mld6Igmp01EnableVifRF cb;

    public:
        operator const Mld6Igmp01EnableVifRF& () const { return cb; }
        const Mld6Igmp01EnableVifRF& operator ->() const { return cb; }
        Mld6Igmp01EnableVifCB(const Mld6Igmp01EnableVifRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01EnableVifRsp :
      public Mld6Igmp01EnableVifCB {
        Mld6Igmp01EnableVifRsp(const Mld6Igmp01EnableVifRF& cb)
          : Mld6Igmp01EnableVifCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_enable_vif
       (
	const string&	vif_name,
	const bool&	enable,
	Mld6Igmp01EnableVifCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_start_vif(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StartVifRF;

    class Mld6Igmp01StartVifCB {
        Mld6Igmp01StartVifRF cb;

    public:
        operator const Mld6Igmp01StartVifRF& () const { return cb; }
        const Mld6Igmp01StartVifRF& operator ->() const { return cb; }
        Mld6Igmp01StartVifCB(const Mld6Igmp01StartVifRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StartVifRsp :
      public Mld6Igmp01StartVifCB {
        Mld6Igmp01StartVifRsp(const Mld6Igmp01StartVifRF& cb)
          : Mld6Igmp01StartVifCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_start_vif
       (
	const string&	vif_name,
	Mld6Igmp01StartVifCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_stop_vif(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StopVifRF;

    class Mld6Igmp01StopVifCB {
        Mld6Igmp01StopVifRF cb;

    public:
        operator const Mld6Igmp01StopVifRF& () const { return cb; }
        const Mld6Igmp01StopVifRF& operator ->() const { return cb; }
        Mld6Igmp01StopVifCB(const Mld6Igmp01StopVifRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StopVifRsp :
      public Mld6Igmp01StopVifCB {
        Mld6Igmp01StopVifRsp(const Mld6Igmp01StopVifRF& cb)
          : Mld6Igmp01StopVifCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_stop_vif
       (
	const string&	vif_name,
	Mld6Igmp01StopVifCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable/start/stop all MLD6IGMP vif interfaces.
     *
     *  @param enable if true, then enable the vifs, otherwise disable them.
     */
    virtual XrlCmdError mld6igmp_0_1_enable_all_vifs(
	// Input values,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01EnableAllVifsRF;

    class Mld6Igmp01EnableAllVifsCB {
        Mld6Igmp01EnableAllVifsRF cb;

    public:
        operator const Mld6Igmp01EnableAllVifsRF& () const { return cb; }
        const Mld6Igmp01EnableAllVifsRF& operator ->() const { return cb; }
        Mld6Igmp01EnableAllVifsCB(const Mld6Igmp01EnableAllVifsRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01EnableAllVifsRsp :
      public Mld6Igmp01EnableAllVifsCB {
        Mld6Igmp01EnableAllVifsRsp(const Mld6Igmp01EnableAllVifsRF& cb)
          : Mld6Igmp01EnableAllVifsCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_enable_all_vifs
       (
	const bool&	enable,
	Mld6Igmp01EnableAllVifsCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_start_all_vifs() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StartAllVifsRF;

    class Mld6Igmp01StartAllVifsCB {
        Mld6Igmp01StartAllVifsRF cb;

    public:
        operator const Mld6Igmp01StartAllVifsRF& () const { return cb; }
        const Mld6Igmp01StartAllVifsRF& operator ->() const { return cb; }
        Mld6Igmp01StartAllVifsCB(const Mld6Igmp01StartAllVifsRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StartAllVifsRsp :
      public Mld6Igmp01StartAllVifsCB {
        Mld6Igmp01StartAllVifsRsp(const Mld6Igmp01StartAllVifsRF& cb)
          : Mld6Igmp01StartAllVifsCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_start_all_vifs
       (
	Mld6Igmp01StartAllVifsCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_stop_all_vifs() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StopAllVifsRF;

    class Mld6Igmp01StopAllVifsCB {
        Mld6Igmp01StopAllVifsRF cb;

    public:
        operator const Mld6Igmp01StopAllVifsRF& () const { return cb; }
        const Mld6Igmp01StopAllVifsRF& operator ->() const { return cb; }
        Mld6Igmp01StopAllVifsCB(const Mld6Igmp01StopAllVifsRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StopAllVifsRsp :
      public Mld6Igmp01StopAllVifsCB {
        Mld6Igmp01StopAllVifsRsp(const Mld6Igmp01StopAllVifsRF& cb)
          : Mld6Igmp01StopAllVifsCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_stop_all_vifs
       (
	Mld6Igmp01StopAllVifsCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable/start/stop the MLD6IGMP protocol.
     *
     *  @param enable if true, then enable the MLD6IGMP protocol, otherwise
     *  disable it.
     */
    virtual XrlCmdError mld6igmp_0_1_enable_mld6igmp(
	// Input values,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01EnableMld6IgmpRF;

    class Mld6Igmp01EnableMld6IgmpCB {
        Mld6Igmp01EnableMld6IgmpRF cb;

    public:
        operator const Mld6Igmp01EnableMld6IgmpRF& () const { return cb; }
        const Mld6Igmp01EnableMld6IgmpRF& operator ->() const { return cb; }
        Mld6Igmp01EnableMld6IgmpCB(const Mld6Igmp01EnableMld6IgmpRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01EnableMld6IgmpRsp :
      public Mld6Igmp01EnableMld6IgmpCB {
        Mld6Igmp01EnableMld6IgmpRsp(const Mld6Igmp01EnableMld6IgmpRF& cb)
          : Mld6Igmp01EnableMld6IgmpCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_enable_mld6igmp
       (
	const bool&	enable,
	Mld6Igmp01EnableMld6IgmpCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_start_mld6igmp() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StartMld6IgmpRF;

    class Mld6Igmp01StartMld6IgmpCB {
        Mld6Igmp01StartMld6IgmpRF cb;

    public:
        operator const Mld6Igmp01StartMld6IgmpRF& () const { return cb; }
        const Mld6Igmp01StartMld6IgmpRF& operator ->() const { return cb; }
        Mld6Igmp01StartMld6IgmpCB(const Mld6Igmp01StartMld6IgmpRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StartMld6IgmpRsp :
      public Mld6Igmp01StartMld6IgmpCB {
        Mld6Igmp01StartMld6IgmpRsp(const Mld6Igmp01StartMld6IgmpRF& cb)
          : Mld6Igmp01StartMld6IgmpCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_start_mld6igmp
       (
	Mld6Igmp01StartMld6IgmpCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_stop_mld6igmp() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StopMld6IgmpRF;

    class Mld6Igmp01StopMld6IgmpCB {
        Mld6Igmp01StopMld6IgmpRF cb;

    public:
        operator const Mld6Igmp01StopMld6IgmpRF& () const { return cb; }
        const Mld6Igmp01StopMld6IgmpRF& operator ->() const { return cb; }
        Mld6Igmp01StopMld6IgmpCB(const Mld6Igmp01StopMld6IgmpRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StopMld6IgmpRsp :
      public Mld6Igmp01StopMld6IgmpCB {
        Mld6Igmp01StopMld6IgmpRsp(const Mld6Igmp01StopMld6IgmpRF& cb)
          : Mld6Igmp01StopMld6IgmpCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_stop_mld6igmp
       (
	Mld6Igmp01StopMld6IgmpCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable/start/stop the MLD6IGMP CLI access.
     *
     *  @param enable if true, then enable the MLD6IGMP CLI access, otherwise
     *  disable it.
     */
    virtual XrlCmdError mld6igmp_0_1_enable_cli(
	// Input values,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01EnableCliRF;

    class Mld6Igmp01EnableCliCB {
        Mld6Igmp01EnableCliRF cb;

    public:
        operator const Mld6Igmp01EnableCliRF& () const { return cb; }
        const Mld6Igmp01EnableCliRF& operator ->() const { return cb; }
        Mld6Igmp01EnableCliCB(const Mld6Igmp01EnableCliRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01EnableCliRsp :
      public Mld6Igmp01EnableCliCB {
        Mld6Igmp01EnableCliRsp(const Mld6Igmp01EnableCliRF& cb)
          : Mld6Igmp01EnableCliCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_enable_cli
       (
	const bool&	enable,
	Mld6Igmp01EnableCliCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_start_cli() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StartCliRF;

    class Mld6Igmp01StartCliCB {
        Mld6Igmp01StartCliRF cb;

    public:
        operator const Mld6Igmp01StartCliRF& () const { return cb; }
        const Mld6Igmp01StartCliRF& operator ->() const { return cb; }
        Mld6Igmp01StartCliCB(const Mld6Igmp01StartCliRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StartCliRsp :
      public Mld6Igmp01StartCliCB {
        Mld6Igmp01StartCliRsp(const Mld6Igmp01StartCliRF& cb)
          : Mld6Igmp01StartCliCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_start_cli
       (
	Mld6Igmp01StartCliCB);
#endif

    virtual XrlCmdError mld6igmp_0_1_stop_cli() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01StopCliRF;

    class Mld6Igmp01StopCliCB {
        Mld6Igmp01StopCliRF cb;

    public:
        operator const Mld6Igmp01StopCliRF& () const { return cb; }
        const Mld6Igmp01StopCliRF& operator ->() const { return cb; }
        Mld6Igmp01StopCliCB(const Mld6Igmp01StopCliRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01StopCliRsp :
      public Mld6Igmp01StopCliCB {
        Mld6Igmp01StopCliRsp(const Mld6Igmp01StopCliRF& cb)
          : Mld6Igmp01StopCliCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_stop_cli
       (
	Mld6Igmp01StopCliCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the configured protocol version per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param proto_version the protocol version.
     */
    virtual XrlCmdError mld6igmp_0_1_get_vif_proto_version(
	// Input values,
	const string&	vif_name,
	// Output values,
	uint32_t&	proto_version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const uint32_t*>::RefPtr
    Mld6Igmp01GetVifProtoVersionRF;

    class Mld6Igmp01GetVifProtoVersionCB {
        Mld6Igmp01GetVifProtoVersionRF cb;

    public:
        operator const Mld6Igmp01GetVifProtoVersionRF& () const { return cb; }
        const Mld6Igmp01GetVifProtoVersionRF& operator ->() const { return cb; }
        Mld6Igmp01GetVifProtoVersionCB(const Mld6Igmp01GetVifProtoVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const uint32_t& arg_proto_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_proto_version);
        }
    };

    struct Mld6Igmp01GetVifProtoVersionRsp :
      public Mld6Igmp01GetVifProtoVersionCB {
        struct args_str {
            uint32_t proto_version;
        };

    private:
        args_str args;

    public:
        Mld6Igmp01GetVifProtoVersionRsp(const Mld6Igmp01GetVifProtoVersionRF& cb)
          : Mld6Igmp01GetVifProtoVersionCB(cb) { }

        void respond() const {
            Mld6Igmp01GetVifProtoVersionCB::
            respond(args.proto_version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_mld6igmp_0_1_get_vif_proto_version
       (
	const string&	vif_name,
	Mld6Igmp01GetVifProtoVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the protocol version per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param proto_version the protocol version.
     */
    virtual XrlCmdError mld6igmp_0_1_set_vif_proto_version(
	// Input values,
	const string&	vif_name,
	const uint32_t&	proto_version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01SetVifProtoVersionRF;

    class Mld6Igmp01SetVifProtoVersionCB {
        Mld6Igmp01SetVifProtoVersionRF cb;

    public:
        operator const Mld6Igmp01SetVifProtoVersionRF& () const { return cb; }
        const Mld6Igmp01SetVifProtoVersionRF& operator ->() const { return cb; }
        Mld6Igmp01SetVifProtoVersionCB(const Mld6Igmp01SetVifProtoVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01SetVifProtoVersionRsp :
      public Mld6Igmp01SetVifProtoVersionCB {
        Mld6Igmp01SetVifProtoVersionRsp(const Mld6Igmp01SetVifProtoVersionRF& cb)
          : Mld6Igmp01SetVifProtoVersionCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_set_vif_proto_version
       (
	const string&	vif_name,
	const uint32_t&	proto_version,
	Mld6Igmp01SetVifProtoVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset the protocol version per interface to its default value.
     *
     *  @param vif_name the name of the vif to apply to.
     */
    virtual XrlCmdError mld6igmp_0_1_reset_vif_proto_version(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01ResetVifProtoVersionRF;

    class Mld6Igmp01ResetVifProtoVersionCB {
        Mld6Igmp01ResetVifProtoVersionRF cb;

    public:
        operator const Mld6Igmp01ResetVifProtoVersionRF& () const { return cb; }
        const Mld6Igmp01ResetVifProtoVersionRF& operator ->() const { return cb; }
        Mld6Igmp01ResetVifProtoVersionCB(const Mld6Igmp01ResetVifProtoVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01ResetVifProtoVersionRsp :
      public Mld6Igmp01ResetVifProtoVersionCB {
        Mld6Igmp01ResetVifProtoVersionRsp(const Mld6Igmp01ResetVifProtoVersionRF& cb)
          : Mld6Igmp01ResetVifProtoVersionCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_reset_vif_proto_version
       (
	const string&	vif_name,
	Mld6Igmp01ResetVifProtoVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the IP Router Alert option check per interface for received
     *  packets.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param enabled if true, then the IP Router Alert option check was
     *  enabled, otherwise it was disabled.
     */
    virtual XrlCmdError mld6igmp_0_1_get_vif_ip_router_alert_option_check(
	// Input values,
	const string&	vif_name,
	// Output values,
	bool&	enabled) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const bool*>::RefPtr
    Mld6Igmp01GetVifIpRouterAlertOptionCheckRF;

    class Mld6Igmp01GetVifIpRouterAlertOptionCheckCB {
        Mld6Igmp01GetVifIpRouterAlertOptionCheckRF cb;

    public:
        operator const Mld6Igmp01GetVifIpRouterAlertOptionCheckRF& () const { return cb; }
        const Mld6Igmp01GetVifIpRouterAlertOptionCheckRF& operator ->() const { return cb; }
        Mld6Igmp01GetVifIpRouterAlertOptionCheckCB(const Mld6Igmp01GetVifIpRouterAlertOptionCheckRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const bool& arg_enabled) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_enabled);
        }
    };

    struct Mld6Igmp01GetVifIpRouterAlertOptionCheckRsp :
      public Mld6Igmp01GetVifIpRouterAlertOptionCheckCB {
        struct args_str {
            bool enabled;
        };

    private:
        args_str args;

    public:
        Mld6Igmp01GetVifIpRouterAlertOptionCheckRsp(const Mld6Igmp01GetVifIpRouterAlertOptionCheckRF& cb)
          : Mld6Igmp01GetVifIpRouterAlertOptionCheckCB(cb) { }

        void respond() const {
            Mld6Igmp01GetVifIpRouterAlertOptionCheckCB::
            respond(args.enabled);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_mld6igmp_0_1_get_vif_ip_router_alert_option_check
       (
	const string&	vif_name,
	Mld6Igmp01GetVifIpRouterAlertOptionCheckCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the IP Router Alert option check per interface for received
     *  packets.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param enable if true, then enable the IP Router Alert option check,
     *  otherwise disable it.
     */
    virtual XrlCmdError mld6igmp_0_1_set_vif_ip_router_alert_option_check(
	// Input values,
	const string&	vif_name,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01SetVifIpRouterAlertOptionCheckRF;

    class Mld6Igmp01SetVifIpRouterAlertOptionCheckCB {
        Mld6Igmp01SetVifIpRouterAlertOptionCheckRF cb;

    public:
        operator const Mld6Igmp01SetVifIpRouterAlertOptionCheckRF& () const { return cb; }
        const Mld6Igmp01SetVifIpRouterAlertOptionCheckRF& operator ->() const { return cb; }
        Mld6Igmp01SetVifIpRouterAlertOptionCheckCB(const Mld6Igmp01SetVifIpRouterAlertOptionCheckRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01SetVifIpRouterAlertOptionCheckRsp :
      public Mld6Igmp01SetVifIpRouterAlertOptionCheckCB {
        Mld6Igmp01SetVifIpRouterAlertOptionCheckRsp(const Mld6Igmp01SetVifIpRouterAlertOptionCheckRF& cb)
          : Mld6Igmp01SetVifIpRouterAlertOptionCheckCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_set_vif_ip_router_alert_option_check
       (
	const string&	vif_name,
	const bool&	enable,
	Mld6Igmp01SetVifIpRouterAlertOptionCheckCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset the IP Router Alert option check for received packets per per
     *  interface to its default value.
     *
     *  @param vif_name the name of the vif to apply to.
     */
    virtual XrlCmdError mld6igmp_0_1_reset_vif_ip_router_alert_option_check(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF;

    class Mld6Igmp01ResetVifIpRouterAlertOptionCheckCB {
        Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF cb;

    public:
        operator const Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF& () const { return cb; }
        const Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF& operator ->() const { return cb; }
        Mld6Igmp01ResetVifIpRouterAlertOptionCheckCB(const Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01ResetVifIpRouterAlertOptionCheckRsp :
      public Mld6Igmp01ResetVifIpRouterAlertOptionCheckCB {
        Mld6Igmp01ResetVifIpRouterAlertOptionCheckRsp(const Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF& cb)
          : Mld6Igmp01ResetVifIpRouterAlertOptionCheckCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_reset_vif_ip_router_alert_option_check
       (
	const string&	vif_name,
	Mld6Igmp01ResetVifIpRouterAlertOptionCheckCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the Query Interval per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param interval_sec the number of seconds in the interval.
     *
     *  @param interval_usec the number of microseconds (in addition to
     *  interval_sec) in the interval.
     */
    virtual XrlCmdError mld6igmp_0_1_get_vif_query_interval(
	// Input values,
	const string&	vif_name,
	// Output values,
	uint32_t&	interval_sec,
	uint32_t&	interval_usec) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const uint32_t*>::RefPtr
    Mld6Igmp01GetVifQueryIntervalRF;

    class Mld6Igmp01GetVifQueryIntervalCB {
        Mld6Igmp01GetVifQueryIntervalRF cb;

    public:
        operator const Mld6Igmp01GetVifQueryIntervalRF& () const { return cb; }
        const Mld6Igmp01GetVifQueryIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01GetVifQueryIntervalCB(const Mld6Igmp01GetVifQueryIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_interval_sec,
                     const uint32_t& arg_interval_usec) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_interval_sec,
                         &arg_interval_usec);
        }
    };

    struct Mld6Igmp01GetVifQueryIntervalRsp :
      public Mld6Igmp01GetVifQueryIntervalCB {
        struct args_str {
            uint32_t interval_sec;
            uint32_t interval_usec;
        };

    private:
        args_str args;

    public:
        Mld6Igmp01GetVifQueryIntervalRsp(const Mld6Igmp01GetVifQueryIntervalRF& cb)
          : Mld6Igmp01GetVifQueryIntervalCB(cb) { }

        void respond() const {
            Mld6Igmp01GetVifQueryIntervalCB::
            respond(args.interval_sec,
                        args.interval_usec);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_mld6igmp_0_1_get_vif_query_interval
       (
	const string&	vif_name,
	Mld6Igmp01GetVifQueryIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the Query Interval per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param interval_sec the number of seconds in the interval.
     *
     *  @param interval_usec the number of microseconds (in addition to
     *  interval_sec) in the interval.
     */
    virtual XrlCmdError mld6igmp_0_1_set_vif_query_interval(
	// Input values,
	const string&	vif_name,
	const uint32_t&	interval_sec,
	const uint32_t&	interval_usec) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01SetVifQueryIntervalRF;

    class Mld6Igmp01SetVifQueryIntervalCB {
        Mld6Igmp01SetVifQueryIntervalRF cb;

    public:
        operator const Mld6Igmp01SetVifQueryIntervalRF& () const { return cb; }
        const Mld6Igmp01SetVifQueryIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01SetVifQueryIntervalCB(const Mld6Igmp01SetVifQueryIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01SetVifQueryIntervalRsp :
      public Mld6Igmp01SetVifQueryIntervalCB {
        Mld6Igmp01SetVifQueryIntervalRsp(const Mld6Igmp01SetVifQueryIntervalRF& cb)
          : Mld6Igmp01SetVifQueryIntervalCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_set_vif_query_interval
       (
	const string&	vif_name,
	const uint32_t&	interval_sec,
	const uint32_t&	interval_usec,
	Mld6Igmp01SetVifQueryIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset the Query Interval per interface to its default value.
     *
     *  @param vif_name the name of the vif to apply to.
     */
    virtual XrlCmdError mld6igmp_0_1_reset_vif_query_interval(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01ResetVifQueryIntervalRF;

    class Mld6Igmp01ResetVifQueryIntervalCB {
        Mld6Igmp01ResetVifQueryIntervalRF cb;

    public:
        operator const Mld6Igmp01ResetVifQueryIntervalRF& () const { return cb; }
        const Mld6Igmp01ResetVifQueryIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01ResetVifQueryIntervalCB(const Mld6Igmp01ResetVifQueryIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01ResetVifQueryIntervalRsp :
      public Mld6Igmp01ResetVifQueryIntervalCB {
        Mld6Igmp01ResetVifQueryIntervalRsp(const Mld6Igmp01ResetVifQueryIntervalRF& cb)
          : Mld6Igmp01ResetVifQueryIntervalCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_reset_vif_query_interval
       (
	const string&	vif_name,
	Mld6Igmp01ResetVifQueryIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the Last Member Query Interval per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param interval_sec the number of seconds in the interval.
     *
     *  @param interval_usec the number of microseconds (in addition to
     *  interval_sec) in the interval.
     */
    virtual XrlCmdError mld6igmp_0_1_get_vif_query_last_member_interval(
	// Input values,
	const string&	vif_name,
	// Output values,
	uint32_t&	interval_sec,
	uint32_t&	interval_usec) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const uint32_t*>::RefPtr
    Mld6Igmp01GetVifQueryLastMemberIntervalRF;

    class Mld6Igmp01GetVifQueryLastMemberIntervalCB {
        Mld6Igmp01GetVifQueryLastMemberIntervalRF cb;

    public:
        operator const Mld6Igmp01GetVifQueryLastMemberIntervalRF& () const { return cb; }
        const Mld6Igmp01GetVifQueryLastMemberIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01GetVifQueryLastMemberIntervalCB(const Mld6Igmp01GetVifQueryLastMemberIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_interval_sec,
                     const uint32_t& arg_interval_usec) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_interval_sec,
                         &arg_interval_usec);
        }
    };

    struct Mld6Igmp01GetVifQueryLastMemberIntervalRsp :
      public Mld6Igmp01GetVifQueryLastMemberIntervalCB {
        struct args_str {
            uint32_t interval_sec;
            uint32_t interval_usec;
        };

    private:
        args_str args;

    public:
        Mld6Igmp01GetVifQueryLastMemberIntervalRsp(const Mld6Igmp01GetVifQueryLastMemberIntervalRF& cb)
          : Mld6Igmp01GetVifQueryLastMemberIntervalCB(cb) { }

        void respond() const {
            Mld6Igmp01GetVifQueryLastMemberIntervalCB::
            respond(args.interval_sec,
                        args.interval_usec);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_mld6igmp_0_1_get_vif_query_last_member_interval
       (
	const string&	vif_name,
	Mld6Igmp01GetVifQueryLastMemberIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the Last Member Query Interval per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param interval_sec the number of seconds in the interval.
     *
     *  @param interval_usec the number of microseconds (in addition to
     *  interval_sec) in the interval.
     */
    virtual XrlCmdError mld6igmp_0_1_set_vif_query_last_member_interval(
	// Input values,
	const string&	vif_name,
	const uint32_t&	interval_sec,
	const uint32_t&	interval_usec) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01SetVifQueryLastMemberIntervalRF;

    class Mld6Igmp01SetVifQueryLastMemberIntervalCB {
        Mld6Igmp01SetVifQueryLastMemberIntervalRF cb;

    public:
        operator const Mld6Igmp01SetVifQueryLastMemberIntervalRF& () const { return cb; }
        const Mld6Igmp01SetVifQueryLastMemberIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01SetVifQueryLastMemberIntervalCB(const Mld6Igmp01SetVifQueryLastMemberIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01SetVifQueryLastMemberIntervalRsp :
      public Mld6Igmp01SetVifQueryLastMemberIntervalCB {
        Mld6Igmp01SetVifQueryLastMemberIntervalRsp(const Mld6Igmp01SetVifQueryLastMemberIntervalRF& cb)
          : Mld6Igmp01SetVifQueryLastMemberIntervalCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_set_vif_query_last_member_interval
       (
	const string&	vif_name,
	const uint32_t&	interval_sec,
	const uint32_t&	interval_usec,
	Mld6Igmp01SetVifQueryLastMemberIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset the Last Member Query Interval per interface to its default
     *  value.
     *
     *  @param vif_name the name of the vif to apply to.
     */
    virtual XrlCmdError mld6igmp_0_1_reset_vif_query_last_member_interval(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01ResetVifQueryLastMemberIntervalRF;

    class Mld6Igmp01ResetVifQueryLastMemberIntervalCB {
        Mld6Igmp01ResetVifQueryLastMemberIntervalRF cb;

    public:
        operator const Mld6Igmp01ResetVifQueryLastMemberIntervalRF& () const { return cb; }
        const Mld6Igmp01ResetVifQueryLastMemberIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01ResetVifQueryLastMemberIntervalCB(const Mld6Igmp01ResetVifQueryLastMemberIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01ResetVifQueryLastMemberIntervalRsp :
      public Mld6Igmp01ResetVifQueryLastMemberIntervalCB {
        Mld6Igmp01ResetVifQueryLastMemberIntervalRsp(const Mld6Igmp01ResetVifQueryLastMemberIntervalRF& cb)
          : Mld6Igmp01ResetVifQueryLastMemberIntervalCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_reset_vif_query_last_member_interval
       (
	const string&	vif_name,
	Mld6Igmp01ResetVifQueryLastMemberIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the Query Response Interval per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param interval_sec the number of seconds in the interval.
     *
     *  @param interval_usec the number of microseconds (in addition to
     *  interval_sec) in the interval.
     */
    virtual XrlCmdError mld6igmp_0_1_get_vif_query_response_interval(
	// Input values,
	const string&	vif_name,
	// Output values,
	uint32_t&	interval_sec,
	uint32_t&	interval_usec) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const uint32_t*>::RefPtr
    Mld6Igmp01GetVifQueryResponseIntervalRF;

    class Mld6Igmp01GetVifQueryResponseIntervalCB {
        Mld6Igmp01GetVifQueryResponseIntervalRF cb;

    public:
        operator const Mld6Igmp01GetVifQueryResponseIntervalRF& () const { return cb; }
        const Mld6Igmp01GetVifQueryResponseIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01GetVifQueryResponseIntervalCB(const Mld6Igmp01GetVifQueryResponseIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_interval_sec,
                     const uint32_t& arg_interval_usec) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_interval_sec,
                         &arg_interval_usec);
        }
    };

    struct Mld6Igmp01GetVifQueryResponseIntervalRsp :
      public Mld6Igmp01GetVifQueryResponseIntervalCB {
        struct args_str {
            uint32_t interval_sec;
            uint32_t interval_usec;
        };

    private:
        args_str args;

    public:
        Mld6Igmp01GetVifQueryResponseIntervalRsp(const Mld6Igmp01GetVifQueryResponseIntervalRF& cb)
          : Mld6Igmp01GetVifQueryResponseIntervalCB(cb) { }

        void respond() const {
            Mld6Igmp01GetVifQueryResponseIntervalCB::
            respond(args.interval_sec,
                        args.interval_usec);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_mld6igmp_0_1_get_vif_query_response_interval
       (
	const string&	vif_name,
	Mld6Igmp01GetVifQueryResponseIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the Query Response Interval per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param interval_sec the number of seconds in the interval.
     *
     *  @param interval_usec the number of microseconds (in addition to
     *  interval_sec) in the interval.
     */
    virtual XrlCmdError mld6igmp_0_1_set_vif_query_response_interval(
	// Input values,
	const string&	vif_name,
	const uint32_t&	interval_sec,
	const uint32_t&	interval_usec) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01SetVifQueryResponseIntervalRF;

    class Mld6Igmp01SetVifQueryResponseIntervalCB {
        Mld6Igmp01SetVifQueryResponseIntervalRF cb;

    public:
        operator const Mld6Igmp01SetVifQueryResponseIntervalRF& () const { return cb; }
        const Mld6Igmp01SetVifQueryResponseIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01SetVifQueryResponseIntervalCB(const Mld6Igmp01SetVifQueryResponseIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01SetVifQueryResponseIntervalRsp :
      public Mld6Igmp01SetVifQueryResponseIntervalCB {
        Mld6Igmp01SetVifQueryResponseIntervalRsp(const Mld6Igmp01SetVifQueryResponseIntervalRF& cb)
          : Mld6Igmp01SetVifQueryResponseIntervalCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_set_vif_query_response_interval
       (
	const string&	vif_name,
	const uint32_t&	interval_sec,
	const uint32_t&	interval_usec,
	Mld6Igmp01SetVifQueryResponseIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset the Query Response Interval per interface to its default value.
     *
     *  @param vif_name the name of the vif to apply to.
     */
    virtual XrlCmdError mld6igmp_0_1_reset_vif_query_response_interval(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01ResetVifQueryResponseIntervalRF;

    class Mld6Igmp01ResetVifQueryResponseIntervalCB {
        Mld6Igmp01ResetVifQueryResponseIntervalRF cb;

    public:
        operator const Mld6Igmp01ResetVifQueryResponseIntervalRF& () const { return cb; }
        const Mld6Igmp01ResetVifQueryResponseIntervalRF& operator ->() const { return cb; }
        Mld6Igmp01ResetVifQueryResponseIntervalCB(const Mld6Igmp01ResetVifQueryResponseIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01ResetVifQueryResponseIntervalRsp :
      public Mld6Igmp01ResetVifQueryResponseIntervalCB {
        Mld6Igmp01ResetVifQueryResponseIntervalRsp(const Mld6Igmp01ResetVifQueryResponseIntervalRF& cb)
          : Mld6Igmp01ResetVifQueryResponseIntervalCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_reset_vif_query_response_interval
       (
	const string&	vif_name,
	Mld6Igmp01ResetVifQueryResponseIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the Robustness Variable count per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param robust_count the count value.
     */
    virtual XrlCmdError mld6igmp_0_1_get_vif_robust_count(
	// Input values,
	const string&	vif_name,
	// Output values,
	uint32_t&	robust_count) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const uint32_t*>::RefPtr
    Mld6Igmp01GetVifRobustCountRF;

    class Mld6Igmp01GetVifRobustCountCB {
        Mld6Igmp01GetVifRobustCountRF cb;

    public:
        operator const Mld6Igmp01GetVifRobustCountRF& () const { return cb; }
        const Mld6Igmp01GetVifRobustCountRF& operator ->() const { return cb; }
        Mld6Igmp01GetVifRobustCountCB(const Mld6Igmp01GetVifRobustCountRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const uint32_t& arg_robust_count) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_robust_count);
        }
    };

    struct Mld6Igmp01GetVifRobustCountRsp :
      public Mld6Igmp01GetVifRobustCountCB {
        struct args_str {
            uint32_t robust_count;
        };

    private:
        args_str args;

    public:
        Mld6Igmp01GetVifRobustCountRsp(const Mld6Igmp01GetVifRobustCountRF& cb)
          : Mld6Igmp01GetVifRobustCountCB(cb) { }

        void respond() const {
            Mld6Igmp01GetVifRobustCountCB::
            respond(args.robust_count);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_mld6igmp_0_1_get_vif_robust_count
       (
	const string&	vif_name,
	Mld6Igmp01GetVifRobustCountCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the Robustness Variable count per interface.
     *
     *  @param vif_name the name of the vif to apply to.
     *
     *  @param robust_count the count value.
     */
    virtual XrlCmdError mld6igmp_0_1_set_vif_robust_count(
	// Input values,
	const string&	vif_name,
	const uint32_t&	robust_count) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01SetVifRobustCountRF;

    class Mld6Igmp01SetVifRobustCountCB {
        Mld6Igmp01SetVifRobustCountRF cb;

    public:
        operator const Mld6Igmp01SetVifRobustCountRF& () const { return cb; }
        const Mld6Igmp01SetVifRobustCountRF& operator ->() const { return cb; }
        Mld6Igmp01SetVifRobustCountCB(const Mld6Igmp01SetVifRobustCountRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01SetVifRobustCountRsp :
      public Mld6Igmp01SetVifRobustCountCB {
        Mld6Igmp01SetVifRobustCountRsp(const Mld6Igmp01SetVifRobustCountRF& cb)
          : Mld6Igmp01SetVifRobustCountCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_set_vif_robust_count
       (
	const string&	vif_name,
	const uint32_t&	robust_count,
	Mld6Igmp01SetVifRobustCountCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset the Robustness Variable count per interface to its default value.
     *
     *  @param vif_name the name of the vif to apply to.
     */
    virtual XrlCmdError mld6igmp_0_1_reset_vif_robust_count(
	// Input values,
	const string&	vif_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01ResetVifRobustCountRF;

    class Mld6Igmp01ResetVifRobustCountCB {
        Mld6Igmp01ResetVifRobustCountRF cb;

    public:
        operator const Mld6Igmp01ResetVifRobustCountRF& () const { return cb; }
        const Mld6Igmp01ResetVifRobustCountRF& operator ->() const { return cb; }
        Mld6Igmp01ResetVifRobustCountCB(const Mld6Igmp01ResetVifRobustCountRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01ResetVifRobustCountRsp :
      public Mld6Igmp01ResetVifRobustCountCB {
        Mld6Igmp01ResetVifRobustCountRsp(const Mld6Igmp01ResetVifRobustCountRF& cb)
          : Mld6Igmp01ResetVifRobustCountCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_reset_vif_robust_count
       (
	const string&	vif_name,
	Mld6Igmp01ResetVifRobustCountCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable the MLD6IGMP trace log for all operations.
     *
     *  @param enable if true, then enable the trace log, otherwise disable it.
     */
    virtual XrlCmdError mld6igmp_0_1_log_trace_all(
	// Input values,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01LogTraceAllRF;

    class Mld6Igmp01LogTraceAllCB {
        Mld6Igmp01LogTraceAllRF cb;

    public:
        operator const Mld6Igmp01LogTraceAllRF& () const { return cb; }
        const Mld6Igmp01LogTraceAllRF& operator ->() const { return cb; }
        Mld6Igmp01LogTraceAllCB(const Mld6Igmp01LogTraceAllRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01LogTraceAllRsp :
      public Mld6Igmp01LogTraceAllCB {
        Mld6Igmp01LogTraceAllRsp(const Mld6Igmp01LogTraceAllRF& cb)
          : Mld6Igmp01LogTraceAllCB(cb) { }

    };

    virtual void async_mld6igmp_0_1_log_trace_all
       (
	const bool&	enable,
	Mld6Igmp01LogTraceAllCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add/delete a client protocol in the MLD/IGMP protocol.
     *
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *
     *  @param protocol_name the name of the protocol to add/delete.
     *
     *  @param protocol_id the ID of the protocol to add/delete (both sides
     *  must agree on the particular values).
     *
     *  @param vif_name the name of the vif the protocol add/delete to apply
     *  to.
     *
     *  @param vif_index the index of the vif the protocol add/delete to apply
     *  to. The added protocol will receive Join/Leave membership information
     *  about same-LAN members for the particular vif.
     */
    virtual XrlCmdError mld6igmp_0_1_add_protocol4(
	// Input values,
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01AddProtocol4RF;

    class Mld6Igmp01AddProtocol4CB {
        Mld6Igmp01AddProtocol4RF cb;

    public:
        operator const Mld6Igmp01AddProtocol4RF& () const { return cb; }
        const Mld6Igmp01AddProtocol4RF& operator ->() const { return cb; }
        Mld6Igmp01AddProtocol4CB(const Mld6Igmp01AddProtocol4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01AddProtocol4Rsp :
      public Mld6Igmp01AddProtocol4CB {
        Mld6Igmp01AddProtocol4Rsp(const Mld6Igmp01AddProtocol4RF& cb)
          : Mld6Igmp01AddProtocol4CB(cb) { }

    };

    virtual void async_mld6igmp_0_1_add_protocol4
       (
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index,
	Mld6Igmp01AddProtocol4CB);
#endif

    virtual XrlCmdError mld6igmp_0_1_add_protocol6(
	// Input values,
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01AddProtocol6RF;

    class Mld6Igmp01AddProtocol6CB {
        Mld6Igmp01AddProtocol6RF cb;

    public:
        operator const Mld6Igmp01AddProtocol6RF& () const { return cb; }
        const Mld6Igmp01AddProtocol6RF& operator ->() const { return cb; }
        Mld6Igmp01AddProtocol6CB(const Mld6Igmp01AddProtocol6RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01AddProtocol6Rsp :
      public Mld6Igmp01AddProtocol6CB {
        Mld6Igmp01AddProtocol6Rsp(const Mld6Igmp01AddProtocol6RF& cb)
          : Mld6Igmp01AddProtocol6CB(cb) { }

    };

    virtual void async_mld6igmp_0_1_add_protocol6
       (
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index,
	Mld6Igmp01AddProtocol6CB);
#endif

    virtual XrlCmdError mld6igmp_0_1_delete_protocol4(
	// Input values,
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01DeleteProtocol4RF;

    class Mld6Igmp01DeleteProtocol4CB {
        Mld6Igmp01DeleteProtocol4RF cb;

    public:
        operator const Mld6Igmp01DeleteProtocol4RF& () const { return cb; }
        const Mld6Igmp01DeleteProtocol4RF& operator ->() const { return cb; }
        Mld6Igmp01DeleteProtocol4CB(const Mld6Igmp01DeleteProtocol4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01DeleteProtocol4Rsp :
      public Mld6Igmp01DeleteProtocol4CB {
        Mld6Igmp01DeleteProtocol4Rsp(const Mld6Igmp01DeleteProtocol4RF& cb)
          : Mld6Igmp01DeleteProtocol4CB(cb) { }

    };

    virtual void async_mld6igmp_0_1_delete_protocol4
       (
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index,
	Mld6Igmp01DeleteProtocol4CB);
#endif

    virtual XrlCmdError mld6igmp_0_1_delete_protocol6(
	// Input values,
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Mld6Igmp01DeleteProtocol6RF;

    class Mld6Igmp01DeleteProtocol6CB {
        Mld6Igmp01DeleteProtocol6RF cb;

    public:
        operator const Mld6Igmp01DeleteProtocol6RF& () const { return cb; }
        const Mld6Igmp01DeleteProtocol6RF& operator ->() const { return cb; }
        Mld6Igmp01DeleteProtocol6CB(const Mld6Igmp01DeleteProtocol6RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Mld6Igmp01DeleteProtocol6Rsp :
      public Mld6Igmp01DeleteProtocol6CB {
        Mld6Igmp01DeleteProtocol6Rsp(const Mld6Igmp01DeleteProtocol6RF& cb)
          : Mld6Igmp01DeleteProtocol6CB(cb) { }

    };

    virtual void async_mld6igmp_0_1_delete_protocol6
       (
	const string&	xrl_sender_name,
	const string&	protocol_name,
	const uint32_t&	protocol_id,
	const string&	vif_name,
	const uint32_t&	vif_index,
	Mld6Igmp01DeleteProtocol6CB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_processor_0_1_process_command(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_processor_0_1_process_command
       (const XrlCmdError &e,
	const string* arg_ret_processor_name,
	const string* arg_ret_cli_term_name,
	const uint32_t* arg_ret_cli_session_id,
	const string* arg_ret_command_output,
        XrlRespCallback);
#endif

    XrlCmdRT handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_finder_event_observer_0_1_xrl_target_birth
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_finder_event_observer_0_1_xrl_target_death
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_raw_packet4_client_0_1_recv(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_raw_packet4_client_0_1_recv
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_raw_packet6_client_0_1_recv(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_raw_packet6_client_0_1_recv
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_enable_vif(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_enable_vif
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_start_vif(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_start_vif
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_stop_vif(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_stop_vif
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_enable_all_vifs(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_enable_all_vifs
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_start_all_vifs(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_start_all_vifs
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_stop_all_vifs(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_stop_all_vifs
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_enable_mld6igmp(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_enable_mld6igmp
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_start_mld6igmp(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_start_mld6igmp
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_stop_mld6igmp(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_stop_mld6igmp
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_enable_cli(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_enable_cli
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_start_cli(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_start_cli
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_stop_cli(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_stop_cli
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_get_vif_proto_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_get_vif_proto_version
       (const XrlCmdError &e,
	const uint32_t* arg_proto_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_set_vif_proto_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_set_vif_proto_version
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_reset_vif_proto_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_reset_vif_proto_version
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_get_vif_ip_router_alert_option_check(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_get_vif_ip_router_alert_option_check
       (const XrlCmdError &e,
	const bool* arg_enabled,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_set_vif_ip_router_alert_option_check(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_set_vif_ip_router_alert_option_check
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_reset_vif_ip_router_alert_option_check(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_reset_vif_ip_router_alert_option_check
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_get_vif_query_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_get_vif_query_interval
       (const XrlCmdError &e,
	const uint32_t* arg_interval_sec,
	const uint32_t* arg_interval_usec,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_set_vif_query_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_set_vif_query_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_reset_vif_query_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_reset_vif_query_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_get_vif_query_last_member_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_get_vif_query_last_member_interval
       (const XrlCmdError &e,
	const uint32_t* arg_interval_sec,
	const uint32_t* arg_interval_usec,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_set_vif_query_last_member_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_set_vif_query_last_member_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_reset_vif_query_last_member_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_reset_vif_query_last_member_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_get_vif_query_response_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_get_vif_query_response_interval
       (const XrlCmdError &e,
	const uint32_t* arg_interval_sec,
	const uint32_t* arg_interval_usec,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_set_vif_query_response_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_set_vif_query_response_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_reset_vif_query_response_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_reset_vif_query_response_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_get_vif_robust_count(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_get_vif_robust_count
       (const XrlCmdError &e,
	const uint32_t* arg_robust_count,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_set_vif_robust_count(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_set_vif_robust_count
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_reset_vif_robust_count(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_reset_vif_robust_count
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_log_trace_all(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_log_trace_all
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_add_protocol4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_add_protocol4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_add_protocol6(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_add_protocol6
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_delete_protocol4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_delete_protocol4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_mld6igmp_0_1_delete_protocol6(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_mld6igmp_0_1_delete_protocol6
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlMld6igmpTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_MLD6IGMP_BASE_HH__
