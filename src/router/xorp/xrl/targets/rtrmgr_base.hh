/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/rtrmgr_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_RTRMGR_BASE_HH__
#define __XRL_TARGETS_RTRMGR_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlRtrmgrTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlRtrmgrTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlRtrmgrTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlRtrmgrTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "rtrmgr/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_get_pid(
	// Output values,
	uint32_t&	pid) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const uint32_t*>::RefPtr
    Rtrmgr01GetPidRF;

    class Rtrmgr01GetPidCB {
        Rtrmgr01GetPidRF cb;

    public:
        operator const Rtrmgr01GetPidRF& () const { return cb; }
        const Rtrmgr01GetPidRF& operator ->() const { return cb; }
        Rtrmgr01GetPidCB(const Rtrmgr01GetPidRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const uint32_t& arg_pid) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_pid);
        }
    };

    struct Rtrmgr01GetPidRsp :
      public Rtrmgr01GetPidCB {
        struct args_str {
            uint32_t pid;
        };

    private:
        args_str args;

    public:
        Rtrmgr01GetPidRsp(const Rtrmgr01GetPidRF& cb)
          : Rtrmgr01GetPidCB(cb) { }

        void respond() const {
            Rtrmgr01GetPidCB::
            respond(args.pid);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_rtrmgr_0_1_get_pid
       (
	Rtrmgr01GetPidCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Register a user and client process with the rtrmgr.
     *
     *  @param clientname name of xrl entity supporting rtrmgr_client.xif
     *  methods.
     */
    virtual XrlCmdError rtrmgr_0_1_register_client(
	// Input values,
	const uint32_t&	userid,
	const string&	clientname,
	// Output values,
	string&	filename,
	uint32_t&	pid,
	uint32_t&	clientid) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback4<void, const XrlCmdError &,
	const string*,
	const uint32_t*,
	const uint32_t*>::RefPtr
    Rtrmgr01RegisterClientRF;

    class Rtrmgr01RegisterClientCB {
        Rtrmgr01RegisterClientRF cb;

    public:
        operator const Rtrmgr01RegisterClientRF& () const { return cb; }
        const Rtrmgr01RegisterClientRF& operator ->() const { return cb; }
        Rtrmgr01RegisterClientCB(const Rtrmgr01RegisterClientRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL, NULL); }

        void respond(const string& arg_filename,
                     const uint32_t& arg_pid,
                     const uint32_t& arg_clientid) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_filename,
                         &arg_pid,
                         &arg_clientid);
        }
    };

    struct Rtrmgr01RegisterClientRsp :
      public Rtrmgr01RegisterClientCB {
        struct args_str {
            string filename;
            uint32_t pid;
            uint32_t clientid;
        };

    private:
        args_str args;

    public:
        Rtrmgr01RegisterClientRsp(const Rtrmgr01RegisterClientRF& cb)
          : Rtrmgr01RegisterClientCB(cb) { }

        void respond() const {
            Rtrmgr01RegisterClientCB::
            respond(args.filename,
                        args.pid,
                        args.clientid);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_rtrmgr_0_1_register_client
       (
	const uint32_t&	userid,
	const string&	clientname,
	Rtrmgr01RegisterClientCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_unregister_client(
	// Input values,
	const string&	token) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01UnregisterClientRF;

    class Rtrmgr01UnregisterClientCB {
        Rtrmgr01UnregisterClientRF cb;

    public:
        operator const Rtrmgr01UnregisterClientRF& () const { return cb; }
        const Rtrmgr01UnregisterClientRF& operator ->() const { return cb; }
        Rtrmgr01UnregisterClientCB(const Rtrmgr01UnregisterClientRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01UnregisterClientRsp :
      public Rtrmgr01UnregisterClientCB {
        Rtrmgr01UnregisterClientRsp(const Rtrmgr01UnregisterClientRF& cb)
          : Rtrmgr01UnregisterClientCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_unregister_client
       (
	const string&	token,
	Rtrmgr01UnregisterClientCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_authenticate_client(
	// Input values,
	const uint32_t&	userid,
	const string&	clientname,
	const string&	token) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01AuthenticateClientRF;

    class Rtrmgr01AuthenticateClientCB {
        Rtrmgr01AuthenticateClientRF cb;

    public:
        operator const Rtrmgr01AuthenticateClientRF& () const { return cb; }
        const Rtrmgr01AuthenticateClientRF& operator ->() const { return cb; }
        Rtrmgr01AuthenticateClientCB(const Rtrmgr01AuthenticateClientRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01AuthenticateClientRsp :
      public Rtrmgr01AuthenticateClientCB {
        Rtrmgr01AuthenticateClientRsp(const Rtrmgr01AuthenticateClientRF& cb)
          : Rtrmgr01AuthenticateClientCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_authenticate_client
       (
	const uint32_t&	userid,
	const string&	clientname,
	const string&	token,
	Rtrmgr01AuthenticateClientCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_enter_config_mode(
	// Input values,
	const string&	token,
	const bool&	exclusive) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01EnterConfigModeRF;

    class Rtrmgr01EnterConfigModeCB {
        Rtrmgr01EnterConfigModeRF cb;

    public:
        operator const Rtrmgr01EnterConfigModeRF& () const { return cb; }
        const Rtrmgr01EnterConfigModeRF& operator ->() const { return cb; }
        Rtrmgr01EnterConfigModeCB(const Rtrmgr01EnterConfigModeRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01EnterConfigModeRsp :
      public Rtrmgr01EnterConfigModeCB {
        Rtrmgr01EnterConfigModeRsp(const Rtrmgr01EnterConfigModeRF& cb)
          : Rtrmgr01EnterConfigModeCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_enter_config_mode
       (
	const string&	token,
	const bool&	exclusive,
	Rtrmgr01EnterConfigModeCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_leave_config_mode(
	// Input values,
	const string&	token) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01LeaveConfigModeRF;

    class Rtrmgr01LeaveConfigModeCB {
        Rtrmgr01LeaveConfigModeRF cb;

    public:
        operator const Rtrmgr01LeaveConfigModeRF& () const { return cb; }
        const Rtrmgr01LeaveConfigModeRF& operator ->() const { return cb; }
        Rtrmgr01LeaveConfigModeCB(const Rtrmgr01LeaveConfigModeRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01LeaveConfigModeRsp :
      public Rtrmgr01LeaveConfigModeCB {
        Rtrmgr01LeaveConfigModeRsp(const Rtrmgr01LeaveConfigModeRF& cb)
          : Rtrmgr01LeaveConfigModeCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_leave_config_mode
       (
	const string&	token,
	Rtrmgr01LeaveConfigModeCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_get_config_users(
	// Input values,
	const string&	token,
	// Output values,
	XrlAtomList&	users) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const XrlAtomList*>::RefPtr
    Rtrmgr01GetConfigUsersRF;

    class Rtrmgr01GetConfigUsersCB {
        Rtrmgr01GetConfigUsersRF cb;

    public:
        operator const Rtrmgr01GetConfigUsersRF& () const { return cb; }
        const Rtrmgr01GetConfigUsersRF& operator ->() const { return cb; }
        Rtrmgr01GetConfigUsersCB(const Rtrmgr01GetConfigUsersRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const XrlAtomList& arg_users) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_users);
        }
    };

    struct Rtrmgr01GetConfigUsersRsp :
      public Rtrmgr01GetConfigUsersCB {
        struct args_str {
            XrlAtomList users;
        };

    private:
        args_str args;

    public:
        Rtrmgr01GetConfigUsersRsp(const Rtrmgr01GetConfigUsersRF& cb)
          : Rtrmgr01GetConfigUsersCB(cb) { }

        void respond() const {
            Rtrmgr01GetConfigUsersCB::
            respond(args.users);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_rtrmgr_0_1_get_config_users
       (
	const string&	token,
	Rtrmgr01GetConfigUsersCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_get_running_config(
	// Input values,
	const string&	token,
	// Output values,
	bool&	ready,
	string&	config) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const bool*,
	const string*>::RefPtr
    Rtrmgr01GetRunningConfigRF;

    class Rtrmgr01GetRunningConfigCB {
        Rtrmgr01GetRunningConfigRF cb;

    public:
        operator const Rtrmgr01GetRunningConfigRF& () const { return cb; }
        const Rtrmgr01GetRunningConfigRF& operator ->() const { return cb; }
        Rtrmgr01GetRunningConfigCB(const Rtrmgr01GetRunningConfigRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const bool& arg_ready,
                     const string& arg_config) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_ready,
                         &arg_config);
        }
    };

    struct Rtrmgr01GetRunningConfigRsp :
      public Rtrmgr01GetRunningConfigCB {
        struct args_str {
            bool ready;
            string config;
        };

    private:
        args_str args;

    public:
        Rtrmgr01GetRunningConfigRsp(const Rtrmgr01GetRunningConfigRF& cb)
          : Rtrmgr01GetRunningConfigCB(cb) { }

        void respond() const {
            Rtrmgr01GetRunningConfigCB::
            respond(args.ready,
                        args.config);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_rtrmgr_0_1_get_running_config
       (
	const string&	token,
	Rtrmgr01GetRunningConfigCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_apply_config_change(
	// Input values,
	const string&	token,
	const string&	target,
	const string&	deltas,
	const string&	deletions) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01ApplyConfigChangeRF;

    class Rtrmgr01ApplyConfigChangeCB {
        Rtrmgr01ApplyConfigChangeRF cb;

    public:
        operator const Rtrmgr01ApplyConfigChangeRF& () const { return cb; }
        const Rtrmgr01ApplyConfigChangeRF& operator ->() const { return cb; }
        Rtrmgr01ApplyConfigChangeCB(const Rtrmgr01ApplyConfigChangeRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01ApplyConfigChangeRsp :
      public Rtrmgr01ApplyConfigChangeCB {
        Rtrmgr01ApplyConfigChangeRsp(const Rtrmgr01ApplyConfigChangeRF& cb)
          : Rtrmgr01ApplyConfigChangeCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_apply_config_change
       (
	const string&	token,
	const string&	target,
	const string&	deltas,
	const string&	deletions,
	Rtrmgr01ApplyConfigChangeCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_lock_config(
	// Input values,
	const string&	token,
	const uint32_t&	timeout,
	// Output values,
	bool&	success,
	uint32_t&	holder) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const bool*,
	const uint32_t*>::RefPtr
    Rtrmgr01LockConfigRF;

    class Rtrmgr01LockConfigCB {
        Rtrmgr01LockConfigRF cb;

    public:
        operator const Rtrmgr01LockConfigRF& () const { return cb; }
        const Rtrmgr01LockConfigRF& operator ->() const { return cb; }
        Rtrmgr01LockConfigCB(const Rtrmgr01LockConfigRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const bool& arg_success,
                     const uint32_t& arg_holder) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_success,
                         &arg_holder);
        }
    };

    struct Rtrmgr01LockConfigRsp :
      public Rtrmgr01LockConfigCB {
        struct args_str {
            bool success;
            uint32_t holder;
        };

    private:
        args_str args;

    public:
        Rtrmgr01LockConfigRsp(const Rtrmgr01LockConfigRF& cb)
          : Rtrmgr01LockConfigCB(cb) { }

        void respond() const {
            Rtrmgr01LockConfigCB::
            respond(args.success,
                        args.holder);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_rtrmgr_0_1_lock_config
       (
	const string&	token,
	const uint32_t&	timeout,
	Rtrmgr01LockConfigCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_unlock_config(
	// Input values,
	const string&	token) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01UnlockConfigRF;

    class Rtrmgr01UnlockConfigCB {
        Rtrmgr01UnlockConfigRF cb;

    public:
        operator const Rtrmgr01UnlockConfigRF& () const { return cb; }
        const Rtrmgr01UnlockConfigRF& operator ->() const { return cb; }
        Rtrmgr01UnlockConfigCB(const Rtrmgr01UnlockConfigRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01UnlockConfigRsp :
      public Rtrmgr01UnlockConfigCB {
        Rtrmgr01UnlockConfigRsp(const Rtrmgr01UnlockConfigRF& cb)
          : Rtrmgr01UnlockConfigCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_unlock_config
       (
	const string&	token,
	Rtrmgr01UnlockConfigCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_lock_node(
	// Input values,
	const string&	token,
	const string&	node,
	const uint32_t&	timeout,
	// Output values,
	bool&	success,
	uint32_t&	holder) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const bool*,
	const uint32_t*>::RefPtr
    Rtrmgr01LockNodeRF;

    class Rtrmgr01LockNodeCB {
        Rtrmgr01LockNodeRF cb;

    public:
        operator const Rtrmgr01LockNodeRF& () const { return cb; }
        const Rtrmgr01LockNodeRF& operator ->() const { return cb; }
        Rtrmgr01LockNodeCB(const Rtrmgr01LockNodeRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const bool& arg_success,
                     const uint32_t& arg_holder) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_success,
                         &arg_holder);
        }
    };

    struct Rtrmgr01LockNodeRsp :
      public Rtrmgr01LockNodeCB {
        struct args_str {
            bool success;
            uint32_t holder;
        };

    private:
        args_str args;

    public:
        Rtrmgr01LockNodeRsp(const Rtrmgr01LockNodeRF& cb)
          : Rtrmgr01LockNodeCB(cb) { }

        void respond() const {
            Rtrmgr01LockNodeCB::
            respond(args.success,
                        args.holder);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_rtrmgr_0_1_lock_node
       (
	const string&	token,
	const string&	node,
	const uint32_t&	timeout,
	Rtrmgr01LockNodeCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_unlock_node(
	// Input values,
	const string&	token,
	const string&	node) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01UnlockNodeRF;

    class Rtrmgr01UnlockNodeCB {
        Rtrmgr01UnlockNodeRF cb;

    public:
        operator const Rtrmgr01UnlockNodeRF& () const { return cb; }
        const Rtrmgr01UnlockNodeRF& operator ->() const { return cb; }
        Rtrmgr01UnlockNodeCB(const Rtrmgr01UnlockNodeRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01UnlockNodeRsp :
      public Rtrmgr01UnlockNodeCB {
        Rtrmgr01UnlockNodeRsp(const Rtrmgr01UnlockNodeRF& cb)
          : Rtrmgr01UnlockNodeCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_unlock_node
       (
	const string&	token,
	const string&	node,
	Rtrmgr01UnlockNodeCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_save_config(
	// Input values,
	const string&	token,
	const string&	target,
	const string&	filename) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01SaveConfigRF;

    class Rtrmgr01SaveConfigCB {
        Rtrmgr01SaveConfigRF cb;

    public:
        operator const Rtrmgr01SaveConfigRF& () const { return cb; }
        const Rtrmgr01SaveConfigRF& operator ->() const { return cb; }
        Rtrmgr01SaveConfigCB(const Rtrmgr01SaveConfigRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01SaveConfigRsp :
      public Rtrmgr01SaveConfigCB {
        Rtrmgr01SaveConfigRsp(const Rtrmgr01SaveConfigRF& cb)
          : Rtrmgr01SaveConfigCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_save_config
       (
	const string&	token,
	const string&	target,
	const string&	filename,
	Rtrmgr01SaveConfigCB);
#endif

    virtual XrlCmdError rtrmgr_0_1_load_config(
	// Input values,
	const string&	token,
	const string&	target,
	const string&	filename) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01LoadConfigRF;

    class Rtrmgr01LoadConfigCB {
        Rtrmgr01LoadConfigRF cb;

    public:
        operator const Rtrmgr01LoadConfigRF& () const { return cb; }
        const Rtrmgr01LoadConfigRF& operator ->() const { return cb; }
        Rtrmgr01LoadConfigCB(const Rtrmgr01LoadConfigRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01LoadConfigRsp :
      public Rtrmgr01LoadConfigCB {
        Rtrmgr01LoadConfigRsp(const Rtrmgr01LoadConfigRF& cb)
          : Rtrmgr01LoadConfigCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_load_config
       (
	const string&	token,
	const string&	target,
	const string&	filename,
	Rtrmgr01LoadConfigCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the name of the directory with the configuration files.
     *
     *  @param config_directory the name of the directory with the
     *  configuration files.
     */
    virtual XrlCmdError rtrmgr_0_1_set_config_directory(
	// Input values,
	const string&	config_directory) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Rtrmgr01SetConfigDirectoryRF;

    class Rtrmgr01SetConfigDirectoryCB {
        Rtrmgr01SetConfigDirectoryRF cb;

    public:
        operator const Rtrmgr01SetConfigDirectoryRF& () const { return cb; }
        const Rtrmgr01SetConfigDirectoryRF& operator ->() const { return cb; }
        Rtrmgr01SetConfigDirectoryCB(const Rtrmgr01SetConfigDirectoryRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Rtrmgr01SetConfigDirectoryRsp :
      public Rtrmgr01SetConfigDirectoryCB {
        Rtrmgr01SetConfigDirectoryRsp(const Rtrmgr01SetConfigDirectoryRF& cb)
          : Rtrmgr01SetConfigDirectoryCB(cb) { }

    };

    virtual void async_rtrmgr_0_1_set_config_directory
       (
	const string&	config_directory,
	Rtrmgr01SetConfigDirectoryCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Announce target birth to observer.
     *
     *  @param target_class the target class name.
     *
     *  @param target_instance the target instance name.
     */
    virtual XrlCmdError finder_event_observer_0_1_xrl_target_birth(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    FinderEventObserver01XrlTargetBirthRF;

    class FinderEventObserver01XrlTargetBirthCB {
        FinderEventObserver01XrlTargetBirthRF cb;

    public:
        operator const FinderEventObserver01XrlTargetBirthRF& () const { return cb; }
        const FinderEventObserver01XrlTargetBirthRF& operator ->() const { return cb; }
        FinderEventObserver01XrlTargetBirthCB(const FinderEventObserver01XrlTargetBirthRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct FinderEventObserver01XrlTargetBirthRsp :
      public FinderEventObserver01XrlTargetBirthCB {
        FinderEventObserver01XrlTargetBirthRsp(const FinderEventObserver01XrlTargetBirthRF& cb)
          : FinderEventObserver01XrlTargetBirthCB(cb) { }

    };

    virtual void async_finder_event_observer_0_1_xrl_target_birth
       (
	const string&	target_class,
	const string&	target_instance,
	FinderEventObserver01XrlTargetBirthCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Announce target death to observer.
     *
     *  @param target_class the target class name.
     *
     *  @param target_instance the target instance name.
     */
    virtual XrlCmdError finder_event_observer_0_1_xrl_target_death(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    FinderEventObserver01XrlTargetDeathRF;

    class FinderEventObserver01XrlTargetDeathCB {
        FinderEventObserver01XrlTargetDeathRF cb;

    public:
        operator const FinderEventObserver01XrlTargetDeathRF& () const { return cb; }
        const FinderEventObserver01XrlTargetDeathRF& operator ->() const { return cb; }
        FinderEventObserver01XrlTargetDeathCB(const FinderEventObserver01XrlTargetDeathRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct FinderEventObserver01XrlTargetDeathRsp :
      public FinderEventObserver01XrlTargetDeathCB {
        FinderEventObserver01XrlTargetDeathRsp(const FinderEventObserver01XrlTargetDeathRF& cb)
          : FinderEventObserver01XrlTargetDeathCB(cb) { }

    };

    virtual void async_finder_event_observer_0_1_xrl_target_death
       (
	const string&	target_class,
	const string&	target_instance,
	FinderEventObserver01XrlTargetDeathCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_get_pid(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_get_pid
       (const XrlCmdError &e,
	const uint32_t* arg_pid,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_register_client(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_register_client
       (const XrlCmdError &e,
	const string* arg_filename,
	const uint32_t* arg_pid,
	const uint32_t* arg_clientid,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_unregister_client(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_unregister_client
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_authenticate_client(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_authenticate_client
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_enter_config_mode(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_enter_config_mode
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_leave_config_mode(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_leave_config_mode
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_get_config_users(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_get_config_users
       (const XrlCmdError &e,
	const XrlAtomList* arg_users,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_get_running_config(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_get_running_config
       (const XrlCmdError &e,
	const bool* arg_ready,
	const string* arg_config,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_apply_config_change(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_apply_config_change
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_lock_config(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_lock_config
       (const XrlCmdError &e,
	const bool* arg_success,
	const uint32_t* arg_holder,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_unlock_config(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_unlock_config
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_lock_node(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_lock_node
       (const XrlCmdError &e,
	const bool* arg_success,
	const uint32_t* arg_holder,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_unlock_node(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_unlock_node
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_save_config(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_save_config
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_load_config(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_load_config
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_rtrmgr_0_1_set_config_directory(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_rtrmgr_0_1_set_config_directory
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_finder_event_observer_0_1_xrl_target_birth
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_finder_event_observer_0_1_xrl_target_death
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlRtrmgrTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_RTRMGR_BASE_HH__
