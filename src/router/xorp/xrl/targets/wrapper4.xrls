/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/wrapper4.xrls
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

/**
 *  Get name of Xrl Target
 */
finder://wrapper4/common/0.1/get_target_name->name:txt

/**
 *  Get version string from Xrl Target
 */
finder://wrapper4/common/0.1/get_version->version:txt

/**
 *  Get status of Xrl Target
 */
finder://wrapper4/common/0.1/get_status->status:u32&reason:txt

/**
 *  Request clean shutdown of Xrl Target
 */
finder://wrapper4/common/0.1/shutdown

/**
 *  Request a startup of Xrl Target
 */
finder://wrapper4/common/0.1/startup

/**
 *  Announce target birth to observer.
 *
 *  @param target_class the target class name.
 *
 *  @param target_instance the target instance name.
 */
finder://wrapper4/finder_event_observer/0.1/xrl_target_birth?target_class:txt&target_instance:txt

/**
 *  Announce target death to observer.
 *
 *  @param target_class the target class name.
 *
 *  @param target_instance the target instance name.
 */
finder://wrapper4/finder_event_observer/0.1/xrl_target_death?target_class:txt&target_instance:txt

/**
 *  Method invoked by target implementing socket4/0.1 when a packet arrives
 *  from an IPv4 source.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 *
 *  @param if_name the interface name the packet arrived on, if known. If
 *  unknown, then it is an empty string.
 *
 *  @param vif_name the vif name the packet arrived on, if known. If unknown,
 *  then it is an empty string.
 *
 *  @param src_host the originating host.
 *
 *  @param src_port the originating IP port.
 *
 *  @param data the data received.
 */
finder://wrapper4/socket4_user/0.1/recv_event?sockid:txt&if_name:txt&vif_name:txt&src_host:ipv4&src_port:u32&data:binary

/**
 *  Method invoked by target implementing socket4/0.1 when a connection request
 *  is received from an IPv4 source. It applies only to TCP sockets.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 *
 *  @param src_host the connecting host.
 *
 *  @param src_port the connecting IP port.
 *
 *  @param new_sockid the identifier associated with the new socket that has
 *  been created to handle the new connection.
 *
 *  @param accept if true, the connection request has been accepted, otherwise
 *  it has been rejected.
 */
finder://wrapper4/socket4_user/0.1/inbound_connect_event?sockid:txt&src_host:ipv4&src_port:u32&new_sockid:txt->accept:bool

/**
 *  Method invoked by target implementing socket4/0.1 when an outgoing
 *  connection request originated by the local host is completed. It applies
 *  only to TCP sockets. Note that if the connection failed, the error_event
 *  will be dispatched instead.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 */
finder://wrapper4/socket4_user/0.1/outgoing_connect_event?sockid:txt

/**
 *  Method invoked by target implementing socket4/0.1 when an error occurs.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 *
 *  @param error a textual description of the error.
 *
 *  @param fatal indication of whether socket is shutdown because of error.
 */
finder://wrapper4/socket4_user/0.1/error_event?sockid:txt&error:txt&fatal:bool

/**
 *  Method invoked by target implementing socket4/0.1 when the peer has closed
 *  the connection. It applies only to TCP sockets. Note that the socket itself
 *  is left open and must be explicitly closed.
 *
 *  @param sockid the identifier associated with socket where the event
 *  occurred.
 */
finder://wrapper4/socket4_user/0.1/disconnect_event?sockid:txt

/**
 *  Configure a policy filter.
 *
 *  @param filter the identifier of the filter to configure.
 *
 *  @param conf the configuration of the filter.
 */
finder://wrapper4/policy_backend/0.1/configure?filter:u32&conf:txt

/**
 *  Reset a policy filter.
 *
 *  @param filter the identifier of the filter to reset.
 */
finder://wrapper4/policy_backend/0.1/reset?filter:u32

/**
 *  Push all available routes through all filters for re-filtering.
 */
finder://wrapper4/policy_backend/0.1/push_routes

/**
 *  Start route redistribution for an IPv4 route.
 *
 *  @param network the route to advertise.
 *
 *  @param unicast whether the route is unicast.
 *
 *  @param multicast whether the route is multicast.
 *
 *  @param nexthop the nexthop of the route.
 *
 *  @param metric the metric of the route.
 *
 *  @param policytags the set of policy-tags associated with the route.
 */
finder://wrapper4/policy_redist4/0.1/add_route4?network:ipv4net&unicast:bool&multicast:bool&nexthop:ipv4&metric:u32&policytags:list

/**
 *  Terminate route redistribution for an IPv4 route.
 *
 *  @param network the route for which advertisements should cease.
 *
 *  @param unicast whether the route is unicast.
 *
 *  @param multicast whether the route is multicast.
 */
finder://wrapper4/policy_redist4/0.1/delete_route4?network:ipv4net&unicast:bool&multicast:bool

/**
 *  Enable profiling
 *
 *  @param pname profile variable
 */
finder://wrapper4/profile/0.1/enable?pname:txt

/**
 *  Disable profiling
 *
 *  @param pname profile variable
 */
finder://wrapper4/profile/0.1/disable?pname:txt

/**
 *  Get log entries.
 *
 *  @param pname profile variable
 *
 *  @param instance_name to send the profiling info to.
 */
finder://wrapper4/profile/0.1/get_entries?pname:txt&instance_name:txt

/**
 *  Clear the profiling entries
 *
 *  @param pname profile variable
 */
finder://wrapper4/profile/0.1/clear?pname:txt

/**
 *  List all the profiling variables registered with this target.
 */
finder://wrapper4/profile/0.1/list->info:txt

/**
 *  Get admin distance.
 */
finder://wrapper4/wrapper4/0.1/get_admin_distance->admin:u32

/**
 *  Set admin distance.
 */
finder://wrapper4/wrapper4/0.1/set_admin_distance?admin:u32

/**
 *  Get Wrapper main address.
 */
finder://wrapper4/wrapper4/0.1/get_main_address->addr:ipv4

/**
 *  Set Wrapper main address.
 */
finder://wrapper4/wrapper4/0.1/set_main_address?addr:ipv4

/**
 *  Reset connection to xopr
 */
finder://wrapper4/wrapper4/0.1/restart

/**
 *  Get the list of interfaces currently configured for Wrapper. Return a list
 *  of u32 type values. Each value is an internal ID that can be used with the
 *  get_interface_info XRL.
 */
finder://wrapper4/wrapper4/0.1/get_interface_list->interfaces:list

/**
 *  Get the per-interface information for the given interface.
 *
 *  @param faceid interface ID returned by get_interface_list.
 *
 *  @param ifname the name of the interface.
 *
 *  @param vifname the name of the vif.
 *
 *  @param local_addr the IPv4 address where Wrapper is listening.
 *
 *  @param local_port the UDP port where Wrapper is listening.
 *
 *  @param all_nodes_addr the IPv4 address where Wrapper sends packets.
 *
 *  @param all_nodes_port the UDP port where Wrapper sends packets.
 */
finder://wrapper4/wrapper4/0.1/get_interface_info?faceid:u32->ifname:txt&vifname:txt&local_addr:ipv4&local_port:u32&all_nodes_addr:ipv4&all_nodes_port:u32

