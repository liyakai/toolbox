/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/rib_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "rib_base.hh"


const struct XrlRibTargetBase::handler_table XrlRibTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlRibTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlRibTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlRibTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlRibTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlRibTargetBase::handle_common_0_1_startup },
    { "finder_event_observer/0.1/xrl_target_birth",
      &XrlRibTargetBase::handle_finder_event_observer_0_1_xrl_target_birth },
    { "finder_event_observer/0.1/xrl_target_death",
      &XrlRibTargetBase::handle_finder_event_observer_0_1_xrl_target_death },
    { "policy_backend/0.1/configure",
      &XrlRibTargetBase::handle_policy_backend_0_1_configure },
    { "policy_backend/0.1/reset",
      &XrlRibTargetBase::handle_policy_backend_0_1_reset },
    { "policy_backend/0.1/push_routes",
      &XrlRibTargetBase::handle_policy_backend_0_1_push_routes },
    { "rib/0.1/enable_rib",
      &XrlRibTargetBase::handle_rib_0_1_enable_rib },
    { "rib/0.1/disable_rib",
      &XrlRibTargetBase::handle_rib_0_1_disable_rib },
    { "rib/0.1/start_rib",
      &XrlRibTargetBase::handle_rib_0_1_start_rib },
    { "rib/0.1/stop_rib",
      &XrlRibTargetBase::handle_rib_0_1_stop_rib },
    { "rib/0.1/make_errors_fatal",
      &XrlRibTargetBase::handle_rib_0_1_make_errors_fatal },
    { "rib/0.1/get_registered_protocols",
      &XrlRibTargetBase::handle_rib_0_1_get_registered_protocols },
    { "rib/0.1/add_igp_table4",
      &XrlRibTargetBase::handle_rib_0_1_add_igp_table4 },
    { "rib/0.1/delete_igp_table4",
      &XrlRibTargetBase::handle_rib_0_1_delete_igp_table4 },
    { "rib/0.1/add_egp_table4",
      &XrlRibTargetBase::handle_rib_0_1_add_egp_table4 },
    { "rib/0.1/delete_egp_table4",
      &XrlRibTargetBase::handle_rib_0_1_delete_egp_table4 },
    { "rib/0.1/add_route4",
      &XrlRibTargetBase::handle_rib_0_1_add_route4 },
    { "rib/0.1/replace_route4",
      &XrlRibTargetBase::handle_rib_0_1_replace_route4 },
    { "rib/0.1/delete_route4",
      &XrlRibTargetBase::handle_rib_0_1_delete_route4 },
    { "rib/0.1/add_interface_route4",
      &XrlRibTargetBase::handle_rib_0_1_add_interface_route4 },
    { "rib/0.1/replace_interface_route4",
      &XrlRibTargetBase::handle_rib_0_1_replace_interface_route4 },
    { "rib/0.1/lookup_route_by_dest4",
      &XrlRibTargetBase::handle_rib_0_1_lookup_route_by_dest4 },
    { "rib/0.1/new_vif",
      &XrlRibTargetBase::handle_rib_0_1_new_vif },
    { "rib/0.1/add_vif_addr4",
      &XrlRibTargetBase::handle_rib_0_1_add_vif_addr4 },
    { "rib/0.1/redist_enable4",
      &XrlRibTargetBase::handle_rib_0_1_redist_enable4 },
    { "rib/0.1/redist_disable4",
      &XrlRibTargetBase::handle_rib_0_1_redist_disable4 },
    { "rib/0.1/redist_transaction_enable4",
      &XrlRibTargetBase::handle_rib_0_1_redist_transaction_enable4 },
    { "rib/0.1/redist_transaction_disable4",
      &XrlRibTargetBase::handle_rib_0_1_redist_transaction_disable4 },
    { "rib/0.1/register_interest4",
      &XrlRibTargetBase::handle_rib_0_1_register_interest4 },
    { "rib/0.1/deregister_interest4",
      &XrlRibTargetBase::handle_rib_0_1_deregister_interest4 },
    { "rib/0.1/remove_policy_redist_tags",
      &XrlRibTargetBase::handle_rib_0_1_remove_policy_redist_tags },
    { "rib/0.1/insert_policy_redist_tags",
      &XrlRibTargetBase::handle_rib_0_1_insert_policy_redist_tags },
    { "rib/0.1/reset_policy_redist_tags",
      &XrlRibTargetBase::handle_rib_0_1_reset_policy_redist_tags },
    { "rib/0.1/get_protocol_admin_distances",
      &XrlRibTargetBase::handle_rib_0_1_get_protocol_admin_distances },
    { "rib/0.1/get_protocol_admin_distance",
      &XrlRibTargetBase::handle_rib_0_1_get_protocol_admin_distance },
    { "rib/0.1/set_protocol_admin_distance",
      &XrlRibTargetBase::handle_rib_0_1_set_protocol_admin_distance },
    { "rib/0.1/add_igp_table6",
      &XrlRibTargetBase::handle_rib_0_1_add_igp_table6 },
    { "rib/0.1/delete_igp_table6",
      &XrlRibTargetBase::handle_rib_0_1_delete_igp_table6 },
    { "rib/0.1/add_egp_table6",
      &XrlRibTargetBase::handle_rib_0_1_add_egp_table6 },
    { "rib/0.1/delete_egp_table6",
      &XrlRibTargetBase::handle_rib_0_1_delete_egp_table6 },
    { "rib/0.1/add_route6",
      &XrlRibTargetBase::handle_rib_0_1_add_route6 },
    { "rib/0.1/replace_route6",
      &XrlRibTargetBase::handle_rib_0_1_replace_route6 },
    { "rib/0.1/delete_route6",
      &XrlRibTargetBase::handle_rib_0_1_delete_route6 },
    { "rib/0.1/add_interface_route6",
      &XrlRibTargetBase::handle_rib_0_1_add_interface_route6 },
    { "rib/0.1/replace_interface_route6",
      &XrlRibTargetBase::handle_rib_0_1_replace_interface_route6 },
    { "rib/0.1/lookup_route_by_dest6",
      &XrlRibTargetBase::handle_rib_0_1_lookup_route_by_dest6 },
    { "rib/0.1/add_vif_addr6",
      &XrlRibTargetBase::handle_rib_0_1_add_vif_addr6 },
    { "rib/0.1/redist_enable6",
      &XrlRibTargetBase::handle_rib_0_1_redist_enable6 },
    { "rib/0.1/redist_disable6",
      &XrlRibTargetBase::handle_rib_0_1_redist_disable6 },
    { "rib/0.1/redist_transaction_enable6",
      &XrlRibTargetBase::handle_rib_0_1_redist_transaction_enable6 },
    { "rib/0.1/redist_transaction_disable6",
      &XrlRibTargetBase::handle_rib_0_1_redist_transaction_disable6 },
    { "rib/0.1/register_interest6",
      &XrlRibTargetBase::handle_rib_0_1_register_interest6 },
    { "rib/0.1/deregister_interest6",
      &XrlRibTargetBase::handle_rib_0_1_deregister_interest6 },
    { "profile/0.1/enable",
      &XrlRibTargetBase::handle_profile_0_1_enable },
    { "profile/0.1/disable",
      &XrlRibTargetBase::handle_profile_0_1_disable },
    { "profile/0.1/get_entries",
      &XrlRibTargetBase::handle_profile_0_1_get_entries },
    { "profile/0.1/clear",
      &XrlRibTargetBase::handle_profile_0_1_clear },
    { "profile/0.1/list",
      &XrlRibTargetBase::handle_profile_0_1_list },
};

const size_t XrlRibTargetBase::num_handlers = (sizeof(XrlRibTargetBase::handlers) / sizeof(XrlRibTargetBase::handlers[0]));


XrlRibTargetBase::XrlRibTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlRibTargetBase::~XrlRibTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlRibTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlRibTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlRibTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlRibTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlRibTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlRibTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_finder_event_observer_0_1_xrl_target_birth
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_finder_event_observer_0_1_xrl_target_birth(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetBirthCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_birth");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetBirthRF mycb =
	    callback(this, &XrlRibTargetBase::callback_finder_event_observer_0_1_xrl_target_birth, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_finder_event_observer_0_1_xrl_target_death
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_finder_event_observer_0_1_xrl_target_death(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetDeathCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_death");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetDeathRF mycb =
	    callback(this, &XrlRibTargetBase::callback_finder_event_observer_0_1_xrl_target_death, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_policy_backend_0_1_configure
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/configure", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_policy_backend_0_1_configure(
	const uint32_t&	arg_filter,
	const string&	arg_conf,
	PolicyBackend01ConfigureCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_configure(
        arg_filter,
        arg_conf);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_policy_backend_0_1_configure(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/configure");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ConfigureRF mycb =
	    callback(this, &XrlRibTargetBase::callback_policy_backend_0_1_configure, pxa_outputs);
	async_policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/configure", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_policy_backend_0_1_reset
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/reset", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_policy_backend_0_1_reset(
	const uint32_t&	arg_filter,
	PolicyBackend01ResetCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_reset(
        arg_filter);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_policy_backend_0_1_reset(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/reset");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ResetRF mycb =
	    callback(this, &XrlRibTargetBase::callback_policy_backend_0_1_reset, pxa_outputs);
	async_policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/reset", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_policy_backend_0_1_push_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/push_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_policy_backend_0_1_push_routes(
	PolicyBackend01PushRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_push_routes();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_policy_backend_0_1_push_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/push_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01PushRoutesRF mycb =
	    callback(this, &XrlRibTargetBase::callback_policy_backend_0_1_push_routes, pxa_outputs);
	async_policy_backend_0_1_push_routes( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_push_routes();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/push_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_enable_rib
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/enable_rib", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_enable_rib(
	Rib01EnableRibCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_enable_rib();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_enable_rib(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/enable_rib");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01EnableRibRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_enable_rib, pxa_outputs);
	async_rib_0_1_enable_rib( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_enable_rib();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/enable_rib", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_disable_rib
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/disable_rib", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_disable_rib(
	Rib01DisableRibCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_disable_rib();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_disable_rib(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/disable_rib");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DisableRibRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_disable_rib, pxa_outputs);
	async_rib_0_1_disable_rib( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_disable_rib();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/disable_rib", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_start_rib
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/start_rib", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_start_rib(
	Rib01StartRibCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_start_rib();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_start_rib(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/start_rib");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01StartRibRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_start_rib, pxa_outputs);
	async_rib_0_1_start_rib( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_start_rib();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/start_rib", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_stop_rib
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/stop_rib", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_stop_rib(
	Rib01StopRibCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_stop_rib();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_stop_rib(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/stop_rib");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01StopRibRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_stop_rib, pxa_outputs);
	async_rib_0_1_stop_rib( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_stop_rib();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/stop_rib", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_make_errors_fatal
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/make_errors_fatal", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_make_errors_fatal(
	Rib01MakeErrorsFatalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_make_errors_fatal();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_make_errors_fatal(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/make_errors_fatal");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01MakeErrorsFatalRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_make_errors_fatal, pxa_outputs);
	async_rib_0_1_make_errors_fatal( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_make_errors_fatal();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/make_errors_fatal", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_get_registered_protocols
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ipv4_unicast_protocols,
     const XrlAtomList* rarg_ipv6_unicast_protocols,
     const XrlAtomList* rarg_ipv4_multicast_protocols,
     const XrlAtomList* rarg_ipv6_multicast_protocols,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/get_registered_protocols", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ipv4_unicast_protocols", *rarg_ipv4_unicast_protocols);
	    out.add("ipv6_unicast_protocols", *rarg_ipv6_unicast_protocols);
	    out.add("ipv4_multicast_protocols", *rarg_ipv4_multicast_protocols);
	    out.add("ipv6_multicast_protocols", *rarg_ipv6_multicast_protocols);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_get_registered_protocols(
	const bool&	arg_ipv4,
	const bool&	arg_ipv6,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01GetRegisteredProtocolsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ipv4_unicast_protocols;
    XrlAtomList rarg_ipv6_unicast_protocols;
    XrlAtomList rarg_ipv4_multicast_protocols;
    XrlAtomList rarg_ipv6_multicast_protocols;
    XrlCmdError e = rib_0_1_get_registered_protocols(
        arg_ipv4,
        arg_ipv6,
        arg_unicast,
        arg_multicast,
        rarg_ipv4_unicast_protocols,
        rarg_ipv6_unicast_protocols,
        rarg_ipv4_multicast_protocols,
        rarg_ipv6_multicast_protocols);
    return c_b->dispatch(e,
        &rarg_ipv4_unicast_protocols,
        &rarg_ipv6_unicast_protocols,
        &rarg_ipv4_multicast_protocols,
        &rarg_ipv6_multicast_protocols);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_get_registered_protocols(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/get_registered_protocols");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01GetRegisteredProtocolsRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_get_registered_protocols, pxa_outputs);
	async_rib_0_1_get_registered_protocols(
	    xa_inputs.get(0, "ipv4").boolean(),
	    xa_inputs.get(1, "ipv6").boolean(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ipv4_unicast_protocols;
    XrlAtomList r_ipv6_unicast_protocols;
    XrlAtomList r_ipv4_multicast_protocols;
    XrlAtomList r_ipv6_multicast_protocols;
    try {
	XrlCmdError e = rib_0_1_get_registered_protocols(
	    xa_inputs.get(0, "ipv4").boolean(),
	    xa_inputs.get(1, "ipv6").boolean(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    r_ipv4_unicast_protocols,
	    r_ipv6_unicast_protocols,
	    r_ipv4_multicast_protocols,
	    r_ipv6_multicast_protocols);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/get_registered_protocols", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ipv4_unicast_protocols", r_ipv4_unicast_protocols);
	pxa_outputs->add("ipv6_unicast_protocols", r_ipv6_unicast_protocols);
	pxa_outputs->add("ipv4_multicast_protocols", r_ipv4_multicast_protocols);
	pxa_outputs->add("ipv6_multicast_protocols", r_ipv6_multicast_protocols);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_igp_table4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_igp_table4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_igp_table4(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01AddIgpTable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_igp_table4(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_igp_table4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_igp_table4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddIgpTable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_igp_table4, pxa_outputs);
	async_rib_0_1_add_igp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_igp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_igp_table4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_delete_igp_table4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/delete_igp_table4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_delete_igp_table4(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01DeleteIgpTable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_delete_igp_table4(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_delete_igp_table4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/delete_igp_table4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeleteIgpTable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_delete_igp_table4, pxa_outputs);
	async_rib_0_1_delete_igp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_igp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/delete_igp_table4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_egp_table4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_egp_table4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_egp_table4(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01AddEgpTable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_egp_table4(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_egp_table4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_egp_table4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddEgpTable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_egp_table4, pxa_outputs);
	async_rib_0_1_add_egp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_egp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_egp_table4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_delete_egp_table4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/delete_egp_table4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_delete_egp_table4(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01DeleteEgpTable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_delete_egp_table4(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_delete_egp_table4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/delete_egp_table4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeleteEgpTable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_delete_egp_table4, pxa_outputs);
	async_rib_0_1_delete_egp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_egp_table4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/delete_egp_table4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_route4(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01AddRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_route4(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddRoute4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_route4, pxa_outputs);
	async_rib_0_1_add_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_replace_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/replace_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_replace_route4(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01ReplaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_replace_route4(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_replace_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/replace_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01ReplaceRoute4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_replace_route4, pxa_outputs);
	async_rib_0_1_replace_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_replace_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/replace_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_delete_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/delete_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_delete_route4(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	Rib01DeleteRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_delete_route4(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_delete_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/delete_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeleteRoute4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_delete_route4, pxa_outputs);
	async_rib_0_1_delete_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/delete_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_interface_route4(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01AddInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_interface_route4(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(9), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddInterfaceRoute4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_interface_route4, pxa_outputs);
	async_rib_0_1_add_interface_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_interface_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_replace_interface_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/replace_interface_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_replace_interface_route4(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network,
	const IPv4&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01ReplaceInterfaceRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_replace_interface_route4(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_replace_interface_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(9), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/replace_interface_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01ReplaceInterfaceRoute4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_replace_interface_route4, pxa_outputs);
	async_rib_0_1_replace_interface_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_replace_interface_route4(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv4net(),
	    xa_inputs.get(4, "nexthop").ipv4(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/replace_interface_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_lookup_route_by_dest4
    (const XrlCmdError &e,
     const IPv4* rarg_nexthop,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/lookup_route_by_dest4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("nexthop", *rarg_nexthop);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_lookup_route_by_dest4(
	const IPv4&	arg_addr,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01LookupRouteByDest4CB c_b)
{

    /* Return value declarations */
    IPv4 rarg_nexthop;
    XrlCmdError e = rib_0_1_lookup_route_by_dest4(
        arg_addr,
        arg_unicast,
        arg_multicast,
        rarg_nexthop);
    return c_b->dispatch(e,
        &rarg_nexthop);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_lookup_route_by_dest4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/lookup_route_by_dest4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01LookupRouteByDest4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_lookup_route_by_dest4, pxa_outputs);
	async_rib_0_1_lookup_route_by_dest4(
	    xa_inputs.get(0, "addr").ipv4(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    IPv4 r_nexthop;
    try {
	XrlCmdError e = rib_0_1_lookup_route_by_dest4(
	    xa_inputs.get(0, "addr").ipv4(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    r_nexthop);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/lookup_route_by_dest4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nexthop", r_nexthop);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_new_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/new_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_new_vif(
	const string&	arg_name,
	Rib01NewVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_new_vif(
        arg_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_new_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/new_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01NewVifRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_new_vif, pxa_outputs);
	async_rib_0_1_new_vif(
	    xa_inputs.get(0, "name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_new_vif(
	    xa_inputs.get(0, "name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/new_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_vif_addr4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_vif_addr4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_vif_addr4(
	const string&	arg_name,
	const IPv4&	arg_addr,
	const IPv4Net&	arg_subnet,
	Rib01AddVifAddr4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_vif_addr4(
        arg_name,
        arg_addr,
        arg_subnet);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_vif_addr4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_vif_addr4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddVifAddr4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_vif_addr4, pxa_outputs);
	async_rib_0_1_add_vif_addr4(
	    xa_inputs.get(0, "name").text(),
	    xa_inputs.get(1, "addr").ipv4(),
	    xa_inputs.get(2, "subnet").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_vif_addr4(
	    xa_inputs.get(0, "name").text(),
	    xa_inputs.get(1, "addr").ipv4(),
	    xa_inputs.get(2, "subnet").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_vif_addr4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_enable4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_enable4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_enable4(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network_prefix,
	const string&	arg_cookie,
	Rib01RedistEnable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_enable4(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_network_prefix,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_enable4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_enable4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistEnable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_enable4, pxa_outputs);
	async_rib_0_1_redist_enable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv4net(),
	    xa_inputs.get(5, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_enable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv4net(),
	    xa_inputs.get(5, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_enable4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_disable4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_disable4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_disable4(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const string&	arg_cookie,
	Rib01RedistDisable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_disable4(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_disable4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_disable4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistDisable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_disable4, pxa_outputs);
	async_rib_0_1_redist_disable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_disable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_disable4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_transaction_enable4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_transaction_enable4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_transaction_enable4(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4Net&	arg_network_prefix,
	const string&	arg_cookie,
	Rib01RedistTransactionEnable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_transaction_enable4(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_network_prefix,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_transaction_enable4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_transaction_enable4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistTransactionEnable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_transaction_enable4, pxa_outputs);
	async_rib_0_1_redist_transaction_enable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv4net(),
	    xa_inputs.get(5, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_transaction_enable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv4net(),
	    xa_inputs.get(5, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_transaction_enable4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_transaction_disable4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_transaction_disable4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_transaction_disable4(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const string&	arg_cookie,
	Rib01RedistTransactionDisable4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_transaction_disable4(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_transaction_disable4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_transaction_disable4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistTransactionDisable4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_transaction_disable4, pxa_outputs);
	async_rib_0_1_redist_transaction_disable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_transaction_disable4(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_transaction_disable4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_register_interest4
    (const XrlCmdError &e,
     const bool* rarg_resolves,
     const IPv4* rarg_base_addr,
     const uint32_t* rarg_prefix_len,
     const uint32_t* rarg_real_prefix_len,
     const IPv4* rarg_nexthop,
     const uint32_t* rarg_metric,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/register_interest4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("resolves", *rarg_resolves);
	    out.add("base_addr", *rarg_base_addr);
	    out.add("prefix_len", *rarg_prefix_len);
	    out.add("real_prefix_len", *rarg_real_prefix_len);
	    out.add("nexthop", *rarg_nexthop);
	    out.add("metric", *rarg_metric);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_register_interest4(
	const string&	arg_target,
	const IPv4&	arg_addr,
	Rib01RegisterInterest4CB c_b)
{

    /* Return value declarations */
    bool rarg_resolves;
    IPv4 rarg_base_addr;
    uint32_t rarg_prefix_len;
    uint32_t rarg_real_prefix_len;
    IPv4 rarg_nexthop;
    uint32_t rarg_metric;
    XrlCmdError e = rib_0_1_register_interest4(
        arg_target,
        arg_addr,
        rarg_resolves,
        rarg_base_addr,
        rarg_prefix_len,
        rarg_real_prefix_len,
        rarg_nexthop,
        rarg_metric);
    return c_b->dispatch(e,
        &rarg_resolves,
        &rarg_base_addr,
        &rarg_prefix_len,
        &rarg_real_prefix_len,
        &rarg_nexthop,
        &rarg_metric);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_register_interest4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/register_interest4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RegisterInterest4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_register_interest4, pxa_outputs);
	async_rib_0_1_register_interest4(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_resolves;
    IPv4 r_base_addr;
    uint32_t r_prefix_len;
    uint32_t r_real_prefix_len;
    IPv4 r_nexthop;
    uint32_t r_metric;
    try {
	XrlCmdError e = rib_0_1_register_interest4(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv4(),
	    r_resolves,
	    r_base_addr,
	    r_prefix_len,
	    r_real_prefix_len,
	    r_nexthop,
	    r_metric);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/register_interest4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("resolves", r_resolves);
	pxa_outputs->add("base_addr", r_base_addr);
	pxa_outputs->add("prefix_len", r_prefix_len);
	pxa_outputs->add("real_prefix_len", r_real_prefix_len);
	pxa_outputs->add("nexthop", r_nexthop);
	pxa_outputs->add("metric", r_metric);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_deregister_interest4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/deregister_interest4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_deregister_interest4(
	const string&	arg_target,
	const IPv4&	arg_addr,
	const uint32_t&	arg_prefix_len,
	Rib01DeregisterInterest4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_deregister_interest4(
        arg_target,
        arg_addr,
        arg_prefix_len);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_deregister_interest4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/deregister_interest4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeregisterInterest4RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_deregister_interest4, pxa_outputs);
	async_rib_0_1_deregister_interest4(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv4(),
	    xa_inputs.get(2, "prefix_len").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_deregister_interest4(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv4(),
	    xa_inputs.get(2, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/deregister_interest4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_remove_policy_redist_tags
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/remove_policy_redist_tags", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_remove_policy_redist_tags(
	const string&	arg_protocol,
	Rib01RemovePolicyRedistTagsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_remove_policy_redist_tags(
        arg_protocol);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_remove_policy_redist_tags(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/remove_policy_redist_tags");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RemovePolicyRedistTagsRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_remove_policy_redist_tags, pxa_outputs);
	async_rib_0_1_remove_policy_redist_tags(
	    xa_inputs.get(0, "protocol").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_remove_policy_redist_tags(
	    xa_inputs.get(0, "protocol").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/remove_policy_redist_tags", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_insert_policy_redist_tags
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/insert_policy_redist_tags", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_insert_policy_redist_tags(
	const string&	arg_protocol,
	const XrlAtomList&	arg_policytags,
	Rib01InsertPolicyRedistTagsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_insert_policy_redist_tags(
        arg_protocol,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_insert_policy_redist_tags(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/insert_policy_redist_tags");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01InsertPolicyRedistTagsRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_insert_policy_redist_tags, pxa_outputs);
	async_rib_0_1_insert_policy_redist_tags(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_insert_policy_redist_tags(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/insert_policy_redist_tags", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_reset_policy_redist_tags
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/reset_policy_redist_tags", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_reset_policy_redist_tags(
	Rib01ResetPolicyRedistTagsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_reset_policy_redist_tags();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_reset_policy_redist_tags(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/reset_policy_redist_tags");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01ResetPolicyRedistTagsRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_reset_policy_redist_tags, pxa_outputs);
	async_rib_0_1_reset_policy_redist_tags( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_reset_policy_redist_tags();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/reset_policy_redist_tags", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_get_protocol_admin_distances
    (const XrlCmdError &e,
     const XrlAtomList* rarg_protocols,
     const XrlAtomList* rarg_admin_distances,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/get_protocol_admin_distances", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("protocols", *rarg_protocols);
	    out.add("admin_distances", *rarg_admin_distances);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_get_protocol_admin_distances(
	const bool&	arg_ipv4,
	const bool&	arg_unicast,
	Rib01GetProtocolAdminDistancesCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_protocols;
    XrlAtomList rarg_admin_distances;
    XrlCmdError e = rib_0_1_get_protocol_admin_distances(
        arg_ipv4,
        arg_unicast,
        rarg_protocols,
        rarg_admin_distances);
    return c_b->dispatch(e,
        &rarg_protocols,
        &rarg_admin_distances);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_get_protocol_admin_distances(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/get_protocol_admin_distances");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01GetProtocolAdminDistancesRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_get_protocol_admin_distances, pxa_outputs);
	async_rib_0_1_get_protocol_admin_distances(
	    xa_inputs.get(0, "ipv4").boolean(),
	    xa_inputs.get(1, "unicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_protocols;
    XrlAtomList r_admin_distances;
    try {
	XrlCmdError e = rib_0_1_get_protocol_admin_distances(
	    xa_inputs.get(0, "ipv4").boolean(),
	    xa_inputs.get(1, "unicast").boolean(),
	    r_protocols,
	    r_admin_distances);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/get_protocol_admin_distances", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("protocols", r_protocols);
	pxa_outputs->add("admin_distances", r_admin_distances);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_get_protocol_admin_distance
    (const XrlCmdError &e,
     const uint32_t* rarg_admin_distance,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/get_protocol_admin_distance", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("admin_distance", *rarg_admin_distance);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_get_protocol_admin_distance(
	const string&	arg_protocol,
	const bool&	arg_ipv4,
	const bool&	arg_unicast,
	Rib01GetProtocolAdminDistanceCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_admin_distance;
    XrlCmdError e = rib_0_1_get_protocol_admin_distance(
        arg_protocol,
        arg_ipv4,
        arg_unicast,
        rarg_admin_distance);
    return c_b->dispatch(e,
        &rarg_admin_distance);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_get_protocol_admin_distance(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/get_protocol_admin_distance");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01GetProtocolAdminDistanceRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_get_protocol_admin_distance, pxa_outputs);
	async_rib_0_1_get_protocol_admin_distance(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "ipv4").boolean(),
	    xa_inputs.get(2, "unicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_admin_distance;
    try {
	XrlCmdError e = rib_0_1_get_protocol_admin_distance(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "ipv4").boolean(),
	    xa_inputs.get(2, "unicast").boolean(),
	    r_admin_distance);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/get_protocol_admin_distance", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("admin_distance", r_admin_distance);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_set_protocol_admin_distance
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/set_protocol_admin_distance", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_set_protocol_admin_distance(
	const string&	arg_protocol,
	const bool&	arg_ipv4,
	const bool&	arg_ipv6,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const uint32_t&	arg_admin_distance,
	Rib01SetProtocolAdminDistanceCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_set_protocol_admin_distance(
        arg_protocol,
        arg_ipv4,
        arg_ipv6,
        arg_unicast,
        arg_multicast,
        arg_admin_distance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_set_protocol_admin_distance(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/set_protocol_admin_distance");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01SetProtocolAdminDistanceRF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_set_protocol_admin_distance, pxa_outputs);
	async_rib_0_1_set_protocol_admin_distance(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "ipv4").boolean(),
	    xa_inputs.get(2, "ipv6").boolean(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(),
	    xa_inputs.get(5, "admin_distance").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_set_protocol_admin_distance(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "ipv4").boolean(),
	    xa_inputs.get(2, "ipv6").boolean(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(),
	    xa_inputs.get(5, "admin_distance").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/set_protocol_admin_distance", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_igp_table6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_igp_table6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_igp_table6(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01AddIgpTable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_igp_table6(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_igp_table6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_igp_table6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddIgpTable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_igp_table6, pxa_outputs);
	async_rib_0_1_add_igp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_igp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_igp_table6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_delete_igp_table6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/delete_igp_table6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_delete_igp_table6(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01DeleteIgpTable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_delete_igp_table6(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_delete_igp_table6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/delete_igp_table6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeleteIgpTable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_delete_igp_table6, pxa_outputs);
	async_rib_0_1_delete_igp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_igp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/delete_igp_table6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_egp_table6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_egp_table6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_egp_table6(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01AddEgpTable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_egp_table6(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_egp_table6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_egp_table6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddEgpTable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_egp_table6, pxa_outputs);
	async_rib_0_1_add_egp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_egp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_egp_table6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_delete_egp_table6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/delete_egp_table6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_delete_egp_table6(
	const string&	arg_protocol,
	const string&	arg_target_class,
	const string&	arg_target_instance,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01DeleteEgpTable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_delete_egp_table6(
        arg_protocol,
        arg_target_class,
        arg_target_instance,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_delete_egp_table6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/delete_egp_table6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeleteEgpTable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_delete_egp_table6, pxa_outputs);
	async_rib_0_1_delete_egp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_egp_table6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "target_class").text(),
	    xa_inputs.get(2, "target_instance").text(),
	    xa_inputs.get(3, "unicast").boolean(),
	    xa_inputs.get(4, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/delete_egp_table6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_route6(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01AddRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_route6(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddRoute6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_route6, pxa_outputs);
	async_rib_0_1_add_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_replace_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/replace_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_replace_route6(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01ReplaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_replace_route6(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_replace_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(7), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/replace_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01ReplaceRoute6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_replace_route6, pxa_outputs);
	async_rib_0_1_replace_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_replace_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "metric").uint32(),
	    xa_inputs.get(6, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/replace_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_delete_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/delete_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_delete_route6(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	Rib01DeleteRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_delete_route6(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_delete_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/delete_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeleteRoute6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_delete_route6, pxa_outputs);
	async_rib_0_1_delete_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/delete_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_interface_route6(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01AddInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_interface_route6(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(9), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddInterfaceRoute6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_interface_route6, pxa_outputs);
	async_rib_0_1_add_interface_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_interface_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_replace_interface_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/replace_interface_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_replace_interface_route6(
	const string&	arg_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network,
	const IPv6&	arg_nexthop,
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	Rib01ReplaceInterfaceRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_replace_interface_route6(
        arg_protocol,
        arg_unicast,
        arg_multicast,
        arg_network,
        arg_nexthop,
        arg_ifname,
        arg_vifname,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_replace_interface_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(9), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/replace_interface_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01ReplaceInterfaceRoute6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_replace_interface_route6, pxa_outputs);
	async_rib_0_1_replace_interface_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_replace_interface_route6(
	    xa_inputs.get(0, "protocol").text(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "network").ipv6net(),
	    xa_inputs.get(4, "nexthop").ipv6(),
	    xa_inputs.get(5, "ifname").text(),
	    xa_inputs.get(6, "vifname").text(),
	    xa_inputs.get(7, "metric").uint32(),
	    xa_inputs.get(8, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/replace_interface_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_lookup_route_by_dest6
    (const XrlCmdError &e,
     const IPv6* rarg_nexthop,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/lookup_route_by_dest6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("nexthop", *rarg_nexthop);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_lookup_route_by_dest6(
	const IPv6&	arg_addr,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	Rib01LookupRouteByDest6CB c_b)
{

    /* Return value declarations */
    IPv6 rarg_nexthop;
    XrlCmdError e = rib_0_1_lookup_route_by_dest6(
        arg_addr,
        arg_unicast,
        arg_multicast,
        rarg_nexthop);
    return c_b->dispatch(e,
        &rarg_nexthop);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_lookup_route_by_dest6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/lookup_route_by_dest6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01LookupRouteByDest6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_lookup_route_by_dest6, pxa_outputs);
	async_rib_0_1_lookup_route_by_dest6(
	    xa_inputs.get(0, "addr").ipv6(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    IPv6 r_nexthop;
    try {
	XrlCmdError e = rib_0_1_lookup_route_by_dest6(
	    xa_inputs.get(0, "addr").ipv6(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    r_nexthop);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/lookup_route_by_dest6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nexthop", r_nexthop);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_add_vif_addr6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/add_vif_addr6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_add_vif_addr6(
	const string&	arg_name,
	const IPv6&	arg_addr,
	const IPv6Net&	arg_subnet,
	Rib01AddVifAddr6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_add_vif_addr6(
        arg_name,
        arg_addr,
        arg_subnet);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_add_vif_addr6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/add_vif_addr6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01AddVifAddr6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_add_vif_addr6, pxa_outputs);
	async_rib_0_1_add_vif_addr6(
	    xa_inputs.get(0, "name").text(),
	    xa_inputs.get(1, "addr").ipv6(),
	    xa_inputs.get(2, "subnet").ipv6net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_vif_addr6(
	    xa_inputs.get(0, "name").text(),
	    xa_inputs.get(1, "addr").ipv6(),
	    xa_inputs.get(2, "subnet").ipv6net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/add_vif_addr6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_enable6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_enable6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_enable6(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network_prefix,
	const string&	arg_cookie,
	Rib01RedistEnable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_enable6(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_network_prefix,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_enable6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_enable6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistEnable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_enable6, pxa_outputs);
	async_rib_0_1_redist_enable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv6net(),
	    xa_inputs.get(5, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_enable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv6net(),
	    xa_inputs.get(5, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_enable6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_disable6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_disable6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_disable6(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const string&	arg_cookie,
	Rib01RedistDisable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_disable6(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_disable6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_disable6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistDisable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_disable6, pxa_outputs);
	async_rib_0_1_redist_disable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_disable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_disable6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_transaction_enable6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_transaction_enable6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_transaction_enable6(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6Net&	arg_network_prefix,
	const string&	arg_cookie,
	Rib01RedistTransactionEnable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_transaction_enable6(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_network_prefix,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_transaction_enable6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_transaction_enable6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistTransactionEnable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_transaction_enable6, pxa_outputs);
	async_rib_0_1_redist_transaction_enable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv6net(),
	    xa_inputs.get(5, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_transaction_enable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "network_prefix").ipv6net(),
	    xa_inputs.get(5, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_transaction_enable6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_redist_transaction_disable6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/redist_transaction_disable6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_redist_transaction_disable6(
	const string&	arg_to_xrl_target,
	const string&	arg_from_protocol,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const string&	arg_cookie,
	Rib01RedistTransactionDisable6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_redist_transaction_disable6(
        arg_to_xrl_target,
        arg_from_protocol,
        arg_unicast,
        arg_multicast,
        arg_cookie);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_redist_transaction_disable6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/redist_transaction_disable6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RedistTransactionDisable6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_redist_transaction_disable6, pxa_outputs);
	async_rib_0_1_redist_transaction_disable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_transaction_disable6(
	    xa_inputs.get(0, "to_xrl_target").text(),
	    xa_inputs.get(1, "from_protocol").text(),
	    xa_inputs.get(2, "unicast").boolean(),
	    xa_inputs.get(3, "multicast").boolean(),
	    xa_inputs.get(4, "cookie").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/redist_transaction_disable6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_register_interest6
    (const XrlCmdError &e,
     const bool* rarg_resolves,
     const IPv6* rarg_base_addr,
     const uint32_t* rarg_prefix_len,
     const uint32_t* rarg_real_prefix_len,
     const IPv6* rarg_nexthop,
     const uint32_t* rarg_metric,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/register_interest6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("resolves", *rarg_resolves);
	    out.add("base_addr", *rarg_base_addr);
	    out.add("prefix_len", *rarg_prefix_len);
	    out.add("real_prefix_len", *rarg_real_prefix_len);
	    out.add("nexthop", *rarg_nexthop);
	    out.add("metric", *rarg_metric);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_register_interest6(
	const string&	arg_target,
	const IPv6&	arg_addr,
	Rib01RegisterInterest6CB c_b)
{

    /* Return value declarations */
    bool rarg_resolves;
    IPv6 rarg_base_addr;
    uint32_t rarg_prefix_len;
    uint32_t rarg_real_prefix_len;
    IPv6 rarg_nexthop;
    uint32_t rarg_metric;
    XrlCmdError e = rib_0_1_register_interest6(
        arg_target,
        arg_addr,
        rarg_resolves,
        rarg_base_addr,
        rarg_prefix_len,
        rarg_real_prefix_len,
        rarg_nexthop,
        rarg_metric);
    return c_b->dispatch(e,
        &rarg_resolves,
        &rarg_base_addr,
        &rarg_prefix_len,
        &rarg_real_prefix_len,
        &rarg_nexthop,
        &rarg_metric);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_register_interest6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/register_interest6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01RegisterInterest6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_register_interest6, pxa_outputs);
	async_rib_0_1_register_interest6(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_resolves;
    IPv6 r_base_addr;
    uint32_t r_prefix_len;
    uint32_t r_real_prefix_len;
    IPv6 r_nexthop;
    uint32_t r_metric;
    try {
	XrlCmdError e = rib_0_1_register_interest6(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv6(),
	    r_resolves,
	    r_base_addr,
	    r_prefix_len,
	    r_real_prefix_len,
	    r_nexthop,
	    r_metric);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/register_interest6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("resolves", r_resolves);
	pxa_outputs->add("base_addr", r_base_addr);
	pxa_outputs->add("prefix_len", r_prefix_len);
	pxa_outputs->add("real_prefix_len", r_real_prefix_len);
	pxa_outputs->add("nexthop", r_nexthop);
	pxa_outputs->add("metric", r_metric);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_rib_0_1_deregister_interest6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "rib/0.1/deregister_interest6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_rib_0_1_deregister_interest6(
	const string&	arg_target,
	const IPv6&	arg_addr,
	const uint32_t&	arg_prefix_len,
	Rib01DeregisterInterest6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = rib_0_1_deregister_interest6(
        arg_target,
        arg_addr,
        arg_prefix_len);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_rib_0_1_deregister_interest6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "rib/0.1/deregister_interest6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Rib01DeregisterInterest6RF mycb =
	    callback(this, &XrlRibTargetBase::callback_rib_0_1_deregister_interest6, pxa_outputs);
	async_rib_0_1_deregister_interest6(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv6(),
	    xa_inputs.get(2, "prefix_len").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_deregister_interest6(
	    xa_inputs.get(0, "target").text(),
	    xa_inputs.get(1, "addr").ipv6(),
	    xa_inputs.get(2, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "rib/0.1/deregister_interest6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_profile_0_1_enable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "profile/0.1/enable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_profile_0_1_enable(
	const string&	arg_pname,
	Profile01EnableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = profile_0_1_enable(
        arg_pname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_profile_0_1_enable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "profile/0.1/enable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Profile01EnableRF mycb =
	    callback(this, &XrlRibTargetBase::callback_profile_0_1_enable, pxa_outputs);
	async_profile_0_1_enable(
	    xa_inputs.get(0, "pname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = profile_0_1_enable(
	    xa_inputs.get(0, "pname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "profile/0.1/enable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_profile_0_1_disable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "profile/0.1/disable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_profile_0_1_disable(
	const string&	arg_pname,
	Profile01DisableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = profile_0_1_disable(
        arg_pname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_profile_0_1_disable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "profile/0.1/disable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Profile01DisableRF mycb =
	    callback(this, &XrlRibTargetBase::callback_profile_0_1_disable, pxa_outputs);
	async_profile_0_1_disable(
	    xa_inputs.get(0, "pname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = profile_0_1_disable(
	    xa_inputs.get(0, "pname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "profile/0.1/disable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_profile_0_1_get_entries
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "profile/0.1/get_entries", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_profile_0_1_get_entries(
	const string&	arg_pname,
	const string&	arg_instance_name,
	Profile01GetEntriesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = profile_0_1_get_entries(
        arg_pname,
        arg_instance_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_profile_0_1_get_entries(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "profile/0.1/get_entries");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Profile01GetEntriesRF mycb =
	    callback(this, &XrlRibTargetBase::callback_profile_0_1_get_entries, pxa_outputs);
	async_profile_0_1_get_entries(
	    xa_inputs.get(0, "pname").text(),
	    xa_inputs.get(1, "instance_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = profile_0_1_get_entries(
	    xa_inputs.get(0, "pname").text(),
	    xa_inputs.get(1, "instance_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "profile/0.1/get_entries", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_profile_0_1_clear
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "profile/0.1/clear", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_profile_0_1_clear(
	const string&	arg_pname,
	Profile01ClearCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = profile_0_1_clear(
        arg_pname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_profile_0_1_clear(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "profile/0.1/clear");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Profile01ClearRF mycb =
	    callback(this, &XrlRibTargetBase::callback_profile_0_1_clear, pxa_outputs);
	async_profile_0_1_clear(
	    xa_inputs.get(0, "pname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = profile_0_1_clear(
	    xa_inputs.get(0, "pname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "profile/0.1/clear", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRibTargetBase::callback_profile_0_1_list
    (const XrlCmdError &e,
     const string* rarg_info,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "profile/0.1/list", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("info", *rarg_info);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRibTargetBase::async_profile_0_1_list(
	Profile01ListCB c_b)
{

    /* Return value declarations */
    string rarg_info;
    XrlCmdError e = profile_0_1_list(
        rarg_info);
    return c_b->dispatch(e,
        &rarg_info);
}
#endif

XrlCmdRT
XrlRibTargetBase::handle_profile_0_1_list(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "profile/0.1/list");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Profile01ListRF mycb =
	    callback(this, &XrlRibTargetBase::callback_profile_0_1_list, pxa_outputs);
	async_profile_0_1_list( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_info;
    try {
	XrlCmdError e = profile_0_1_list(
	    r_info);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "profile/0.1/list", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("info", r_info);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlRibTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "rib", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlRibTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
