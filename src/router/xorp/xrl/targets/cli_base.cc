/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/cli_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "cli_base.hh"


const struct XrlCliTargetBase::handler_table XrlCliTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlCliTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlCliTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlCliTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlCliTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlCliTargetBase::handle_common_0_1_startup },
    { "cli_manager/0.1/enable_cli",
      &XrlCliTargetBase::handle_cli_manager_0_1_enable_cli },
    { "cli_manager/0.1/start_cli",
      &XrlCliTargetBase::handle_cli_manager_0_1_start_cli },
    { "cli_manager/0.1/stop_cli",
      &XrlCliTargetBase::handle_cli_manager_0_1_stop_cli },
    { "cli_manager/0.1/add_enable_cli_access_from_subnet4",
      &XrlCliTargetBase::handle_cli_manager_0_1_add_enable_cli_access_from_subnet4 },
    { "cli_manager/0.1/add_enable_cli_access_from_subnet6",
      &XrlCliTargetBase::handle_cli_manager_0_1_add_enable_cli_access_from_subnet6 },
    { "cli_manager/0.1/delete_enable_cli_access_from_subnet4",
      &XrlCliTargetBase::handle_cli_manager_0_1_delete_enable_cli_access_from_subnet4 },
    { "cli_manager/0.1/delete_enable_cli_access_from_subnet6",
      &XrlCliTargetBase::handle_cli_manager_0_1_delete_enable_cli_access_from_subnet6 },
    { "cli_manager/0.1/add_disable_cli_access_from_subnet4",
      &XrlCliTargetBase::handle_cli_manager_0_1_add_disable_cli_access_from_subnet4 },
    { "cli_manager/0.1/add_disable_cli_access_from_subnet6",
      &XrlCliTargetBase::handle_cli_manager_0_1_add_disable_cli_access_from_subnet6 },
    { "cli_manager/0.1/delete_disable_cli_access_from_subnet4",
      &XrlCliTargetBase::handle_cli_manager_0_1_delete_disable_cli_access_from_subnet4 },
    { "cli_manager/0.1/delete_disable_cli_access_from_subnet6",
      &XrlCliTargetBase::handle_cli_manager_0_1_delete_disable_cli_access_from_subnet6 },
    { "cli_manager/0.1/add_cli_command",
      &XrlCliTargetBase::handle_cli_manager_0_1_add_cli_command },
    { "cli_manager/0.1/delete_cli_command",
      &XrlCliTargetBase::handle_cli_manager_0_1_delete_cli_command },
};

const size_t XrlCliTargetBase::num_handlers = (sizeof(XrlCliTargetBase::handlers) / sizeof(XrlCliTargetBase::handlers[0]));


XrlCliTargetBase::XrlCliTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlCliTargetBase::~XrlCliTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlCliTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlCliTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlCliTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlCliTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlCliTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlCliTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_enable_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/enable_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_enable_cli(
	const bool&	arg_enable,
	CliManager01EnableCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_enable_cli(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_enable_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/enable_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01EnableCliRF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_enable_cli, pxa_outputs);
	async_cli_manager_0_1_enable_cli(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_enable_cli(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/enable_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_start_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/start_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_start_cli(
	CliManager01StartCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_start_cli();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_start_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/start_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01StartCliRF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_start_cli, pxa_outputs);
	async_cli_manager_0_1_start_cli( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_start_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/start_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_stop_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/stop_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_stop_cli(
	CliManager01StopCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_stop_cli();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_stop_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/stop_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01StopCliRF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_stop_cli, pxa_outputs);
	async_cli_manager_0_1_stop_cli( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_stop_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/stop_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_add_enable_cli_access_from_subnet4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/add_enable_cli_access_from_subnet4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_add_enable_cli_access_from_subnet4(
	const IPv4Net&	arg_subnet_addr,
	CliManager01AddEnableCliAccessFromSubnet4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_add_enable_cli_access_from_subnet4(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_add_enable_cli_access_from_subnet4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/add_enable_cli_access_from_subnet4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01AddEnableCliAccessFromSubnet4RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_add_enable_cli_access_from_subnet4, pxa_outputs);
	async_cli_manager_0_1_add_enable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_enable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/add_enable_cli_access_from_subnet4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_add_enable_cli_access_from_subnet6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/add_enable_cli_access_from_subnet6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_add_enable_cli_access_from_subnet6(
	const IPv6Net&	arg_subnet_addr,
	CliManager01AddEnableCliAccessFromSubnet6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_add_enable_cli_access_from_subnet6(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_add_enable_cli_access_from_subnet6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/add_enable_cli_access_from_subnet6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01AddEnableCliAccessFromSubnet6RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_add_enable_cli_access_from_subnet6, pxa_outputs);
	async_cli_manager_0_1_add_enable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_enable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/add_enable_cli_access_from_subnet6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_delete_enable_cli_access_from_subnet4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/delete_enable_cli_access_from_subnet4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_delete_enable_cli_access_from_subnet4(
	const IPv4Net&	arg_subnet_addr,
	CliManager01DeleteEnableCliAccessFromSubnet4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_delete_enable_cli_access_from_subnet4(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_delete_enable_cli_access_from_subnet4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/delete_enable_cli_access_from_subnet4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01DeleteEnableCliAccessFromSubnet4RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_delete_enable_cli_access_from_subnet4, pxa_outputs);
	async_cli_manager_0_1_delete_enable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_enable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/delete_enable_cli_access_from_subnet4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_delete_enable_cli_access_from_subnet6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/delete_enable_cli_access_from_subnet6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_delete_enable_cli_access_from_subnet6(
	const IPv6Net&	arg_subnet_addr,
	CliManager01DeleteEnableCliAccessFromSubnet6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_delete_enable_cli_access_from_subnet6(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_delete_enable_cli_access_from_subnet6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/delete_enable_cli_access_from_subnet6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01DeleteEnableCliAccessFromSubnet6RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_delete_enable_cli_access_from_subnet6, pxa_outputs);
	async_cli_manager_0_1_delete_enable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_enable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/delete_enable_cli_access_from_subnet6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_add_disable_cli_access_from_subnet4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/add_disable_cli_access_from_subnet4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_add_disable_cli_access_from_subnet4(
	const IPv4Net&	arg_subnet_addr,
	CliManager01AddDisableCliAccessFromSubnet4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_add_disable_cli_access_from_subnet4(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_add_disable_cli_access_from_subnet4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/add_disable_cli_access_from_subnet4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01AddDisableCliAccessFromSubnet4RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_add_disable_cli_access_from_subnet4, pxa_outputs);
	async_cli_manager_0_1_add_disable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_disable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/add_disable_cli_access_from_subnet4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_add_disable_cli_access_from_subnet6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/add_disable_cli_access_from_subnet6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_add_disable_cli_access_from_subnet6(
	const IPv6Net&	arg_subnet_addr,
	CliManager01AddDisableCliAccessFromSubnet6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_add_disable_cli_access_from_subnet6(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_add_disable_cli_access_from_subnet6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/add_disable_cli_access_from_subnet6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01AddDisableCliAccessFromSubnet6RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_add_disable_cli_access_from_subnet6, pxa_outputs);
	async_cli_manager_0_1_add_disable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_disable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/add_disable_cli_access_from_subnet6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_delete_disable_cli_access_from_subnet4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/delete_disable_cli_access_from_subnet4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_delete_disable_cli_access_from_subnet4(
	const IPv4Net&	arg_subnet_addr,
	CliManager01DeleteDisableCliAccessFromSubnet4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_delete_disable_cli_access_from_subnet4(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_delete_disable_cli_access_from_subnet4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/delete_disable_cli_access_from_subnet4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01DeleteDisableCliAccessFromSubnet4RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_delete_disable_cli_access_from_subnet4, pxa_outputs);
	async_cli_manager_0_1_delete_disable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_disable_cli_access_from_subnet4(
	    xa_inputs.get(0, "subnet_addr").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/delete_disable_cli_access_from_subnet4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_delete_disable_cli_access_from_subnet6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/delete_disable_cli_access_from_subnet6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_delete_disable_cli_access_from_subnet6(
	const IPv6Net&	arg_subnet_addr,
	CliManager01DeleteDisableCliAccessFromSubnet6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_delete_disable_cli_access_from_subnet6(
        arg_subnet_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_delete_disable_cli_access_from_subnet6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/delete_disable_cli_access_from_subnet6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01DeleteDisableCliAccessFromSubnet6RF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_delete_disable_cli_access_from_subnet6, pxa_outputs);
	async_cli_manager_0_1_delete_disable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_disable_cli_access_from_subnet6(
	    xa_inputs.get(0, "subnet_addr").ipv6net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/delete_disable_cli_access_from_subnet6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_add_cli_command
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/add_cli_command", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_add_cli_command(
	const string&	arg_processor_name,
	const string&	arg_command_name,
	const string&	arg_command_help,
	const bool&	arg_is_command_cd,
	const string&	arg_command_cd_prompt,
	const bool&	arg_is_command_processor,
	CliManager01AddCliCommandCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_add_cli_command(
        arg_processor_name,
        arg_command_name,
        arg_command_help,
        arg_is_command_cd,
        arg_command_cd_prompt,
        arg_is_command_processor);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_add_cli_command(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/add_cli_command");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01AddCliCommandRF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_add_cli_command, pxa_outputs);
	async_cli_manager_0_1_add_cli_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "command_name").text(),
	    xa_inputs.get(2, "command_help").text(),
	    xa_inputs.get(3, "is_command_cd").boolean(),
	    xa_inputs.get(4, "command_cd_prompt").text(),
	    xa_inputs.get(5, "is_command_processor").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_cli_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "command_name").text(),
	    xa_inputs.get(2, "command_help").text(),
	    xa_inputs.get(3, "is_command_cd").boolean(),
	    xa_inputs.get(4, "command_cd_prompt").text(),
	    xa_inputs.get(5, "is_command_processor").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/add_cli_command", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlCliTargetBase::callback_cli_manager_0_1_delete_cli_command
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_manager/0.1/delete_cli_command", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlCliTargetBase::async_cli_manager_0_1_delete_cli_command(
	const string&	arg_processor_name,
	const string&	arg_command_name,
	CliManager01DeleteCliCommandCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = cli_manager_0_1_delete_cli_command(
        arg_processor_name,
        arg_command_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlCliTargetBase::handle_cli_manager_0_1_delete_cli_command(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "cli_manager/0.1/delete_cli_command");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliManager01DeleteCliCommandRF mycb =
	    callback(this, &XrlCliTargetBase::callback_cli_manager_0_1_delete_cli_command, pxa_outputs);
	async_cli_manager_0_1_delete_cli_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "command_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_cli_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "command_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_manager/0.1/delete_cli_command", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlCliTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "cli", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlCliTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
