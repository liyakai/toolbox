/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/mld6igmp_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "mld6igmp_base.hh"


const struct XrlMld6igmpTargetBase::handler_table XrlMld6igmpTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlMld6igmpTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlMld6igmpTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlMld6igmpTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlMld6igmpTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlMld6igmpTargetBase::handle_common_0_1_startup },
    { "cli_processor/0.1/process_command",
      &XrlMld6igmpTargetBase::handle_cli_processor_0_1_process_command },
    { "finder_event_observer/0.1/xrl_target_birth",
      &XrlMld6igmpTargetBase::handle_finder_event_observer_0_1_xrl_target_birth },
    { "finder_event_observer/0.1/xrl_target_death",
      &XrlMld6igmpTargetBase::handle_finder_event_observer_0_1_xrl_target_death },
    { "raw_packet4_client/0.1/recv",
      &XrlMld6igmpTargetBase::handle_raw_packet4_client_0_1_recv },
    { "raw_packet6_client/0.1/recv",
      &XrlMld6igmpTargetBase::handle_raw_packet6_client_0_1_recv },
    { "mld6igmp/0.1/enable_vif",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_vif },
    { "mld6igmp/0.1/start_vif",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_vif },
    { "mld6igmp/0.1/stop_vif",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_vif },
    { "mld6igmp/0.1/enable_all_vifs",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_all_vifs },
    { "mld6igmp/0.1/start_all_vifs",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_all_vifs },
    { "mld6igmp/0.1/stop_all_vifs",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_all_vifs },
    { "mld6igmp/0.1/enable_mld6igmp",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_mld6igmp },
    { "mld6igmp/0.1/start_mld6igmp",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_mld6igmp },
    { "mld6igmp/0.1/stop_mld6igmp",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_mld6igmp },
    { "mld6igmp/0.1/enable_cli",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_cli },
    { "mld6igmp/0.1/start_cli",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_cli },
    { "mld6igmp/0.1/stop_cli",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_cli },
    { "mld6igmp/0.1/get_vif_proto_version",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_proto_version },
    { "mld6igmp/0.1/set_vif_proto_version",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_proto_version },
    { "mld6igmp/0.1/reset_vif_proto_version",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_proto_version },
    { "mld6igmp/0.1/get_vif_ip_router_alert_option_check",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_ip_router_alert_option_check },
    { "mld6igmp/0.1/set_vif_ip_router_alert_option_check",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_ip_router_alert_option_check },
    { "mld6igmp/0.1/reset_vif_ip_router_alert_option_check",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_ip_router_alert_option_check },
    { "mld6igmp/0.1/get_vif_query_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_query_interval },
    { "mld6igmp/0.1/set_vif_query_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_query_interval },
    { "mld6igmp/0.1/reset_vif_query_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_query_interval },
    { "mld6igmp/0.1/get_vif_query_last_member_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_query_last_member_interval },
    { "mld6igmp/0.1/set_vif_query_last_member_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_query_last_member_interval },
    { "mld6igmp/0.1/reset_vif_query_last_member_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_query_last_member_interval },
    { "mld6igmp/0.1/get_vif_query_response_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_query_response_interval },
    { "mld6igmp/0.1/set_vif_query_response_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_query_response_interval },
    { "mld6igmp/0.1/reset_vif_query_response_interval",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_query_response_interval },
    { "mld6igmp/0.1/get_vif_robust_count",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_robust_count },
    { "mld6igmp/0.1/set_vif_robust_count",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_robust_count },
    { "mld6igmp/0.1/reset_vif_robust_count",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_robust_count },
    { "mld6igmp/0.1/log_trace_all",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_log_trace_all },
    { "mld6igmp/0.1/add_protocol4",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_add_protocol4 },
    { "mld6igmp/0.1/add_protocol6",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_add_protocol6 },
    { "mld6igmp/0.1/delete_protocol4",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_delete_protocol4 },
    { "mld6igmp/0.1/delete_protocol6",
      &XrlMld6igmpTargetBase::handle_mld6igmp_0_1_delete_protocol6 },
};

const size_t XrlMld6igmpTargetBase::num_handlers = (sizeof(XrlMld6igmpTargetBase::handlers) / sizeof(XrlMld6igmpTargetBase::handlers[0]));


XrlMld6igmpTargetBase::XrlMld6igmpTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlMld6igmpTargetBase::~XrlMld6igmpTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlMld6igmpTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_cli_processor_0_1_process_command
    (const XrlCmdError &e,
     const string* rarg_ret_processor_name,
     const string* rarg_ret_cli_term_name,
     const uint32_t* rarg_ret_cli_session_id,
     const string* rarg_ret_command_output,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "cli_processor/0.1/process_command", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ret_processor_name", *rarg_ret_processor_name);
	    out.add("ret_cli_term_name", *rarg_ret_cli_term_name);
	    out.add("ret_cli_session_id", *rarg_ret_cli_session_id);
	    out.add("ret_command_output", *rarg_ret_command_output);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_cli_processor_0_1_process_command(
	const string&	arg_processor_name,
	const string&	arg_cli_term_name,
	const uint32_t&	arg_cli_session_id,
	const string&	arg_command_name,
	const string&	arg_command_args,
	CliProcessor01ProcessCommandCB c_b)
{

    /* Return value declarations */
    string rarg_ret_processor_name;
    string rarg_ret_cli_term_name;
    uint32_t rarg_ret_cli_session_id;
    string rarg_ret_command_output;
    XrlCmdError e = cli_processor_0_1_process_command(
        arg_processor_name,
        arg_cli_term_name,
        arg_cli_session_id,
        arg_command_name,
        arg_command_args,
        rarg_ret_processor_name,
        rarg_ret_cli_term_name,
        rarg_ret_cli_session_id,
        rarg_ret_command_output);
    return c_b->dispatch(e,
        &rarg_ret_processor_name,
        &rarg_ret_cli_term_name,
        &rarg_ret_cli_session_id,
        &rarg_ret_command_output);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_cli_processor_0_1_process_command(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "cli_processor/0.1/process_command");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	CliProcessor01ProcessCommandRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_cli_processor_0_1_process_command, pxa_outputs);
	async_cli_processor_0_1_process_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "cli_term_name").text(),
	    xa_inputs.get(2, "cli_session_id").uint32(),
	    xa_inputs.get(3, "command_name").text(),
	    xa_inputs.get(4, "command_args").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_ret_processor_name;
    string r_ret_cli_term_name;
    uint32_t r_ret_cli_session_id;
    string r_ret_command_output;
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xa_inputs.get(0, "processor_name").text(),
	    xa_inputs.get(1, "cli_term_name").text(),
	    xa_inputs.get(2, "cli_session_id").uint32(),
	    xa_inputs.get(3, "command_name").text(),
	    xa_inputs.get(4, "command_args").text(),
	    r_ret_processor_name,
	    r_ret_cli_term_name,
	    r_ret_cli_session_id,
	    r_ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "cli_processor/0.1/process_command", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ret_processor_name", r_ret_processor_name);
	pxa_outputs->add("ret_cli_term_name", r_ret_cli_term_name);
	pxa_outputs->add("ret_cli_session_id", r_ret_cli_session_id);
	pxa_outputs->add("ret_command_output", r_ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_finder_event_observer_0_1_xrl_target_birth
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_finder_event_observer_0_1_xrl_target_birth(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetBirthCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_birth");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetBirthRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_finder_event_observer_0_1_xrl_target_birth, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_finder_event_observer_0_1_xrl_target_death
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_finder_event_observer_0_1_xrl_target_death(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetDeathCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_death");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetDeathRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_finder_event_observer_0_1_xrl_target_death, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_raw_packet4_client_0_1_recv
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "raw_packet4_client/0.1/recv", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_raw_packet4_client_0_1_recv(
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const IPv4&	arg_src_address,
	const IPv4&	arg_dst_address,
	const uint32_t&	arg_ip_protocol,
	const int32_t&	arg_ip_ttl,
	const int32_t&	arg_ip_tos,
	const bool&	arg_ip_router_alert,
	const bool&	arg_ip_internet_control,
	const vector<uint8_t>&	arg_payload,
	RawPacket4Client01RecvCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = raw_packet4_client_0_1_recv(
        arg_if_name,
        arg_vif_name,
        arg_src_address,
        arg_dst_address,
        arg_ip_protocol,
        arg_ip_ttl,
        arg_ip_tos,
        arg_ip_router_alert,
        arg_ip_internet_control,
        arg_payload);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_raw_packet4_client_0_1_recv(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 10) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(10), XORP_UINT_CAST(xa_inputs.size()), "raw_packet4_client/0.1/recv");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	RawPacket4Client01RecvRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_raw_packet4_client_0_1_recv, pxa_outputs);
	async_raw_packet4_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv4(),
	    xa_inputs.get(3, "dst_address").ipv4(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "payload").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet4_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv4(),
	    xa_inputs.get(3, "dst_address").ipv4(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "payload").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "raw_packet4_client/0.1/recv", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_raw_packet6_client_0_1_recv
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "raw_packet6_client/0.1/recv", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_raw_packet6_client_0_1_recv(
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const IPv6&	arg_src_address,
	const IPv6&	arg_dst_address,
	const uint32_t&	arg_ip_protocol,
	const int32_t&	arg_ip_ttl,
	const int32_t&	arg_ip_tos,
	const bool&	arg_ip_router_alert,
	const bool&	arg_ip_internet_control,
	const XrlAtomList&	arg_ext_headers_type,
	const XrlAtomList&	arg_ext_headers_payload,
	const vector<uint8_t>&	arg_payload,
	RawPacket6Client01RecvCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = raw_packet6_client_0_1_recv(
        arg_if_name,
        arg_vif_name,
        arg_src_address,
        arg_dst_address,
        arg_ip_protocol,
        arg_ip_ttl,
        arg_ip_tos,
        arg_ip_router_alert,
        arg_ip_internet_control,
        arg_ext_headers_type,
        arg_ext_headers_payload,
        arg_payload);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_raw_packet6_client_0_1_recv(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 12) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(12), XORP_UINT_CAST(xa_inputs.size()), "raw_packet6_client/0.1/recv");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	RawPacket6Client01RecvRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_raw_packet6_client_0_1_recv, pxa_outputs);
	async_raw_packet6_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv6(),
	    xa_inputs.get(3, "dst_address").ipv6(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "ext_headers_type").list(),
	    xa_inputs.get(10, "ext_headers_payload").list(),
	    xa_inputs.get(11, "payload").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet6_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv6(),
	    xa_inputs.get(3, "dst_address").ipv6(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "ext_headers_type").list(),
	    xa_inputs.get(10, "ext_headers_payload").list(),
	    xa_inputs.get(11, "payload").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "raw_packet6_client/0.1/recv", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/enable_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_enable_vif(
	const string&	arg_vif_name,
	const bool&	arg_enable,
	Mld6Igmp01EnableVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_enable_vif(
        arg_vif_name,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/enable_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01EnableVifRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_vif, pxa_outputs);
	async_mld6igmp_0_1_enable_vif(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_enable_vif(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/enable_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/start_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_start_vif(
	const string&	arg_vif_name,
	Mld6Igmp01StartVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_start_vif(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/start_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StartVifRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_vif, pxa_outputs);
	async_mld6igmp_0_1_start_vif(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_start_vif(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/start_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_vif
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/stop_vif", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_stop_vif(
	const string&	arg_vif_name,
	Mld6Igmp01StopVifCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_stop_vif(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_vif(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/stop_vif");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StopVifRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_vif, pxa_outputs);
	async_mld6igmp_0_1_stop_vif(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_stop_vif(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/stop_vif", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_all_vifs
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/enable_all_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_enable_all_vifs(
	const bool&	arg_enable,
	Mld6Igmp01EnableAllVifsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_enable_all_vifs(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_all_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/enable_all_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01EnableAllVifsRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_all_vifs, pxa_outputs);
	async_mld6igmp_0_1_enable_all_vifs(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_enable_all_vifs(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/enable_all_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_all_vifs
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/start_all_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_start_all_vifs(
	Mld6Igmp01StartAllVifsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_start_all_vifs();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_all_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/start_all_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StartAllVifsRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_all_vifs, pxa_outputs);
	async_mld6igmp_0_1_start_all_vifs( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_start_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/start_all_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_all_vifs
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/stop_all_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_stop_all_vifs(
	Mld6Igmp01StopAllVifsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_stop_all_vifs();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_all_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/stop_all_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StopAllVifsRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_all_vifs, pxa_outputs);
	async_mld6igmp_0_1_stop_all_vifs( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_stop_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/stop_all_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_mld6igmp
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/enable_mld6igmp", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_enable_mld6igmp(
	const bool&	arg_enable,
	Mld6Igmp01EnableMld6IgmpCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_enable_mld6igmp(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_mld6igmp(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/enable_mld6igmp");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01EnableMld6IgmpRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_mld6igmp, pxa_outputs);
	async_mld6igmp_0_1_enable_mld6igmp(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_enable_mld6igmp(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/enable_mld6igmp", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_mld6igmp
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/start_mld6igmp", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_start_mld6igmp(
	Mld6Igmp01StartMld6IgmpCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_start_mld6igmp();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_mld6igmp(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/start_mld6igmp");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StartMld6IgmpRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_mld6igmp, pxa_outputs);
	async_mld6igmp_0_1_start_mld6igmp( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_start_mld6igmp();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/start_mld6igmp", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_mld6igmp
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/stop_mld6igmp", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_stop_mld6igmp(
	Mld6Igmp01StopMld6IgmpCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_stop_mld6igmp();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_mld6igmp(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/stop_mld6igmp");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StopMld6IgmpRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_mld6igmp, pxa_outputs);
	async_mld6igmp_0_1_stop_mld6igmp( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_stop_mld6igmp();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/stop_mld6igmp", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/enable_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_enable_cli(
	const bool&	arg_enable,
	Mld6Igmp01EnableCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_enable_cli(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/enable_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01EnableCliRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_enable_cli, pxa_outputs);
	async_mld6igmp_0_1_enable_cli(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_enable_cli(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/enable_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/start_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_start_cli(
	Mld6Igmp01StartCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_start_cli();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/start_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StartCliRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_start_cli, pxa_outputs);
	async_mld6igmp_0_1_start_cli( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_start_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/start_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_cli
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/stop_cli", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_stop_cli(
	Mld6Igmp01StopCliCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_stop_cli();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_cli(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/stop_cli");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01StopCliRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_stop_cli, pxa_outputs);
	async_mld6igmp_0_1_stop_cli( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_stop_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/stop_cli", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_proto_version
    (const XrlCmdError &e,
     const uint32_t* rarg_proto_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/get_vif_proto_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("proto_version", *rarg_proto_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_get_vif_proto_version(
	const string&	arg_vif_name,
	Mld6Igmp01GetVifProtoVersionCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_proto_version;
    XrlCmdError e = mld6igmp_0_1_get_vif_proto_version(
        arg_vif_name,
        rarg_proto_version);
    return c_b->dispatch(e,
        &rarg_proto_version);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_proto_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/get_vif_proto_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01GetVifProtoVersionRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_proto_version, pxa_outputs);
	async_mld6igmp_0_1_get_vif_proto_version(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_proto_version;
    try {
	XrlCmdError e = mld6igmp_0_1_get_vif_proto_version(
	    xa_inputs.get(0, "vif_name").text(),
	    r_proto_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/get_vif_proto_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("proto_version", r_proto_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_proto_version
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/set_vif_proto_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_set_vif_proto_version(
	const string&	arg_vif_name,
	const uint32_t&	arg_proto_version,
	Mld6Igmp01SetVifProtoVersionCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_set_vif_proto_version(
        arg_vif_name,
        arg_proto_version);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_proto_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/set_vif_proto_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01SetVifProtoVersionRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_proto_version, pxa_outputs);
	async_mld6igmp_0_1_set_vif_proto_version(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "proto_version").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_set_vif_proto_version(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "proto_version").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/set_vif_proto_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_proto_version
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/reset_vif_proto_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_reset_vif_proto_version(
	const string&	arg_vif_name,
	Mld6Igmp01ResetVifProtoVersionCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_reset_vif_proto_version(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_proto_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/reset_vif_proto_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01ResetVifProtoVersionRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_proto_version, pxa_outputs);
	async_mld6igmp_0_1_reset_vif_proto_version(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_reset_vif_proto_version(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/reset_vif_proto_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_ip_router_alert_option_check
    (const XrlCmdError &e,
     const bool* rarg_enabled,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/get_vif_ip_router_alert_option_check", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("enabled", *rarg_enabled);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_get_vif_ip_router_alert_option_check(
	const string&	arg_vif_name,
	Mld6Igmp01GetVifIpRouterAlertOptionCheckCB c_b)
{

    /* Return value declarations */
    bool rarg_enabled;
    XrlCmdError e = mld6igmp_0_1_get_vif_ip_router_alert_option_check(
        arg_vif_name,
        rarg_enabled);
    return c_b->dispatch(e,
        &rarg_enabled);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_ip_router_alert_option_check(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/get_vif_ip_router_alert_option_check");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01GetVifIpRouterAlertOptionCheckRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_ip_router_alert_option_check, pxa_outputs);
	async_mld6igmp_0_1_get_vif_ip_router_alert_option_check(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_enabled;
    try {
	XrlCmdError e = mld6igmp_0_1_get_vif_ip_router_alert_option_check(
	    xa_inputs.get(0, "vif_name").text(),
	    r_enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/get_vif_ip_router_alert_option_check", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("enabled", r_enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_ip_router_alert_option_check
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/set_vif_ip_router_alert_option_check", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_set_vif_ip_router_alert_option_check(
	const string&	arg_vif_name,
	const bool&	arg_enable,
	Mld6Igmp01SetVifIpRouterAlertOptionCheckCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_set_vif_ip_router_alert_option_check(
        arg_vif_name,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_ip_router_alert_option_check(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/set_vif_ip_router_alert_option_check");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01SetVifIpRouterAlertOptionCheckRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_ip_router_alert_option_check, pxa_outputs);
	async_mld6igmp_0_1_set_vif_ip_router_alert_option_check(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_set_vif_ip_router_alert_option_check(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/set_vif_ip_router_alert_option_check", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_ip_router_alert_option_check
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/reset_vif_ip_router_alert_option_check", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_reset_vif_ip_router_alert_option_check(
	const string&	arg_vif_name,
	Mld6Igmp01ResetVifIpRouterAlertOptionCheckCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_reset_vif_ip_router_alert_option_check(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_ip_router_alert_option_check(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/reset_vif_ip_router_alert_option_check");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01ResetVifIpRouterAlertOptionCheckRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_ip_router_alert_option_check, pxa_outputs);
	async_mld6igmp_0_1_reset_vif_ip_router_alert_option_check(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_reset_vif_ip_router_alert_option_check(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/reset_vif_ip_router_alert_option_check", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_query_interval
    (const XrlCmdError &e,
     const uint32_t* rarg_interval_sec,
     const uint32_t* rarg_interval_usec,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/get_vif_query_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("interval_sec", *rarg_interval_sec);
	    out.add("interval_usec", *rarg_interval_usec);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_get_vif_query_interval(
	const string&	arg_vif_name,
	Mld6Igmp01GetVifQueryIntervalCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_interval_sec;
    uint32_t rarg_interval_usec;
    XrlCmdError e = mld6igmp_0_1_get_vif_query_interval(
        arg_vif_name,
        rarg_interval_sec,
        rarg_interval_usec);
    return c_b->dispatch(e,
        &rarg_interval_sec,
        &rarg_interval_usec);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_query_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/get_vif_query_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01GetVifQueryIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_query_interval, pxa_outputs);
	async_mld6igmp_0_1_get_vif_query_interval(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_interval_sec;
    uint32_t r_interval_usec;
    try {
	XrlCmdError e = mld6igmp_0_1_get_vif_query_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    r_interval_sec,
	    r_interval_usec);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/get_vif_query_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("interval_sec", r_interval_sec);
	pxa_outputs->add("interval_usec", r_interval_usec);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_query_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/set_vif_query_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_set_vif_query_interval(
	const string&	arg_vif_name,
	const uint32_t&	arg_interval_sec,
	const uint32_t&	arg_interval_usec,
	Mld6Igmp01SetVifQueryIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_set_vif_query_interval(
        arg_vif_name,
        arg_interval_sec,
        arg_interval_usec);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_query_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/set_vif_query_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01SetVifQueryIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_query_interval, pxa_outputs);
	async_mld6igmp_0_1_set_vif_query_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "interval_sec").uint32(),
	    xa_inputs.get(2, "interval_usec").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_set_vif_query_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "interval_sec").uint32(),
	    xa_inputs.get(2, "interval_usec").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/set_vif_query_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_query_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/reset_vif_query_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_reset_vif_query_interval(
	const string&	arg_vif_name,
	Mld6Igmp01ResetVifQueryIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_reset_vif_query_interval(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_query_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/reset_vif_query_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01ResetVifQueryIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_query_interval, pxa_outputs);
	async_mld6igmp_0_1_reset_vif_query_interval(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_reset_vif_query_interval(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/reset_vif_query_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_query_last_member_interval
    (const XrlCmdError &e,
     const uint32_t* rarg_interval_sec,
     const uint32_t* rarg_interval_usec,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/get_vif_query_last_member_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("interval_sec", *rarg_interval_sec);
	    out.add("interval_usec", *rarg_interval_usec);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_get_vif_query_last_member_interval(
	const string&	arg_vif_name,
	Mld6Igmp01GetVifQueryLastMemberIntervalCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_interval_sec;
    uint32_t rarg_interval_usec;
    XrlCmdError e = mld6igmp_0_1_get_vif_query_last_member_interval(
        arg_vif_name,
        rarg_interval_sec,
        rarg_interval_usec);
    return c_b->dispatch(e,
        &rarg_interval_sec,
        &rarg_interval_usec);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_query_last_member_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/get_vif_query_last_member_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01GetVifQueryLastMemberIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_query_last_member_interval, pxa_outputs);
	async_mld6igmp_0_1_get_vif_query_last_member_interval(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_interval_sec;
    uint32_t r_interval_usec;
    try {
	XrlCmdError e = mld6igmp_0_1_get_vif_query_last_member_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    r_interval_sec,
	    r_interval_usec);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/get_vif_query_last_member_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("interval_sec", r_interval_sec);
	pxa_outputs->add("interval_usec", r_interval_usec);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_query_last_member_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/set_vif_query_last_member_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_set_vif_query_last_member_interval(
	const string&	arg_vif_name,
	const uint32_t&	arg_interval_sec,
	const uint32_t&	arg_interval_usec,
	Mld6Igmp01SetVifQueryLastMemberIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_set_vif_query_last_member_interval(
        arg_vif_name,
        arg_interval_sec,
        arg_interval_usec);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_query_last_member_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/set_vif_query_last_member_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01SetVifQueryLastMemberIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_query_last_member_interval, pxa_outputs);
	async_mld6igmp_0_1_set_vif_query_last_member_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "interval_sec").uint32(),
	    xa_inputs.get(2, "interval_usec").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_set_vif_query_last_member_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "interval_sec").uint32(),
	    xa_inputs.get(2, "interval_usec").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/set_vif_query_last_member_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_query_last_member_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/reset_vif_query_last_member_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_reset_vif_query_last_member_interval(
	const string&	arg_vif_name,
	Mld6Igmp01ResetVifQueryLastMemberIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_reset_vif_query_last_member_interval(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_query_last_member_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/reset_vif_query_last_member_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01ResetVifQueryLastMemberIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_query_last_member_interval, pxa_outputs);
	async_mld6igmp_0_1_reset_vif_query_last_member_interval(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_reset_vif_query_last_member_interval(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/reset_vif_query_last_member_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_query_response_interval
    (const XrlCmdError &e,
     const uint32_t* rarg_interval_sec,
     const uint32_t* rarg_interval_usec,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/get_vif_query_response_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("interval_sec", *rarg_interval_sec);
	    out.add("interval_usec", *rarg_interval_usec);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_get_vif_query_response_interval(
	const string&	arg_vif_name,
	Mld6Igmp01GetVifQueryResponseIntervalCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_interval_sec;
    uint32_t rarg_interval_usec;
    XrlCmdError e = mld6igmp_0_1_get_vif_query_response_interval(
        arg_vif_name,
        rarg_interval_sec,
        rarg_interval_usec);
    return c_b->dispatch(e,
        &rarg_interval_sec,
        &rarg_interval_usec);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_query_response_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/get_vif_query_response_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01GetVifQueryResponseIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_query_response_interval, pxa_outputs);
	async_mld6igmp_0_1_get_vif_query_response_interval(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_interval_sec;
    uint32_t r_interval_usec;
    try {
	XrlCmdError e = mld6igmp_0_1_get_vif_query_response_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    r_interval_sec,
	    r_interval_usec);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/get_vif_query_response_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("interval_sec", r_interval_sec);
	pxa_outputs->add("interval_usec", r_interval_usec);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_query_response_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/set_vif_query_response_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_set_vif_query_response_interval(
	const string&	arg_vif_name,
	const uint32_t&	arg_interval_sec,
	const uint32_t&	arg_interval_usec,
	Mld6Igmp01SetVifQueryResponseIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_set_vif_query_response_interval(
        arg_vif_name,
        arg_interval_sec,
        arg_interval_usec);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_query_response_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/set_vif_query_response_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01SetVifQueryResponseIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_query_response_interval, pxa_outputs);
	async_mld6igmp_0_1_set_vif_query_response_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "interval_sec").uint32(),
	    xa_inputs.get(2, "interval_usec").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_set_vif_query_response_interval(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "interval_sec").uint32(),
	    xa_inputs.get(2, "interval_usec").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/set_vif_query_response_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_query_response_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/reset_vif_query_response_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_reset_vif_query_response_interval(
	const string&	arg_vif_name,
	Mld6Igmp01ResetVifQueryResponseIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_reset_vif_query_response_interval(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_query_response_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/reset_vif_query_response_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01ResetVifQueryResponseIntervalRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_query_response_interval, pxa_outputs);
	async_mld6igmp_0_1_reset_vif_query_response_interval(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_reset_vif_query_response_interval(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/reset_vif_query_response_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_robust_count
    (const XrlCmdError &e,
     const uint32_t* rarg_robust_count,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/get_vif_robust_count", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("robust_count", *rarg_robust_count);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_get_vif_robust_count(
	const string&	arg_vif_name,
	Mld6Igmp01GetVifRobustCountCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_robust_count;
    XrlCmdError e = mld6igmp_0_1_get_vif_robust_count(
        arg_vif_name,
        rarg_robust_count);
    return c_b->dispatch(e,
        &rarg_robust_count);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_get_vif_robust_count(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/get_vif_robust_count");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01GetVifRobustCountRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_get_vif_robust_count, pxa_outputs);
	async_mld6igmp_0_1_get_vif_robust_count(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_robust_count;
    try {
	XrlCmdError e = mld6igmp_0_1_get_vif_robust_count(
	    xa_inputs.get(0, "vif_name").text(),
	    r_robust_count);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/get_vif_robust_count", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("robust_count", r_robust_count);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_robust_count
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/set_vif_robust_count", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_set_vif_robust_count(
	const string&	arg_vif_name,
	const uint32_t&	arg_robust_count,
	Mld6Igmp01SetVifRobustCountCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_set_vif_robust_count(
        arg_vif_name,
        arg_robust_count);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_set_vif_robust_count(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/set_vif_robust_count");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01SetVifRobustCountRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_set_vif_robust_count, pxa_outputs);
	async_mld6igmp_0_1_set_vif_robust_count(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "robust_count").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_set_vif_robust_count(
	    xa_inputs.get(0, "vif_name").text(),
	    xa_inputs.get(1, "robust_count").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/set_vif_robust_count", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_robust_count
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/reset_vif_robust_count", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_reset_vif_robust_count(
	const string&	arg_vif_name,
	Mld6Igmp01ResetVifRobustCountCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_reset_vif_robust_count(
        arg_vif_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_reset_vif_robust_count(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/reset_vif_robust_count");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01ResetVifRobustCountRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_reset_vif_robust_count, pxa_outputs);
	async_mld6igmp_0_1_reset_vif_robust_count(
	    xa_inputs.get(0, "vif_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_reset_vif_robust_count(
	    xa_inputs.get(0, "vif_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/reset_vif_robust_count", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_log_trace_all
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/log_trace_all", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_log_trace_all(
	const bool&	arg_enable,
	Mld6Igmp01LogTraceAllCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_log_trace_all(
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_log_trace_all(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/log_trace_all");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01LogTraceAllRF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_log_trace_all, pxa_outputs);
	async_mld6igmp_0_1_log_trace_all(
	    xa_inputs.get(0, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_log_trace_all(
	    xa_inputs.get(0, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/log_trace_all", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_add_protocol4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/add_protocol4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_add_protocol4(
	const string&	arg_xrl_sender_name,
	const string&	arg_protocol_name,
	const uint32_t&	arg_protocol_id,
	const string&	arg_vif_name,
	const uint32_t&	arg_vif_index,
	Mld6Igmp01AddProtocol4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_add_protocol4(
        arg_xrl_sender_name,
        arg_protocol_name,
        arg_protocol_id,
        arg_vif_name,
        arg_vif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_add_protocol4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/add_protocol4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01AddProtocol4RF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_add_protocol4, pxa_outputs);
	async_mld6igmp_0_1_add_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_add_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/add_protocol4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_add_protocol6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/add_protocol6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_add_protocol6(
	const string&	arg_xrl_sender_name,
	const string&	arg_protocol_name,
	const uint32_t&	arg_protocol_id,
	const string&	arg_vif_name,
	const uint32_t&	arg_vif_index,
	Mld6Igmp01AddProtocol6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_add_protocol6(
        arg_xrl_sender_name,
        arg_protocol_name,
        arg_protocol_id,
        arg_vif_name,
        arg_vif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_add_protocol6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/add_protocol6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01AddProtocol6RF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_add_protocol6, pxa_outputs);
	async_mld6igmp_0_1_add_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_add_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/add_protocol6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_delete_protocol4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/delete_protocol4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_delete_protocol4(
	const string&	arg_xrl_sender_name,
	const string&	arg_protocol_name,
	const uint32_t&	arg_protocol_id,
	const string&	arg_vif_name,
	const uint32_t&	arg_vif_index,
	Mld6Igmp01DeleteProtocol4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_delete_protocol4(
        arg_xrl_sender_name,
        arg_protocol_name,
        arg_protocol_id,
        arg_vif_name,
        arg_vif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_delete_protocol4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/delete_protocol4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01DeleteProtocol4RF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_delete_protocol4, pxa_outputs);
	async_mld6igmp_0_1_delete_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_delete_protocol4(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/delete_protocol4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlMld6igmpTargetBase::callback_mld6igmp_0_1_delete_protocol6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "mld6igmp/0.1/delete_protocol6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlMld6igmpTargetBase::async_mld6igmp_0_1_delete_protocol6(
	const string&	arg_xrl_sender_name,
	const string&	arg_protocol_name,
	const uint32_t&	arg_protocol_id,
	const string&	arg_vif_name,
	const uint32_t&	arg_vif_index,
	Mld6Igmp01DeleteProtocol6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = mld6igmp_0_1_delete_protocol6(
        arg_xrl_sender_name,
        arg_protocol_name,
        arg_protocol_id,
        arg_vif_name,
        arg_vif_index);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_delete_protocol6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "mld6igmp/0.1/delete_protocol6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Mld6Igmp01DeleteProtocol6RF mycb =
	    callback(this, &XrlMld6igmpTargetBase::callback_mld6igmp_0_1_delete_protocol6, pxa_outputs);
	async_mld6igmp_0_1_delete_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_0_1_delete_protocol6(
	    xa_inputs.get(0, "xrl_sender_name").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_id").uint32(),
	    xa_inputs.get(3, "vif_name").text(),
	    xa_inputs.get(4, "vif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "mld6igmp/0.1/delete_protocol6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlMld6igmpTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "mld6igmp", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlMld6igmpTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
