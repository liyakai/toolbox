/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/test_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_TEST_BASE_HH__
#define __XRL_TARGETS_TEST_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlTestTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlTestTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlTestTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlTestTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "test/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Print "hello world".
     */
    virtual XrlCmdError test_1_0_print_hello_world() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Test10PrintHelloWorldRF;

    class Test10PrintHelloWorldCB {
        Test10PrintHelloWorldRF cb;

    public:
        operator const Test10PrintHelloWorldRF& () const { return cb; }
        const Test10PrintHelloWorldRF& operator ->() const { return cb; }
        Test10PrintHelloWorldCB(const Test10PrintHelloWorldRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Test10PrintHelloWorldRsp :
      public Test10PrintHelloWorldCB {
        Test10PrintHelloWorldRsp(const Test10PrintHelloWorldRF& cb)
          : Test10PrintHelloWorldCB(cb) { }

    };

    virtual void async_test_1_0_print_hello_world
       (
	Test10PrintHelloWorldCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Print "hello world" and a user supplied greeting.
     *
     *  @param msg greeting to be printed.
     */
    virtual XrlCmdError test_1_0_print_hello_world_and_message(
	// Input values,
	const string&	msg) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Test10PrintHelloWorldAndMessageRF;

    class Test10PrintHelloWorldAndMessageCB {
        Test10PrintHelloWorldAndMessageRF cb;

    public:
        operator const Test10PrintHelloWorldAndMessageRF& () const { return cb; }
        const Test10PrintHelloWorldAndMessageRF& operator ->() const { return cb; }
        Test10PrintHelloWorldAndMessageCB(const Test10PrintHelloWorldAndMessageRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Test10PrintHelloWorldAndMessageRsp :
      public Test10PrintHelloWorldAndMessageCB {
        Test10PrintHelloWorldAndMessageRsp(const Test10PrintHelloWorldAndMessageRF& cb)
          : Test10PrintHelloWorldAndMessageCB(cb) { }

    };

    virtual void async_test_1_0_print_hello_world_and_message
       (
	const string&	msg,
	Test10PrintHelloWorldAndMessageCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Count number of greetings available.
     */
    virtual XrlCmdError test_1_0_get_greeting_count(
	// Output values,
	int32_t&	num_msgs) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const int32_t*>::RefPtr
    Test10GetGreetingCountRF;

    class Test10GetGreetingCountCB {
        Test10GetGreetingCountRF cb;

    public:
        operator const Test10GetGreetingCountRF& () const { return cb; }
        const Test10GetGreetingCountRF& operator ->() const { return cb; }
        Test10GetGreetingCountCB(const Test10GetGreetingCountRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const int32_t& arg_num_msgs) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_num_msgs);
        }
    };

    struct Test10GetGreetingCountRsp :
      public Test10GetGreetingCountCB {
        struct args_str {
            int32_t num_msgs;
        };

    private:
        args_str args;

    public:
        Test10GetGreetingCountRsp(const Test10GetGreetingCountRF& cb)
          : Test10GetGreetingCountCB(cb) { }

        void respond() const {
            Test10GetGreetingCountCB::
            respond(args.num_msgs);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_test_1_0_get_greeting_count
       (
	Test10GetGreetingCountCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get greeting.
     *
     *  @param greeting_num index of greeting.
     *
     *  @param greeting text of greeting.
     */
    virtual XrlCmdError test_1_0_get_greeting(
	// Input values,
	const int32_t&	greeting_num,
	// Output values,
	string&	greeting) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Test10GetGreetingRF;

    class Test10GetGreetingCB {
        Test10GetGreetingRF cb;

    public:
        operator const Test10GetGreetingRF& () const { return cb; }
        const Test10GetGreetingRF& operator ->() const { return cb; }
        Test10GetGreetingCB(const Test10GetGreetingRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_greeting) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_greeting);
        }
    };

    struct Test10GetGreetingRsp :
      public Test10GetGreetingCB {
        struct args_str {
            string greeting;
        };

    private:
        args_str args;

    public:
        Test10GetGreetingRsp(const Test10GetGreetingRF& cb)
          : Test10GetGreetingCB(cb) { }

        void respond() const {
            Test10GetGreetingCB::
            respond(args.greeting);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_test_1_0_get_greeting
       (
	const int32_t&	greeting_num,
	Test10GetGreetingCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Something that always fails.
     */
    virtual XrlCmdError test_1_0_shoot_foot() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Test10ShootFootRF;

    class Test10ShootFootCB {
        Test10ShootFootRF cb;

    public:
        operator const Test10ShootFootRF& () const { return cb; }
        const Test10ShootFootRF& operator ->() const { return cb; }
        Test10ShootFootCB(const Test10ShootFootRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Test10ShootFootRsp :
      public Test10ShootFootCB {
        Test10ShootFootRsp(const Test10ShootFootRF& cb)
          : Test10ShootFootCB(cb) { }

    };

    virtual void async_test_1_0_shoot_foot
       (
	Test10ShootFootCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Handle IEEE754 binary64 format.
     */
    virtual XrlCmdError test_1_0_float_my_point(
	// Input values,
	const fp64_t&	input,
	// Output values,
	fp64_t&	output) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const fp64_t*>::RefPtr
    Test10FloatMyPointRF;

    class Test10FloatMyPointCB {
        Test10FloatMyPointRF cb;

    public:
        operator const Test10FloatMyPointRF& () const { return cb; }
        const Test10FloatMyPointRF& operator ->() const { return cb; }
        Test10FloatMyPointCB(const Test10FloatMyPointRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const fp64_t& arg_output) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_output);
        }
    };

    struct Test10FloatMyPointRsp :
      public Test10FloatMyPointCB {
        struct args_str {
            fp64_t output;
        };

    private:
        args_str args;

    public:
        Test10FloatMyPointRsp(const Test10FloatMyPointRF& cb)
          : Test10FloatMyPointCB(cb) { }

        void respond() const {
            Test10FloatMyPointCB::
            respond(args.output);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_test_1_0_float_my_point
       (
	const fp64_t&	input,
	Test10FloatMyPointCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_1_0_print_hello_world(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_1_0_print_hello_world
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_1_0_print_hello_world_and_message(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_1_0_print_hello_world_and_message
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_1_0_get_greeting_count(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_1_0_get_greeting_count
       (const XrlCmdError &e,
	const int32_t* arg_num_msgs,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_1_0_get_greeting(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_1_0_get_greeting
       (const XrlCmdError &e,
	const string* arg_greeting,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_1_0_shoot_foot(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_1_0_shoot_foot
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_test_1_0_float_my_point(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_test_1_0_float_my_point
       (const XrlCmdError &e,
	const fp64_t* arg_output,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlTestTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_TEST_BASE_HH__
