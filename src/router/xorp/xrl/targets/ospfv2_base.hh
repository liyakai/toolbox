/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/ospfv2_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_OSPFV2_BASE_HH__
#define __XRL_TARGETS_OSPFV2_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlOspfv2Target"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlOspfv2TargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlOspfv2TargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlOspfv2TargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "ospfv2/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Receive an IPv4 packet from a raw socket.
     *
     *  @param if_name the interface name the packet arrived on.
     *
     *  @param vif_name the vif name the packet arrived on.
     *
     *  @param src_address the IP source address.
     *
     *  @param dst_address the IP destination address.
     *
     *  @param ip_protocol the IP protocol number.
     *
     *  @param ip_ttl the IP TTL (hop-limit). If it has a negative value, then
     *  the received value is unknown.
     *
     *  @param ip_tos the Type of Service (Diffserv/ECN bits for IPv4). If it
     *  has a negative value, then the received value is unknown.
     *
     *  @param ip_router_alert if true, the IP Router Alert option was included
     *  in the IP packet.
     *
     *  @param ip_internet_control if true, then this is IP control traffic.
     *
     *  @param payload the payload, everything after the IP header and options.
     */
    virtual XrlCmdError raw_packet4_client_0_1_recv(
	// Input values,
	const string&	if_name,
	const string&	vif_name,
	const IPv4&	src_address,
	const IPv4&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const vector<uint8_t>&	payload) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    RawPacket4Client01RecvRF;

    class RawPacket4Client01RecvCB {
        RawPacket4Client01RecvRF cb;

    public:
        operator const RawPacket4Client01RecvRF& () const { return cb; }
        const RawPacket4Client01RecvRF& operator ->() const { return cb; }
        RawPacket4Client01RecvCB(const RawPacket4Client01RecvRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct RawPacket4Client01RecvRsp :
      public RawPacket4Client01RecvCB {
        RawPacket4Client01RecvRsp(const RawPacket4Client01RecvRF& cb)
          : RawPacket4Client01RecvCB(cb) { }

    };

    virtual void async_raw_packet4_client_0_1_recv
       (
	const string&	if_name,
	const string&	vif_name,
	const IPv4&	src_address,
	const IPv4&	dst_address,
	const uint32_t&	ip_protocol,
	const int32_t&	ip_ttl,
	const int32_t&	ip_tos,
	const bool&	ip_router_alert,
	const bool&	ip_internet_control,
	const vector<uint8_t>&	payload,
	RawPacket4Client01RecvCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Configure a policy filter.
     *
     *  @param filter the identifier of the filter to configure.
     *
     *  @param conf the configuration of the filter.
     */
    virtual XrlCmdError policy_backend_0_1_configure(
	// Input values,
	const uint32_t&	filter,
	const string&	conf) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    PolicyBackend01ConfigureRF;

    class PolicyBackend01ConfigureCB {
        PolicyBackend01ConfigureRF cb;

    public:
        operator const PolicyBackend01ConfigureRF& () const { return cb; }
        const PolicyBackend01ConfigureRF& operator ->() const { return cb; }
        PolicyBackend01ConfigureCB(const PolicyBackend01ConfigureRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct PolicyBackend01ConfigureRsp :
      public PolicyBackend01ConfigureCB {
        PolicyBackend01ConfigureRsp(const PolicyBackend01ConfigureRF& cb)
          : PolicyBackend01ConfigureCB(cb) { }

    };

    virtual void async_policy_backend_0_1_configure
       (
	const uint32_t&	filter,
	const string&	conf,
	PolicyBackend01ConfigureCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Reset a policy filter.
     *
     *  @param filter the identifier of the filter to reset.
     */
    virtual XrlCmdError policy_backend_0_1_reset(
	// Input values,
	const uint32_t&	filter) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    PolicyBackend01ResetRF;

    class PolicyBackend01ResetCB {
        PolicyBackend01ResetRF cb;

    public:
        operator const PolicyBackend01ResetRF& () const { return cb; }
        const PolicyBackend01ResetRF& operator ->() const { return cb; }
        PolicyBackend01ResetCB(const PolicyBackend01ResetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct PolicyBackend01ResetRsp :
      public PolicyBackend01ResetCB {
        PolicyBackend01ResetRsp(const PolicyBackend01ResetRF& cb)
          : PolicyBackend01ResetCB(cb) { }

    };

    virtual void async_policy_backend_0_1_reset
       (
	const uint32_t&	filter,
	PolicyBackend01ResetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Push all available routes through all filters for re-filtering.
     */
    virtual XrlCmdError policy_backend_0_1_push_routes() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    PolicyBackend01PushRoutesRF;

    class PolicyBackend01PushRoutesCB {
        PolicyBackend01PushRoutesRF cb;

    public:
        operator const PolicyBackend01PushRoutesRF& () const { return cb; }
        const PolicyBackend01PushRoutesRF& operator ->() const { return cb; }
        PolicyBackend01PushRoutesCB(const PolicyBackend01PushRoutesRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct PolicyBackend01PushRoutesRsp :
      public PolicyBackend01PushRoutesCB {
        PolicyBackend01PushRoutesRsp(const PolicyBackend01PushRoutesRF& cb)
          : PolicyBackend01PushRoutesCB(cb) { }

    };

    virtual void async_policy_backend_0_1_push_routes
       (
	PolicyBackend01PushRoutesCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Start route redistribution for an IPv4 route.
     *
     *  @param network the route to advertise.
     *
     *  @param unicast whether the route is unicast.
     *
     *  @param multicast whether the route is multicast.
     *
     *  @param nexthop the nexthop of the route.
     *
     *  @param metric the metric of the route.
     *
     *  @param policytags the set of policy-tags associated with the route.
     */
    virtual XrlCmdError policy_redist4_0_1_add_route4(
	// Input values,
	const IPv4Net&	network,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4&	nexthop,
	const uint32_t&	metric,
	const XrlAtomList&	policytags) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    PolicyRedist401AddRoute4RF;

    class PolicyRedist401AddRoute4CB {
        PolicyRedist401AddRoute4RF cb;

    public:
        operator const PolicyRedist401AddRoute4RF& () const { return cb; }
        const PolicyRedist401AddRoute4RF& operator ->() const { return cb; }
        PolicyRedist401AddRoute4CB(const PolicyRedist401AddRoute4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct PolicyRedist401AddRoute4Rsp :
      public PolicyRedist401AddRoute4CB {
        PolicyRedist401AddRoute4Rsp(const PolicyRedist401AddRoute4RF& cb)
          : PolicyRedist401AddRoute4CB(cb) { }

    };

    virtual void async_policy_redist4_0_1_add_route4
       (
	const IPv4Net&	network,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4&	nexthop,
	const uint32_t&	metric,
	const XrlAtomList&	policytags,
	PolicyRedist401AddRoute4CB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Terminate route redistribution for an IPv4 route.
     *
     *  @param network the route for which advertisements should cease.
     *
     *  @param unicast whether the route is unicast.
     *
     *  @param multicast whether the route is multicast.
     */
    virtual XrlCmdError policy_redist4_0_1_delete_route4(
	// Input values,
	const IPv4Net&	network,
	const bool&	unicast,
	const bool&	multicast) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    PolicyRedist401DeleteRoute4RF;

    class PolicyRedist401DeleteRoute4CB {
        PolicyRedist401DeleteRoute4RF cb;

    public:
        operator const PolicyRedist401DeleteRoute4RF& () const { return cb; }
        const PolicyRedist401DeleteRoute4RF& operator ->() const { return cb; }
        PolicyRedist401DeleteRoute4CB(const PolicyRedist401DeleteRoute4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct PolicyRedist401DeleteRoute4Rsp :
      public PolicyRedist401DeleteRoute4CB {
        PolicyRedist401DeleteRoute4Rsp(const PolicyRedist401DeleteRoute4RF& cb)
          : PolicyRedist401DeleteRoute4CB(cb) { }

    };

    virtual void async_policy_redist4_0_1_delete_route4
       (
	const IPv4Net&	network,
	const bool&	unicast,
	const bool&	multicast,
	PolicyRedist401DeleteRoute4CB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set router id
     */
    virtual XrlCmdError ospfv2_0_1_set_router_id(
	// Input values,
	const IPv4&	id) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetRouterIdRF;

    class Ospfv201SetRouterIdCB {
        Ospfv201SetRouterIdRF cb;

    public:
        operator const Ospfv201SetRouterIdRF& () const { return cb; }
        const Ospfv201SetRouterIdRF& operator ->() const { return cb; }
        Ospfv201SetRouterIdCB(const Ospfv201SetRouterIdRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetRouterIdRsp :
      public Ospfv201SetRouterIdCB {
        Ospfv201SetRouterIdRsp(const Ospfv201SetRouterIdRF& cb)
          : Ospfv201SetRouterIdCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_router_id
       (
	const IPv4&	id,
	Ospfv201SetRouterIdCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set RFC 1583 compatibility.
     */
    virtual XrlCmdError ospfv2_0_1_set_rfc1583_compatibility(
	// Input values,
	const bool&	compatibility) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetRfc1583CompatibilityRF;

    class Ospfv201SetRfc1583CompatibilityCB {
        Ospfv201SetRfc1583CompatibilityRF cb;

    public:
        operator const Ospfv201SetRfc1583CompatibilityRF& () const { return cb; }
        const Ospfv201SetRfc1583CompatibilityRF& operator ->() const { return cb; }
        Ospfv201SetRfc1583CompatibilityCB(const Ospfv201SetRfc1583CompatibilityRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetRfc1583CompatibilityRsp :
      public Ospfv201SetRfc1583CompatibilityCB {
        Ospfv201SetRfc1583CompatibilityRsp(const Ospfv201SetRfc1583CompatibilityRF& cb)
          : Ospfv201SetRfc1583CompatibilityCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_rfc1583_compatibility
       (
	const bool&	compatibility,
	Ospfv201SetRfc1583CompatibilityCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the router alert in the IP options.
     */
    virtual XrlCmdError ospfv2_0_1_set_ip_router_alert(
	// Input values,
	const bool&	ip_router_alert) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetIpRouterAlertRF;

    class Ospfv201SetIpRouterAlertCB {
        Ospfv201SetIpRouterAlertRF cb;

    public:
        operator const Ospfv201SetIpRouterAlertRF& () const { return cb; }
        const Ospfv201SetIpRouterAlertRF& operator ->() const { return cb; }
        Ospfv201SetIpRouterAlertCB(const Ospfv201SetIpRouterAlertRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetIpRouterAlertRsp :
      public Ospfv201SetIpRouterAlertCB {
        Ospfv201SetIpRouterAlertRsp(const Ospfv201SetIpRouterAlertRF& cb)
          : Ospfv201SetIpRouterAlertCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_ip_router_alert
       (
	const bool&	ip_router_alert,
	Ospfv201SetIpRouterAlertCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create an area.
     *
     *  @param area id of the area
     *
     *  @param type of area "border", "stub", "nssa"
     */
    virtual XrlCmdError ospfv2_0_1_create_area_router(
	// Input values,
	const IPv4&	area,
	const string&	type) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201CreateAreaRouterRF;

    class Ospfv201CreateAreaRouterCB {
        Ospfv201CreateAreaRouterRF cb;

    public:
        operator const Ospfv201CreateAreaRouterRF& () const { return cb; }
        const Ospfv201CreateAreaRouterRF& operator ->() const { return cb; }
        Ospfv201CreateAreaRouterCB(const Ospfv201CreateAreaRouterRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201CreateAreaRouterRsp :
      public Ospfv201CreateAreaRouterCB {
        Ospfv201CreateAreaRouterRsp(const Ospfv201CreateAreaRouterRF& cb)
          : Ospfv201CreateAreaRouterCB(cb) { }

    };

    virtual void async_ospfv2_0_1_create_area_router
       (
	const IPv4&	area,
	const string&	type,
	Ospfv201CreateAreaRouterCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Change area type.
     *
     *  @param area id of the area
     *
     *  @param type of area "border", "stub", "nssa"
     */
    virtual XrlCmdError ospfv2_0_1_change_area_router_type(
	// Input values,
	const IPv4&	area,
	const string&	type) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201ChangeAreaRouterTypeRF;

    class Ospfv201ChangeAreaRouterTypeCB {
        Ospfv201ChangeAreaRouterTypeRF cb;

    public:
        operator const Ospfv201ChangeAreaRouterTypeRF& () const { return cb; }
        const Ospfv201ChangeAreaRouterTypeRF& operator ->() const { return cb; }
        Ospfv201ChangeAreaRouterTypeCB(const Ospfv201ChangeAreaRouterTypeRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201ChangeAreaRouterTypeRsp :
      public Ospfv201ChangeAreaRouterTypeCB {
        Ospfv201ChangeAreaRouterTypeRsp(const Ospfv201ChangeAreaRouterTypeRF& cb)
          : Ospfv201ChangeAreaRouterTypeCB(cb) { }

    };

    virtual void async_ospfv2_0_1_change_area_router_type
       (
	const IPv4&	area,
	const string&	type,
	Ospfv201ChangeAreaRouterTypeCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Destroy area.
     *
     *  @param area id of the area
     */
    virtual XrlCmdError ospfv2_0_1_destroy_area_router(
	// Input values,
	const IPv4&	area) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201DestroyAreaRouterRF;

    class Ospfv201DestroyAreaRouterCB {
        Ospfv201DestroyAreaRouterRF cb;

    public:
        operator const Ospfv201DestroyAreaRouterRF& () const { return cb; }
        const Ospfv201DestroyAreaRouterRF& operator ->() const { return cb; }
        Ospfv201DestroyAreaRouterCB(const Ospfv201DestroyAreaRouterRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201DestroyAreaRouterRsp :
      public Ospfv201DestroyAreaRouterCB {
        Ospfv201DestroyAreaRouterRsp(const Ospfv201DestroyAreaRouterRF& cb)
          : Ospfv201DestroyAreaRouterCB(cb) { }

    };

    virtual void async_ospfv2_0_1_destroy_area_router
       (
	const IPv4&	area,
	Ospfv201DestroyAreaRouterCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create a binding to an interface.
     *
     *  @param ifname the interface that owns vif that has address.
     *
     *  @param vifname virtual interface owning address.
     *
     *  @param addr the address to be added.
     *
     *  @param type of link "p2p", "broadcast", "nbma", "p2m", "vlink"
     */
    virtual XrlCmdError ospfv2_0_1_create_peer(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	addr,
	const string&	type,
	const IPv4&	area) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201CreatePeerRF;

    class Ospfv201CreatePeerCB {
        Ospfv201CreatePeerRF cb;

    public:
        operator const Ospfv201CreatePeerRF& () const { return cb; }
        const Ospfv201CreatePeerRF& operator ->() const { return cb; }
        Ospfv201CreatePeerCB(const Ospfv201CreatePeerRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201CreatePeerRsp :
      public Ospfv201CreatePeerCB {
        Ospfv201CreatePeerRsp(const Ospfv201CreatePeerRF& cb)
          : Ospfv201CreatePeerCB(cb) { }

    };

    virtual void async_ospfv2_0_1_create_peer
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	addr,
	const string&	type,
	const IPv4&	area,
	Ospfv201CreatePeerCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete peer.
     */
    virtual XrlCmdError ospfv2_0_1_delete_peer(
	// Input values,
	const string&	ifname,
	const string&	vifname) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201DeletePeerRF;

    class Ospfv201DeletePeerCB {
        Ospfv201DeletePeerRF cb;

    public:
        operator const Ospfv201DeletePeerRF& () const { return cb; }
        const Ospfv201DeletePeerRF& operator ->() const { return cb; }
        Ospfv201DeletePeerCB(const Ospfv201DeletePeerRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201DeletePeerRsp :
      public Ospfv201DeletePeerCB {
        Ospfv201DeletePeerRsp(const Ospfv201DeletePeerRF& cb)
          : Ospfv201DeletePeerCB(cb) { }

    };

    virtual void async_ospfv2_0_1_delete_peer
       (
	const string&	ifname,
	const string&	vifname,
	Ospfv201DeletePeerCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the peer state up or down.
     */
    virtual XrlCmdError ospfv2_0_1_set_peer_state(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetPeerStateRF;

    class Ospfv201SetPeerStateCB {
        Ospfv201SetPeerStateRF cb;

    public:
        operator const Ospfv201SetPeerStateRF& () const { return cb; }
        const Ospfv201SetPeerStateRF& operator ->() const { return cb; }
        Ospfv201SetPeerStateCB(const Ospfv201SetPeerStateRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetPeerStateRsp :
      public Ospfv201SetPeerStateCB {
        Ospfv201SetPeerStateRsp(const Ospfv201SetPeerStateRF& cb)
          : Ospfv201SetPeerStateCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_peer_state
       (
	const string&	ifname,
	const string&	vifname,
	const bool&	enable,
	Ospfv201SetPeerStateCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add a neighbour to the peer.
     */
    virtual XrlCmdError ospfv2_0_1_add_neighbour(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const IPv4&	neighbour_address,
	const IPv4&	neighbour_id) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201AddNeighbourRF;

    class Ospfv201AddNeighbourCB {
        Ospfv201AddNeighbourRF cb;

    public:
        operator const Ospfv201AddNeighbourRF& () const { return cb; }
        const Ospfv201AddNeighbourRF& operator ->() const { return cb; }
        Ospfv201AddNeighbourCB(const Ospfv201AddNeighbourRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201AddNeighbourRsp :
      public Ospfv201AddNeighbourCB {
        Ospfv201AddNeighbourRsp(const Ospfv201AddNeighbourRF& cb)
          : Ospfv201AddNeighbourCB(cb) { }

    };

    virtual void async_ospfv2_0_1_add_neighbour
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const IPv4&	neighbour_address,
	const IPv4&	neighbour_id,
	Ospfv201AddNeighbourCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Remove a neighbour from the peer.
     */
    virtual XrlCmdError ospfv2_0_1_remove_neighbour(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const IPv4&	neighbour_address,
	const IPv4&	neighbour_id) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201RemoveNeighbourRF;

    class Ospfv201RemoveNeighbourCB {
        Ospfv201RemoveNeighbourRF cb;

    public:
        operator const Ospfv201RemoveNeighbourRF& () const { return cb; }
        const Ospfv201RemoveNeighbourRF& operator ->() const { return cb; }
        Ospfv201RemoveNeighbourCB(const Ospfv201RemoveNeighbourRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201RemoveNeighbourRsp :
      public Ospfv201RemoveNeighbourCB {
        Ospfv201RemoveNeighbourRsp(const Ospfv201RemoveNeighbourRF& cb)
          : Ospfv201RemoveNeighbourCB(cb) { }

    };

    virtual void async_ospfv2_0_1_remove_neighbour
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const IPv4&	neighbour_address,
	const IPv4&	neighbour_id,
	Ospfv201RemoveNeighbourCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create a virtual link.
     *
     *  @param neighbour_id the router ID of the other end of the link.
     *
     *  @param area in which an attempt has been made to configure a virtual
     *  link it has to be the backbone. Its just being passed in so it can be
     *  checked by the protocol.
     */
    virtual XrlCmdError ospfv2_0_1_create_virtual_link(
	// Input values,
	const IPv4&	neighbour_id,
	const IPv4&	area) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201CreateVirtualLinkRF;

    class Ospfv201CreateVirtualLinkCB {
        Ospfv201CreateVirtualLinkRF cb;

    public:
        operator const Ospfv201CreateVirtualLinkRF& () const { return cb; }
        const Ospfv201CreateVirtualLinkRF& operator ->() const { return cb; }
        Ospfv201CreateVirtualLinkCB(const Ospfv201CreateVirtualLinkRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201CreateVirtualLinkRsp :
      public Ospfv201CreateVirtualLinkCB {
        Ospfv201CreateVirtualLinkRsp(const Ospfv201CreateVirtualLinkRF& cb)
          : Ospfv201CreateVirtualLinkCB(cb) { }

    };

    virtual void async_ospfv2_0_1_create_virtual_link
       (
	const IPv4&	neighbour_id,
	const IPv4&	area,
	Ospfv201CreateVirtualLinkCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete virtual link
     *
     *  @param neighbour_id the router ID of the other end of the link.
     */
    virtual XrlCmdError ospfv2_0_1_delete_virtual_link(
	// Input values,
	const IPv4&	neighbour_id) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201DeleteVirtualLinkRF;

    class Ospfv201DeleteVirtualLinkCB {
        Ospfv201DeleteVirtualLinkRF cb;

    public:
        operator const Ospfv201DeleteVirtualLinkRF& () const { return cb; }
        const Ospfv201DeleteVirtualLinkRF& operator ->() const { return cb; }
        Ospfv201DeleteVirtualLinkCB(const Ospfv201DeleteVirtualLinkRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201DeleteVirtualLinkRsp :
      public Ospfv201DeleteVirtualLinkCB {
        Ospfv201DeleteVirtualLinkRsp(const Ospfv201DeleteVirtualLinkRF& cb)
          : Ospfv201DeleteVirtualLinkCB(cb) { }

    };

    virtual void async_ospfv2_0_1_delete_virtual_link
       (
	const IPv4&	neighbour_id,
	Ospfv201DeleteVirtualLinkCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  The area through which the virtual link transits.
     *
     *  @param neighbour_id the router ID of the other end of the link.
     *
     *  @param transit_area that the virtual link transits.
     */
    virtual XrlCmdError ospfv2_0_1_transit_area_virtual_link(
	// Input values,
	const IPv4&	neighbour_id,
	const IPv4&	transit_area) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201TransitAreaVirtualLinkRF;

    class Ospfv201TransitAreaVirtualLinkCB {
        Ospfv201TransitAreaVirtualLinkRF cb;

    public:
        operator const Ospfv201TransitAreaVirtualLinkRF& () const { return cb; }
        const Ospfv201TransitAreaVirtualLinkRF& operator ->() const { return cb; }
        Ospfv201TransitAreaVirtualLinkCB(const Ospfv201TransitAreaVirtualLinkRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201TransitAreaVirtualLinkRsp :
      public Ospfv201TransitAreaVirtualLinkCB {
        Ospfv201TransitAreaVirtualLinkRsp(const Ospfv201TransitAreaVirtualLinkRF& cb)
          : Ospfv201TransitAreaVirtualLinkCB(cb) { }

    };

    virtual void async_ospfv2_0_1_transit_area_virtual_link
       (
	const IPv4&	neighbour_id,
	const IPv4&	transit_area,
	Ospfv201TransitAreaVirtualLinkCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  The edge cost of this interface.
     */
    virtual XrlCmdError ospfv2_0_1_set_interface_cost(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	cost) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetInterfaceCostRF;

    class Ospfv201SetInterfaceCostCB {
        Ospfv201SetInterfaceCostRF cb;

    public:
        operator const Ospfv201SetInterfaceCostRF& () const { return cb; }
        const Ospfv201SetInterfaceCostRF& operator ->() const { return cb; }
        Ospfv201SetInterfaceCostCB(const Ospfv201SetInterfaceCostRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetInterfaceCostRsp :
      public Ospfv201SetInterfaceCostCB {
        Ospfv201SetInterfaceCostRsp(const Ospfv201SetInterfaceCostRF& cb)
          : Ospfv201SetInterfaceCostCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_interface_cost
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	cost,
	Ospfv201SetInterfaceCostCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  RxmtInterval The number of seconds between LSA retransmissions, for
     *  adjacencies belonging to this interface. Also used when retransmitting
     *  Database Description and Link State Request Packets. This should be
     *  well over the expected round-trip delay between any two routers on the
     *  attached network. The setting of this value should be conservative or
     *  needless retransmissions will result. Sample value for a local area
     *  network: 5 seconds.
     */
    virtual XrlCmdError ospfv2_0_1_set_retransmit_interval(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	interval) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetRetransmitIntervalRF;

    class Ospfv201SetRetransmitIntervalCB {
        Ospfv201SetRetransmitIntervalRF cb;

    public:
        operator const Ospfv201SetRetransmitIntervalRF& () const { return cb; }
        const Ospfv201SetRetransmitIntervalRF& operator ->() const { return cb; }
        Ospfv201SetRetransmitIntervalCB(const Ospfv201SetRetransmitIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetRetransmitIntervalRsp :
      public Ospfv201SetRetransmitIntervalCB {
        Ospfv201SetRetransmitIntervalRsp(const Ospfv201SetRetransmitIntervalRF& cb)
          : Ospfv201SetRetransmitIntervalCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_retransmit_interval
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	interval,
	Ospfv201SetRetransmitIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  The estimated number of seconds it takes to transmit a Link State
     *  Update Packet over this interface. LSAs contained in the Link State
     *  Update packet will have their age incremented by this amount before
     *  transmission. This value should take into account transmission and
     *  propagation delays; it must be greater than zero.
     */
    virtual XrlCmdError ospfv2_0_1_set_inftransdelay(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	delay) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetInftransdelayRF;

    class Ospfv201SetInftransdelayCB {
        Ospfv201SetInftransdelayRF cb;

    public:
        operator const Ospfv201SetInftransdelayRF& () const { return cb; }
        const Ospfv201SetInftransdelayRF& operator ->() const { return cb; }
        Ospfv201SetInftransdelayCB(const Ospfv201SetInftransdelayRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetInftransdelayRsp :
      public Ospfv201SetInftransdelayCB {
        Ospfv201SetInftransdelayRsp(const Ospfv201SetInftransdelayRF& cb)
          : Ospfv201SetInftransdelayCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_inftransdelay
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	delay,
	Ospfv201SetInftransdelayCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Used in the designated router election.
     */
    virtual XrlCmdError ospfv2_0_1_set_router_priority(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	priority) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetRouterPriorityRF;

    class Ospfv201SetRouterPriorityCB {
        Ospfv201SetRouterPriorityRF cb;

    public:
        operator const Ospfv201SetRouterPriorityRF& () const { return cb; }
        const Ospfv201SetRouterPriorityRF& operator ->() const { return cb; }
        Ospfv201SetRouterPriorityCB(const Ospfv201SetRouterPriorityRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetRouterPriorityRsp :
      public Ospfv201SetRouterPriorityCB {
        Ospfv201SetRouterPriorityRsp(const Ospfv201SetRouterPriorityRF& cb)
          : Ospfv201SetRouterPriorityCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_router_priority
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	priority,
	Ospfv201SetRouterPriorityCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  The interval between hello messages.
     */
    virtual XrlCmdError ospfv2_0_1_set_hello_interval(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	interval) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetHelloIntervalRF;

    class Ospfv201SetHelloIntervalCB {
        Ospfv201SetHelloIntervalRF cb;

    public:
        operator const Ospfv201SetHelloIntervalRF& () const { return cb; }
        const Ospfv201SetHelloIntervalRF& operator ->() const { return cb; }
        Ospfv201SetHelloIntervalCB(const Ospfv201SetHelloIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetHelloIntervalRsp :
      public Ospfv201SetHelloIntervalCB {
        Ospfv201SetHelloIntervalRsp(const Ospfv201SetHelloIntervalRF& cb)
          : Ospfv201SetHelloIntervalCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_hello_interval
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	interval,
	Ospfv201SetHelloIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  The period to wait before considering a router dead.
     */
    virtual XrlCmdError ospfv2_0_1_set_router_dead_interval(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	interval) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetRouterDeadIntervalRF;

    class Ospfv201SetRouterDeadIntervalCB {
        Ospfv201SetRouterDeadIntervalRF cb;

    public:
        operator const Ospfv201SetRouterDeadIntervalRF& () const { return cb; }
        const Ospfv201SetRouterDeadIntervalRF& operator ->() const { return cb; }
        Ospfv201SetRouterDeadIntervalCB(const Ospfv201SetRouterDeadIntervalRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetRouterDeadIntervalRsp :
      public Ospfv201SetRouterDeadIntervalCB {
        Ospfv201SetRouterDeadIntervalRsp(const Ospfv201SetRouterDeadIntervalRF& cb)
          : Ospfv201SetRouterDeadIntervalCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_router_dead_interval
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	interval,
	Ospfv201SetRouterDeadIntervalCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set simple password authentication key.
     *
     *  @param ifname the interface name.
     *
     *  @param vifname the vif name.
     *
     *  @param area the area ID.
     *
     *  @param password the authentication password.
     */
    virtual XrlCmdError ospfv2_0_1_set_simple_authentication_key(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const string&	password) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetSimpleAuthenticationKeyRF;

    class Ospfv201SetSimpleAuthenticationKeyCB {
        Ospfv201SetSimpleAuthenticationKeyRF cb;

    public:
        operator const Ospfv201SetSimpleAuthenticationKeyRF& () const { return cb; }
        const Ospfv201SetSimpleAuthenticationKeyRF& operator ->() const { return cb; }
        Ospfv201SetSimpleAuthenticationKeyCB(const Ospfv201SetSimpleAuthenticationKeyRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetSimpleAuthenticationKeyRsp :
      public Ospfv201SetSimpleAuthenticationKeyCB {
        Ospfv201SetSimpleAuthenticationKeyRsp(const Ospfv201SetSimpleAuthenticationKeyRF& cb)
          : Ospfv201SetSimpleAuthenticationKeyCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_simple_authentication_key
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const string&	password,
	Ospfv201SetSimpleAuthenticationKeyCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete simple password authentication key.
     *
     *  @param ifname the interface name.
     *
     *  @param vifname the vif name.
     *
     *  @param area the area ID.
     */
    virtual XrlCmdError ospfv2_0_1_delete_simple_authentication_key(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201DeleteSimpleAuthenticationKeyRF;

    class Ospfv201DeleteSimpleAuthenticationKeyCB {
        Ospfv201DeleteSimpleAuthenticationKeyRF cb;

    public:
        operator const Ospfv201DeleteSimpleAuthenticationKeyRF& () const { return cb; }
        const Ospfv201DeleteSimpleAuthenticationKeyRF& operator ->() const { return cb; }
        Ospfv201DeleteSimpleAuthenticationKeyCB(const Ospfv201DeleteSimpleAuthenticationKeyRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201DeleteSimpleAuthenticationKeyRsp :
      public Ospfv201DeleteSimpleAuthenticationKeyCB {
        Ospfv201DeleteSimpleAuthenticationKeyRsp(const Ospfv201DeleteSimpleAuthenticationKeyRF& cb)
          : Ospfv201DeleteSimpleAuthenticationKeyCB(cb) { }

    };

    virtual void async_ospfv2_0_1_delete_simple_authentication_key
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	Ospfv201DeleteSimpleAuthenticationKeyCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set MD5 authentication key.
     *
     *  @param ifname the interface name.
     *
     *  @param vifname the vif name.
     *
     *  @param area the area ID.
     *
     *  @param key_id the key ID (must be an integer in the interval [0, 255]).
     *
     *  @param password the authentication password.
     *
     *  @param start_time the authentication start time (YYYY-MM-DD.HH:MM).
     *
     *  @param end_time the authentication end time (YYYY-MM-DD.HH:MM).
     *
     *  @param max_time_drift the maximum time drift (in seconds) among all
     *  routers. Allowed values are [0--65534] seconds or 65535 for unlimited
     *  time drift.
     */
    virtual XrlCmdError ospfv2_0_1_set_md5_authentication_key(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	key_id,
	const string&	password,
	const string&	start_time,
	const string&	end_time,
	const uint32_t&	max_time_drift) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetMd5AuthenticationKeyRF;

    class Ospfv201SetMd5AuthenticationKeyCB {
        Ospfv201SetMd5AuthenticationKeyRF cb;

    public:
        operator const Ospfv201SetMd5AuthenticationKeyRF& () const { return cb; }
        const Ospfv201SetMd5AuthenticationKeyRF& operator ->() const { return cb; }
        Ospfv201SetMd5AuthenticationKeyCB(const Ospfv201SetMd5AuthenticationKeyRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetMd5AuthenticationKeyRsp :
      public Ospfv201SetMd5AuthenticationKeyCB {
        Ospfv201SetMd5AuthenticationKeyRsp(const Ospfv201SetMd5AuthenticationKeyRF& cb)
          : Ospfv201SetMd5AuthenticationKeyCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_md5_authentication_key
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	key_id,
	const string&	password,
	const string&	start_time,
	const string&	end_time,
	const uint32_t&	max_time_drift,
	Ospfv201SetMd5AuthenticationKeyCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete MD5 authentication key.
     *
     *  @param ifname the interface name.
     *
     *  @param vifname the vif name.
     *
     *  @param area the area ID.
     *
     *  @param key_id the key ID (must be an integer in the interval [0, 255]).
     */
    virtual XrlCmdError ospfv2_0_1_delete_md5_authentication_key(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	key_id) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201DeleteMd5AuthenticationKeyRF;

    class Ospfv201DeleteMd5AuthenticationKeyCB {
        Ospfv201DeleteMd5AuthenticationKeyRF cb;

    public:
        operator const Ospfv201DeleteMd5AuthenticationKeyRF& () const { return cb; }
        const Ospfv201DeleteMd5AuthenticationKeyRF& operator ->() const { return cb; }
        Ospfv201DeleteMd5AuthenticationKeyCB(const Ospfv201DeleteMd5AuthenticationKeyRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201DeleteMd5AuthenticationKeyRsp :
      public Ospfv201DeleteMd5AuthenticationKeyCB {
        Ospfv201DeleteMd5AuthenticationKeyRsp(const Ospfv201DeleteMd5AuthenticationKeyRF& cb)
          : Ospfv201DeleteMd5AuthenticationKeyCB(cb) { }

    };

    virtual void async_ospfv2_0_1_delete_md5_authentication_key
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const uint32_t&	key_id,
	Ospfv201DeleteMd5AuthenticationKeyCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Toggle the passive status of an interface.
     */
    virtual XrlCmdError ospfv2_0_1_set_passive(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const bool&	passive,
	const bool&	host) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SetPassiveRF;

    class Ospfv201SetPassiveCB {
        Ospfv201SetPassiveRF cb;

    public:
        operator const Ospfv201SetPassiveRF& () const { return cb; }
        const Ospfv201SetPassiveRF& operator ->() const { return cb; }
        Ospfv201SetPassiveCB(const Ospfv201SetPassiveRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SetPassiveRsp :
      public Ospfv201SetPassiveCB {
        Ospfv201SetPassiveRsp(const Ospfv201SetPassiveRF& cb)
          : Ospfv201SetPassiveCB(cb) { }

    };

    virtual void async_ospfv2_0_1_set_passive
       (
	const string&	ifname,
	const string&	vifname,
	const IPv4&	area,
	const bool&	passive,
	const bool&	host,
	Ospfv201SetPassiveCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  If this is a "stub" or "nssa" area toggle the sending of a default
     *  route.
     */
    virtual XrlCmdError ospfv2_0_1_originate_default_route(
	// Input values,
	const IPv4&	area,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201OriginateDefaultRouteRF;

    class Ospfv201OriginateDefaultRouteCB {
        Ospfv201OriginateDefaultRouteRF cb;

    public:
        operator const Ospfv201OriginateDefaultRouteRF& () const { return cb; }
        const Ospfv201OriginateDefaultRouteRF& operator ->() const { return cb; }
        Ospfv201OriginateDefaultRouteCB(const Ospfv201OriginateDefaultRouteRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201OriginateDefaultRouteRsp :
      public Ospfv201OriginateDefaultRouteCB {
        Ospfv201OriginateDefaultRouteRsp(const Ospfv201OriginateDefaultRouteRF& cb)
          : Ospfv201OriginateDefaultRouteCB(cb) { }

    };

    virtual void async_ospfv2_0_1_originate_default_route
       (
	const IPv4&	area,
	const bool&	enable,
	Ospfv201OriginateDefaultRouteCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Set the StubDefaultCost, the default cost sent in a default route in a
     *  "stub" or "nssa" area.
     */
    virtual XrlCmdError ospfv2_0_1_stub_default_cost(
	// Input values,
	const IPv4&	area,
	const uint32_t&	cost) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201StubDefaultCostRF;

    class Ospfv201StubDefaultCostCB {
        Ospfv201StubDefaultCostRF cb;

    public:
        operator const Ospfv201StubDefaultCostRF& () const { return cb; }
        const Ospfv201StubDefaultCostRF& operator ->() const { return cb; }
        Ospfv201StubDefaultCostCB(const Ospfv201StubDefaultCostRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201StubDefaultCostRsp :
      public Ospfv201StubDefaultCostCB {
        Ospfv201StubDefaultCostRsp(const Ospfv201StubDefaultCostRF& cb)
          : Ospfv201StubDefaultCostCB(cb) { }

    };

    virtual void async_ospfv2_0_1_stub_default_cost
       (
	const IPv4&	area,
	const uint32_t&	cost,
	Ospfv201StubDefaultCostCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Toggle the sending of summaries into "stub" or "nssa" areas.
     */
    virtual XrlCmdError ospfv2_0_1_summaries(
	// Input values,
	const IPv4&	area,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201SummariesRF;

    class Ospfv201SummariesCB {
        Ospfv201SummariesRF cb;

    public:
        operator const Ospfv201SummariesRF& () const { return cb; }
        const Ospfv201SummariesRF& operator ->() const { return cb; }
        Ospfv201SummariesCB(const Ospfv201SummariesRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201SummariesRsp :
      public Ospfv201SummariesCB {
        Ospfv201SummariesRsp(const Ospfv201SummariesRF& cb)
          : Ospfv201SummariesCB(cb) { }

    };

    virtual void async_ospfv2_0_1_summaries
       (
	const IPv4&	area,
	const bool&	enable,
	Ospfv201SummariesCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add area range.
     */
    virtual XrlCmdError ospfv2_0_1_area_range_add(
	// Input values,
	const IPv4&	area,
	const IPv4Net&	net,
	const bool&	advertise) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201AreaRangeAddRF;

    class Ospfv201AreaRangeAddCB {
        Ospfv201AreaRangeAddRF cb;

    public:
        operator const Ospfv201AreaRangeAddRF& () const { return cb; }
        const Ospfv201AreaRangeAddRF& operator ->() const { return cb; }
        Ospfv201AreaRangeAddCB(const Ospfv201AreaRangeAddRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201AreaRangeAddRsp :
      public Ospfv201AreaRangeAddCB {
        Ospfv201AreaRangeAddRsp(const Ospfv201AreaRangeAddRF& cb)
          : Ospfv201AreaRangeAddCB(cb) { }

    };

    virtual void async_ospfv2_0_1_area_range_add
       (
	const IPv4&	area,
	const IPv4Net&	net,
	const bool&	advertise,
	Ospfv201AreaRangeAddCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete area range.
     */
    virtual XrlCmdError ospfv2_0_1_area_range_delete(
	// Input values,
	const IPv4&	area,
	const IPv4Net&	net) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201AreaRangeDeleteRF;

    class Ospfv201AreaRangeDeleteCB {
        Ospfv201AreaRangeDeleteRF cb;

    public:
        operator const Ospfv201AreaRangeDeleteRF& () const { return cb; }
        const Ospfv201AreaRangeDeleteRF& operator ->() const { return cb; }
        Ospfv201AreaRangeDeleteCB(const Ospfv201AreaRangeDeleteRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201AreaRangeDeleteRsp :
      public Ospfv201AreaRangeDeleteCB {
        Ospfv201AreaRangeDeleteRsp(const Ospfv201AreaRangeDeleteRF& cb)
          : Ospfv201AreaRangeDeleteCB(cb) { }

    };

    virtual void async_ospfv2_0_1_area_range_delete
       (
	const IPv4&	area,
	const IPv4Net&	net,
	Ospfv201AreaRangeDeleteCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Change the advertised state of this area.
     */
    virtual XrlCmdError ospfv2_0_1_area_range_change_state(
	// Input values,
	const IPv4&	area,
	const IPv4Net&	net,
	const bool&	advertise) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201AreaRangeChangeStateRF;

    class Ospfv201AreaRangeChangeStateCB {
        Ospfv201AreaRangeChangeStateRF cb;

    public:
        operator const Ospfv201AreaRangeChangeStateRF& () const { return cb; }
        const Ospfv201AreaRangeChangeStateRF& operator ->() const { return cb; }
        Ospfv201AreaRangeChangeStateCB(const Ospfv201AreaRangeChangeStateRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201AreaRangeChangeStateRsp :
      public Ospfv201AreaRangeChangeStateCB {
        Ospfv201AreaRangeChangeStateRsp(const Ospfv201AreaRangeChangeStateRF& cb)
          : Ospfv201AreaRangeChangeStateCB(cb) { }

    };

    virtual void async_ospfv2_0_1_area_range_change_state
       (
	const IPv4&	area,
	const IPv4Net&	net,
	const bool&	advertise,
	Ospfv201AreaRangeChangeStateCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/Disable tracing.
     *
     *  @param tvar trace variable.
     *
     *  @param enable set to true to enable false to disable.
     */
    virtual XrlCmdError ospfv2_0_1_trace(
	// Input values,
	const string&	tvar,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201TraceRF;

    class Ospfv201TraceCB {
        Ospfv201TraceRF cb;

    public:
        operator const Ospfv201TraceRF& () const { return cb; }
        const Ospfv201TraceRF& operator ->() const { return cb; }
        Ospfv201TraceCB(const Ospfv201TraceRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201TraceRsp :
      public Ospfv201TraceCB {
        Ospfv201TraceRsp(const Ospfv201TraceRF& cb)
          : Ospfv201TraceCB(cb) { }

    };

    virtual void async_ospfv2_0_1_trace
       (
	const string&	tvar,
	const bool&	enable,
	Ospfv201TraceCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get a single lsa from an area. A stateless mechanism to get LSAs. The
     *  client of this interface should start from zero and continue to request
     *  LSAs (incrementing index) until toohigh becomes true.
     *
     *  @param area database that is being searched.
     *
     *  @param index into database starting from 0.
     *
     *  @param valid true if a LSA has been returned. Some index values do not
     *  contain LSAs. This should not be considered an error.
     *
     *  @param toohigh true if no more LSA exist after this index.
     *
     *  @param self if true this LSA was originated by this router.
     *
     *  @param lsa if valid is true the LSA at index.
     */
    virtual XrlCmdError ospfv2_0_1_get_lsa(
	// Input values,
	const IPv4&	area,
	const uint32_t&	index,
	// Output values,
	bool&	valid,
	bool&	toohigh,
	bool&	self,
	vector<uint8_t>&	lsa) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback5<void, const XrlCmdError &,
	const bool*,
	const bool*,
	const bool*,
	const vector<uint8_t>*>::RefPtr
    Ospfv201GetLsaRF;

    class Ospfv201GetLsaCB {
        Ospfv201GetLsaRF cb;

    public:
        operator const Ospfv201GetLsaRF& () const { return cb; }
        const Ospfv201GetLsaRF& operator ->() const { return cb; }
        Ospfv201GetLsaCB(const Ospfv201GetLsaRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL, NULL, NULL); }

        void respond(const bool& arg_valid,
                     const bool& arg_toohigh,
                     const bool& arg_self,
                     const vector<uint8_t>& arg_lsa) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_valid,
                         &arg_toohigh,
                         &arg_self,
                         &arg_lsa);
        }
    };

    struct Ospfv201GetLsaRsp :
      public Ospfv201GetLsaCB {
        struct args_str {
            bool valid;
            bool toohigh;
            bool self;
            vector<uint8_t> lsa;
        };

    private:
        args_str args;

    public:
        Ospfv201GetLsaRsp(const Ospfv201GetLsaRF& cb)
          : Ospfv201GetLsaCB(cb) { }

        void respond() const {
            Ospfv201GetLsaCB::
            respond(args.valid,
                        args.toohigh,
                        args.self,
                        args.lsa);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_ospfv2_0_1_get_lsa
       (
	const IPv4&	area,
	const uint32_t&	index,
	Ospfv201GetLsaCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get a list of all the configured areas. Return a list of u32 type
     *  values. Each value is an area ID.
     */
    virtual XrlCmdError ospfv2_0_1_get_area_list(
	// Output values,
	XrlAtomList&	areas) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const XrlAtomList*>::RefPtr
    Ospfv201GetAreaListRF;

    class Ospfv201GetAreaListCB {
        Ospfv201GetAreaListRF cb;

    public:
        operator const Ospfv201GetAreaListRF& () const { return cb; }
        const Ospfv201GetAreaListRF& operator ->() const { return cb; }
        Ospfv201GetAreaListCB(const Ospfv201GetAreaListRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const XrlAtomList& arg_areas) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_areas);
        }
    };

    struct Ospfv201GetAreaListRsp :
      public Ospfv201GetAreaListCB {
        struct args_str {
            XrlAtomList areas;
        };

    private:
        args_str args;

    public:
        Ospfv201GetAreaListRsp(const Ospfv201GetAreaListRF& cb)
          : Ospfv201GetAreaListCB(cb) { }

        void respond() const {
            Ospfv201GetAreaListCB::
            respond(args.areas);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_ospfv2_0_1_get_area_list
       (
	Ospfv201GetAreaListCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get the list of neighbours. Return a list of u32 type values. Each
     *  value is an internal identifier that can be used with the
     *  get_neighbour_info XRL.
     */
    virtual XrlCmdError ospfv2_0_1_get_neighbour_list(
	// Output values,
	XrlAtomList&	areas) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const XrlAtomList*>::RefPtr
    Ospfv201GetNeighbourListRF;

    class Ospfv201GetNeighbourListCB {
        Ospfv201GetNeighbourListRF cb;

    public:
        operator const Ospfv201GetNeighbourListRF& () const { return cb; }
        const Ospfv201GetNeighbourListRF& operator ->() const { return cb; }
        Ospfv201GetNeighbourListCB(const Ospfv201GetNeighbourListRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const XrlAtomList& arg_areas) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_areas);
        }
    };

    struct Ospfv201GetNeighbourListRsp :
      public Ospfv201GetNeighbourListCB {
        struct args_str {
            XrlAtomList areas;
        };

    private:
        args_str args;

    public:
        Ospfv201GetNeighbourListRsp(const Ospfv201GetNeighbourListRF& cb)
          : Ospfv201GetNeighbourListCB(cb) { }

        void respond() const {
            Ospfv201GetNeighbourListCB::
            respond(args.areas);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_ospfv2_0_1_get_neighbour_list
       (
	Ospfv201GetNeighbourListCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get information on a neighbour.
     *
     *  @param nid neighbour ID returned by the get_neighbour_list.
     *
     *  @param address of neighbour in txt to allow IPv4 and IPv6.
     *
     *  @param interface with which the neighbour forms the adjacency.
     *
     *  @param state of the adjacency.
     *
     *  @param rid router ID of the neighbour.
     *
     *  @param priority of the neighbour (used for DR election).
     *
     *  @param deadtime time until neighbour is considered dead.
     *
     *  @param area the neighbour is in.
     *
     *  @param opt value in the neighbours hello packet.
     *
     *  @param dr designated router.
     *
     *  @param bdr backup designated router.
     *
     *  @param up time in seconds that the neigbour has been up.
     *
     *  @param adjacent time in seconds that there has been an adjacency.
     */
    virtual XrlCmdError ospfv2_0_1_get_neighbour_info(
	// Input values,
	const uint32_t&	nid,
	// Output values,
	string&	address,
	string&	interface,
	string&	state,
	IPv4&	rid,
	uint32_t&	priority,
	uint32_t&	deadtime,
	IPv4&	area,
	uint32_t&	opt,
	IPv4&	dr,
	IPv4&	bdr,
	uint32_t&	up,
	uint32_t&	adjacent) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback13<void, const XrlCmdError &,
	const string*,
	const string*,
	const string*,
	const IPv4*,
	const uint32_t*,
	const uint32_t*,
	const IPv4*,
	const uint32_t*,
	const IPv4*,
	const IPv4*,
	const uint32_t*,
	const uint32_t*>::RefPtr
    Ospfv201GetNeighbourInfoRF;

    class Ospfv201GetNeighbourInfoCB {
        Ospfv201GetNeighbourInfoRF cb;

    public:
        operator const Ospfv201GetNeighbourInfoRF& () const { return cb; }
        const Ospfv201GetNeighbourInfoRF& operator ->() const { return cb; }
        Ospfv201GetNeighbourInfoCB(const Ospfv201GetNeighbourInfoRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL); }

        void respond(const string& arg_address,
                     const string& arg_interface,
                     const string& arg_state,
                     const IPv4& arg_rid,
                     const uint32_t& arg_priority,
                     const uint32_t& arg_deadtime,
                     const IPv4& arg_area,
                     const uint32_t& arg_opt,
                     const IPv4& arg_dr,
                     const IPv4& arg_bdr,
                     const uint32_t& arg_up,
                     const uint32_t& arg_adjacent) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_address,
                         &arg_interface,
                         &arg_state,
                         &arg_rid,
                         &arg_priority,
                         &arg_deadtime,
                         &arg_area,
                         &arg_opt,
                         &arg_dr,
                         &arg_bdr,
                         &arg_up,
                         &arg_adjacent);
        }
    };

    struct Ospfv201GetNeighbourInfoRsp :
      public Ospfv201GetNeighbourInfoCB {
        struct args_str {
            string address;
            string interface;
            string state;
            IPv4 rid;
            uint32_t priority;
            uint32_t deadtime;
            IPv4 area;
            uint32_t opt;
            IPv4 dr;
            IPv4 bdr;
            uint32_t up;
            uint32_t adjacent;
        };

    private:
        args_str args;

    public:
        Ospfv201GetNeighbourInfoRsp(const Ospfv201GetNeighbourInfoRF& cb)
          : Ospfv201GetNeighbourInfoCB(cb) { }

        void respond() const {
            Ospfv201GetNeighbourInfoCB::
            respond(args.address,
                        args.interface,
                        args.state,
                        args.rid,
                        args.priority,
                        args.deadtime,
                        args.area,
                        args.opt,
                        args.dr,
                        args.bdr,
                        args.up,
                        args.adjacent);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_ospfv2_0_1_get_neighbour_info
       (
	const uint32_t&	nid,
	Ospfv201GetNeighbourInfoCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Clear the OSPF database.
     */
    virtual XrlCmdError ospfv2_0_1_clear_database() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Ospfv201ClearDatabaseRF;

    class Ospfv201ClearDatabaseCB {
        Ospfv201ClearDatabaseRF cb;

    public:
        operator const Ospfv201ClearDatabaseRF& () const { return cb; }
        const Ospfv201ClearDatabaseRF& operator ->() const { return cb; }
        Ospfv201ClearDatabaseCB(const Ospfv201ClearDatabaseRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Ospfv201ClearDatabaseRsp :
      public Ospfv201ClearDatabaseCB {
        Ospfv201ClearDatabaseRsp(const Ospfv201ClearDatabaseRF& cb)
          : Ospfv201ClearDatabaseCB(cb) { }

    };

    virtual void async_ospfv2_0_1_clear_database
       (
	Ospfv201ClearDatabaseCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_raw_packet4_client_0_1_recv(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_raw_packet4_client_0_1_recv
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_backend_0_1_configure(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_backend_0_1_configure
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_backend_0_1_reset(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_backend_0_1_reset
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_backend_0_1_push_routes(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_backend_0_1_push_routes
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_redist4_0_1_add_route4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_redist4_0_1_add_route4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_redist4_0_1_delete_route4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_redist4_0_1_delete_route4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_router_id(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_router_id
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_rfc1583_compatibility(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_rfc1583_compatibility
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_ip_router_alert(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_ip_router_alert
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_create_area_router(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_create_area_router
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_change_area_router_type(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_change_area_router_type
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_destroy_area_router(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_destroy_area_router
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_create_peer(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_create_peer
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_delete_peer(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_delete_peer
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_peer_state(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_peer_state
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_add_neighbour(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_add_neighbour
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_remove_neighbour(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_remove_neighbour
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_create_virtual_link(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_create_virtual_link
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_delete_virtual_link(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_delete_virtual_link
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_transit_area_virtual_link(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_transit_area_virtual_link
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_interface_cost(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_interface_cost
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_retransmit_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_retransmit_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_inftransdelay(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_inftransdelay
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_router_priority(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_router_priority
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_hello_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_hello_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_router_dead_interval(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_router_dead_interval
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_simple_authentication_key(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_simple_authentication_key
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_delete_simple_authentication_key(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_delete_simple_authentication_key
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_md5_authentication_key(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_md5_authentication_key
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_delete_md5_authentication_key(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_delete_md5_authentication_key
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_set_passive(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_set_passive
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_originate_default_route(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_originate_default_route
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_stub_default_cost(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_stub_default_cost
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_summaries(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_summaries
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_area_range_add(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_area_range_add
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_area_range_delete(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_area_range_delete
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_area_range_change_state(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_area_range_change_state
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_trace(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_trace
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_get_lsa(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_get_lsa
       (const XrlCmdError &e,
	const bool* arg_valid,
	const bool* arg_toohigh,
	const bool* arg_self,
	const vector<uint8_t>* arg_lsa,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_get_area_list(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_get_area_list
       (const XrlCmdError &e,
	const XrlAtomList* arg_areas,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_get_neighbour_list(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_get_neighbour_list
       (const XrlCmdError &e,
	const XrlAtomList* arg_areas,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_get_neighbour_info(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_get_neighbour_info
       (const XrlCmdError &e,
	const string* arg_address,
	const string* arg_interface,
	const string* arg_state,
	const IPv4* arg_rid,
	const uint32_t* arg_priority,
	const uint32_t* arg_deadtime,
	const IPv4* arg_area,
	const uint32_t* arg_opt,
	const IPv4* arg_dr,
	const IPv4* arg_bdr,
	const uint32_t* arg_up,
	const uint32_t* arg_adjacent,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ospfv2_0_1_clear_database(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ospfv2_0_1_clear_database
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlOspfv2TargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_OSPFV2_BASE_HH__
