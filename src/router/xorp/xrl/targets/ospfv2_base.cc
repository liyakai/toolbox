/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/ospfv2_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "ospfv2_base.hh"


const struct XrlOspfv2TargetBase::handler_table XrlOspfv2TargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlOspfv2TargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlOspfv2TargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlOspfv2TargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlOspfv2TargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlOspfv2TargetBase::handle_common_0_1_startup },
    { "raw_packet4_client/0.1/recv",
      &XrlOspfv2TargetBase::handle_raw_packet4_client_0_1_recv },
    { "policy_backend/0.1/configure",
      &XrlOspfv2TargetBase::handle_policy_backend_0_1_configure },
    { "policy_backend/0.1/reset",
      &XrlOspfv2TargetBase::handle_policy_backend_0_1_reset },
    { "policy_backend/0.1/push_routes",
      &XrlOspfv2TargetBase::handle_policy_backend_0_1_push_routes },
    { "policy_redist4/0.1/add_route4",
      &XrlOspfv2TargetBase::handle_policy_redist4_0_1_add_route4 },
    { "policy_redist4/0.1/delete_route4",
      &XrlOspfv2TargetBase::handle_policy_redist4_0_1_delete_route4 },
    { "ospfv2/0.1/set_router_id",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_router_id },
    { "ospfv2/0.1/set_rfc1583_compatibility",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_rfc1583_compatibility },
    { "ospfv2/0.1/set_ip_router_alert",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_ip_router_alert },
    { "ospfv2/0.1/create_area_router",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_create_area_router },
    { "ospfv2/0.1/change_area_router_type",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_change_area_router_type },
    { "ospfv2/0.1/destroy_area_router",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_destroy_area_router },
    { "ospfv2/0.1/create_peer",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_create_peer },
    { "ospfv2/0.1/delete_peer",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_peer },
    { "ospfv2/0.1/set_peer_state",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_peer_state },
    { "ospfv2/0.1/add_neighbour",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_add_neighbour },
    { "ospfv2/0.1/remove_neighbour",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_remove_neighbour },
    { "ospfv2/0.1/create_virtual_link",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_create_virtual_link },
    { "ospfv2/0.1/delete_virtual_link",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_virtual_link },
    { "ospfv2/0.1/transit_area_virtual_link",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_transit_area_virtual_link },
    { "ospfv2/0.1/set_interface_cost",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_interface_cost },
    { "ospfv2/0.1/set_retransmit_interval",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_retransmit_interval },
    { "ospfv2/0.1/set_inftransdelay",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_inftransdelay },
    { "ospfv2/0.1/set_router_priority",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_router_priority },
    { "ospfv2/0.1/set_hello_interval",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_hello_interval },
    { "ospfv2/0.1/set_router_dead_interval",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_router_dead_interval },
    { "ospfv2/0.1/set_simple_authentication_key",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_simple_authentication_key },
    { "ospfv2/0.1/delete_simple_authentication_key",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_simple_authentication_key },
    { "ospfv2/0.1/set_md5_authentication_key",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_md5_authentication_key },
    { "ospfv2/0.1/delete_md5_authentication_key",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_md5_authentication_key },
    { "ospfv2/0.1/set_passive",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_set_passive },
    { "ospfv2/0.1/originate_default_route",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_originate_default_route },
    { "ospfv2/0.1/stub_default_cost",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_stub_default_cost },
    { "ospfv2/0.1/summaries",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_summaries },
    { "ospfv2/0.1/area_range_add",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_area_range_add },
    { "ospfv2/0.1/area_range_delete",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_area_range_delete },
    { "ospfv2/0.1/area_range_change_state",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_area_range_change_state },
    { "ospfv2/0.1/trace",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_trace },
    { "ospfv2/0.1/get_lsa",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_get_lsa },
    { "ospfv2/0.1/get_area_list",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_get_area_list },
    { "ospfv2/0.1/get_neighbour_list",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_get_neighbour_list },
    { "ospfv2/0.1/get_neighbour_info",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_get_neighbour_info },
    { "ospfv2/0.1/clear_database",
      &XrlOspfv2TargetBase::handle_ospfv2_0_1_clear_database },
};

const size_t XrlOspfv2TargetBase::num_handlers = (sizeof(XrlOspfv2TargetBase::handlers) / sizeof(XrlOspfv2TargetBase::handlers[0]));


XrlOspfv2TargetBase::XrlOspfv2TargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlOspfv2TargetBase::~XrlOspfv2TargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlOspfv2TargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_raw_packet4_client_0_1_recv
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "raw_packet4_client/0.1/recv", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_raw_packet4_client_0_1_recv(
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const IPv4&	arg_src_address,
	const IPv4&	arg_dst_address,
	const uint32_t&	arg_ip_protocol,
	const int32_t&	arg_ip_ttl,
	const int32_t&	arg_ip_tos,
	const bool&	arg_ip_router_alert,
	const bool&	arg_ip_internet_control,
	const vector<uint8_t>&	arg_payload,
	RawPacket4Client01RecvCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = raw_packet4_client_0_1_recv(
        arg_if_name,
        arg_vif_name,
        arg_src_address,
        arg_dst_address,
        arg_ip_protocol,
        arg_ip_ttl,
        arg_ip_tos,
        arg_ip_router_alert,
        arg_ip_internet_control,
        arg_payload);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_raw_packet4_client_0_1_recv(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 10) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(10), XORP_UINT_CAST(xa_inputs.size()), "raw_packet4_client/0.1/recv");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	RawPacket4Client01RecvRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_raw_packet4_client_0_1_recv, pxa_outputs);
	async_raw_packet4_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv4(),
	    xa_inputs.get(3, "dst_address").ipv4(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "payload").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet4_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv4(),
	    xa_inputs.get(3, "dst_address").ipv4(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "payload").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "raw_packet4_client/0.1/recv", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_policy_backend_0_1_configure
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/configure", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_policy_backend_0_1_configure(
	const uint32_t&	arg_filter,
	const string&	arg_conf,
	PolicyBackend01ConfigureCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_configure(
        arg_filter,
        arg_conf);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_policy_backend_0_1_configure(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/configure");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ConfigureRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_policy_backend_0_1_configure, pxa_outputs);
	async_policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/configure", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_policy_backend_0_1_reset
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/reset", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_policy_backend_0_1_reset(
	const uint32_t&	arg_filter,
	PolicyBackend01ResetCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_reset(
        arg_filter);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_policy_backend_0_1_reset(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/reset");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ResetRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_policy_backend_0_1_reset, pxa_outputs);
	async_policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/reset", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_policy_backend_0_1_push_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/push_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_policy_backend_0_1_push_routes(
	PolicyBackend01PushRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_push_routes();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_policy_backend_0_1_push_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/push_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01PushRoutesRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_policy_backend_0_1_push_routes, pxa_outputs);
	async_policy_backend_0_1_push_routes( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_push_routes();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/push_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_policy_redist4_0_1_add_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_redist4/0.1/add_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_policy_redist4_0_1_add_route4(
	const IPv4Net&	arg_network,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv4&	arg_nexthop,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	PolicyRedist401AddRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_redist4_0_1_add_route4(
        arg_network,
        arg_unicast,
        arg_multicast,
        arg_nexthop,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_policy_redist4_0_1_add_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "policy_redist4/0.1/add_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyRedist401AddRoute4RF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_policy_redist4_0_1_add_route4, pxa_outputs);
	async_policy_redist4_0_1_add_route4(
	    xa_inputs.get(0, "network").ipv4net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32(),
	    xa_inputs.get(5, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_redist4_0_1_add_route4(
	    xa_inputs.get(0, "network").ipv4net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "nexthop").ipv4(),
	    xa_inputs.get(4, "metric").uint32(),
	    xa_inputs.get(5, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_redist4/0.1/add_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_policy_redist4_0_1_delete_route4
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_redist4/0.1/delete_route4", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_policy_redist4_0_1_delete_route4(
	const IPv4Net&	arg_network,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	PolicyRedist401DeleteRoute4CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_redist4_0_1_delete_route4(
        arg_network,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_policy_redist4_0_1_delete_route4(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "policy_redist4/0.1/delete_route4");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyRedist401DeleteRoute4RF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_policy_redist4_0_1_delete_route4, pxa_outputs);
	async_policy_redist4_0_1_delete_route4(
	    xa_inputs.get(0, "network").ipv4net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_redist4_0_1_delete_route4(
	    xa_inputs.get(0, "network").ipv4net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_redist4/0.1/delete_route4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_router_id
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_router_id", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_router_id(
	const IPv4&	arg_id,
	Ospfv201SetRouterIdCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_router_id(
        arg_id);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_router_id(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_router_id");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetRouterIdRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_router_id, pxa_outputs);
	async_ospfv2_0_1_set_router_id(
	    xa_inputs.get(0, "id").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_router_id(
	    xa_inputs.get(0, "id").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_router_id", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_rfc1583_compatibility
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_rfc1583_compatibility", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_rfc1583_compatibility(
	const bool&	arg_compatibility,
	Ospfv201SetRfc1583CompatibilityCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_rfc1583_compatibility(
        arg_compatibility);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_rfc1583_compatibility(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_rfc1583_compatibility");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetRfc1583CompatibilityRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_rfc1583_compatibility, pxa_outputs);
	async_ospfv2_0_1_set_rfc1583_compatibility(
	    xa_inputs.get(0, "compatibility").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_rfc1583_compatibility(
	    xa_inputs.get(0, "compatibility").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_rfc1583_compatibility", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_ip_router_alert
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_ip_router_alert", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_ip_router_alert(
	const bool&	arg_ip_router_alert,
	Ospfv201SetIpRouterAlertCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_ip_router_alert(
        arg_ip_router_alert);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_ip_router_alert(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_ip_router_alert");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetIpRouterAlertRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_ip_router_alert, pxa_outputs);
	async_ospfv2_0_1_set_ip_router_alert(
	    xa_inputs.get(0, "ip_router_alert").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_ip_router_alert(
	    xa_inputs.get(0, "ip_router_alert").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_ip_router_alert", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_create_area_router
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/create_area_router", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_create_area_router(
	const IPv4&	arg_area,
	const string&	arg_type,
	Ospfv201CreateAreaRouterCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_create_area_router(
        arg_area,
        arg_type);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_create_area_router(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/create_area_router");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201CreateAreaRouterRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_create_area_router, pxa_outputs);
	async_ospfv2_0_1_create_area_router(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "type").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_create_area_router(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "type").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/create_area_router", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_change_area_router_type
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/change_area_router_type", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_change_area_router_type(
	const IPv4&	arg_area,
	const string&	arg_type,
	Ospfv201ChangeAreaRouterTypeCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_change_area_router_type(
        arg_area,
        arg_type);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_change_area_router_type(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/change_area_router_type");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201ChangeAreaRouterTypeRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_change_area_router_type, pxa_outputs);
	async_ospfv2_0_1_change_area_router_type(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "type").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_change_area_router_type(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "type").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/change_area_router_type", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_destroy_area_router
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/destroy_area_router", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_destroy_area_router(
	const IPv4&	arg_area,
	Ospfv201DestroyAreaRouterCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_destroy_area_router(
        arg_area);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_destroy_area_router(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/destroy_area_router");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201DestroyAreaRouterRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_destroy_area_router, pxa_outputs);
	async_ospfv2_0_1_destroy_area_router(
	    xa_inputs.get(0, "area").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_destroy_area_router(
	    xa_inputs.get(0, "area").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/destroy_area_router", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_create_peer
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/create_peer", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_create_peer(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_addr,
	const string&	arg_type,
	const IPv4&	arg_area,
	Ospfv201CreatePeerCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_create_peer(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_type,
        arg_area);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_create_peer(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/create_peer");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201CreatePeerRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_create_peer, pxa_outputs);
	async_ospfv2_0_1_create_peer(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "type").text(),
	    xa_inputs.get(4, "area").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_create_peer(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "type").text(),
	    xa_inputs.get(4, "area").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/create_peer", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_peer
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/delete_peer", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_delete_peer(
	const string&	arg_ifname,
	const string&	arg_vifname,
	Ospfv201DeletePeerCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_delete_peer(
        arg_ifname,
        arg_vifname);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_peer(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/delete_peer");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201DeletePeerRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_peer, pxa_outputs);
	async_ospfv2_0_1_delete_peer(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_delete_peer(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/delete_peer", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_peer_state
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_peer_state", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_peer_state(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const bool&	arg_enable,
	Ospfv201SetPeerStateCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_peer_state(
        arg_ifname,
        arg_vifname,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_peer_state(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_peer_state");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetPeerStateRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_peer_state, pxa_outputs);
	async_ospfv2_0_1_set_peer_state(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_peer_state(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_peer_state", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_add_neighbour
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/add_neighbour", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_add_neighbour(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const IPv4&	arg_neighbour_address,
	const IPv4&	arg_neighbour_id,
	Ospfv201AddNeighbourCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_add_neighbour(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_neighbour_address,
        arg_neighbour_id);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_add_neighbour(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/add_neighbour");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201AddNeighbourRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_add_neighbour, pxa_outputs);
	async_ospfv2_0_1_add_neighbour(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "neighbour_address").ipv4(),
	    xa_inputs.get(4, "neighbour_id").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_add_neighbour(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "neighbour_address").ipv4(),
	    xa_inputs.get(4, "neighbour_id").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/add_neighbour", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_remove_neighbour
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/remove_neighbour", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_remove_neighbour(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const IPv4&	arg_neighbour_address,
	const IPv4&	arg_neighbour_id,
	Ospfv201RemoveNeighbourCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_remove_neighbour(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_neighbour_address,
        arg_neighbour_id);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_remove_neighbour(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/remove_neighbour");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201RemoveNeighbourRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_remove_neighbour, pxa_outputs);
	async_ospfv2_0_1_remove_neighbour(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "neighbour_address").ipv4(),
	    xa_inputs.get(4, "neighbour_id").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_remove_neighbour(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "neighbour_address").ipv4(),
	    xa_inputs.get(4, "neighbour_id").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/remove_neighbour", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_create_virtual_link
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/create_virtual_link", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_create_virtual_link(
	const IPv4&	arg_neighbour_id,
	const IPv4&	arg_area,
	Ospfv201CreateVirtualLinkCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_create_virtual_link(
        arg_neighbour_id,
        arg_area);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_create_virtual_link(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/create_virtual_link");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201CreateVirtualLinkRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_create_virtual_link, pxa_outputs);
	async_ospfv2_0_1_create_virtual_link(
	    xa_inputs.get(0, "neighbour_id").ipv4(),
	    xa_inputs.get(1, "area").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_create_virtual_link(
	    xa_inputs.get(0, "neighbour_id").ipv4(),
	    xa_inputs.get(1, "area").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/create_virtual_link", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_virtual_link
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/delete_virtual_link", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_delete_virtual_link(
	const IPv4&	arg_neighbour_id,
	Ospfv201DeleteVirtualLinkCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_delete_virtual_link(
        arg_neighbour_id);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_virtual_link(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/delete_virtual_link");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201DeleteVirtualLinkRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_virtual_link, pxa_outputs);
	async_ospfv2_0_1_delete_virtual_link(
	    xa_inputs.get(0, "neighbour_id").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_delete_virtual_link(
	    xa_inputs.get(0, "neighbour_id").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/delete_virtual_link", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_transit_area_virtual_link
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/transit_area_virtual_link", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_transit_area_virtual_link(
	const IPv4&	arg_neighbour_id,
	const IPv4&	arg_transit_area,
	Ospfv201TransitAreaVirtualLinkCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_transit_area_virtual_link(
        arg_neighbour_id,
        arg_transit_area);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_transit_area_virtual_link(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/transit_area_virtual_link");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201TransitAreaVirtualLinkRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_transit_area_virtual_link, pxa_outputs);
	async_ospfv2_0_1_transit_area_virtual_link(
	    xa_inputs.get(0, "neighbour_id").ipv4(),
	    xa_inputs.get(1, "transit_area").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_transit_area_virtual_link(
	    xa_inputs.get(0, "neighbour_id").ipv4(),
	    xa_inputs.get(1, "transit_area").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/transit_area_virtual_link", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_interface_cost
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_interface_cost", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_interface_cost(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_cost,
	Ospfv201SetInterfaceCostCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_interface_cost(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_cost);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_interface_cost(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_interface_cost");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetInterfaceCostRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_interface_cost, pxa_outputs);
	async_ospfv2_0_1_set_interface_cost(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "cost").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_interface_cost(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "cost").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_interface_cost", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_retransmit_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_retransmit_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_retransmit_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_interval,
	Ospfv201SetRetransmitIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_retransmit_interval(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_interval);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_retransmit_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_retransmit_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetRetransmitIntervalRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_retransmit_interval, pxa_outputs);
	async_ospfv2_0_1_set_retransmit_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "interval").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_retransmit_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "interval").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_retransmit_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_inftransdelay
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_inftransdelay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_inftransdelay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_delay,
	Ospfv201SetInftransdelayCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_inftransdelay(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_delay);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_inftransdelay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_inftransdelay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetInftransdelayRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_inftransdelay, pxa_outputs);
	async_ospfv2_0_1_set_inftransdelay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "delay").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_inftransdelay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "delay").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_inftransdelay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_router_priority
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_router_priority", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_router_priority(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_priority,
	Ospfv201SetRouterPriorityCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_router_priority(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_priority);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_router_priority(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_router_priority");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetRouterPriorityRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_router_priority, pxa_outputs);
	async_ospfv2_0_1_set_router_priority(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "priority").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_router_priority(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "priority").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_router_priority", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_hello_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_hello_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_hello_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_interval,
	Ospfv201SetHelloIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_hello_interval(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_interval);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_hello_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_hello_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetHelloIntervalRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_hello_interval, pxa_outputs);
	async_ospfv2_0_1_set_hello_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "interval").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_hello_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "interval").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_hello_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_router_dead_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_router_dead_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_router_dead_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_interval,
	Ospfv201SetRouterDeadIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_router_dead_interval(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_interval);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_router_dead_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_router_dead_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetRouterDeadIntervalRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_router_dead_interval, pxa_outputs);
	async_ospfv2_0_1_set_router_dead_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "interval").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_router_dead_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "interval").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_router_dead_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_simple_authentication_key
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_simple_authentication_key", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_simple_authentication_key(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const string&	arg_password,
	Ospfv201SetSimpleAuthenticationKeyCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_simple_authentication_key(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_password);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_simple_authentication_key(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_simple_authentication_key");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetSimpleAuthenticationKeyRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_simple_authentication_key, pxa_outputs);
	async_ospfv2_0_1_set_simple_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "password").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_simple_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "password").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_simple_authentication_key", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_simple_authentication_key
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/delete_simple_authentication_key", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_delete_simple_authentication_key(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	Ospfv201DeleteSimpleAuthenticationKeyCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_delete_simple_authentication_key(
        arg_ifname,
        arg_vifname,
        arg_area);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_simple_authentication_key(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/delete_simple_authentication_key");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201DeleteSimpleAuthenticationKeyRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_simple_authentication_key, pxa_outputs);
	async_ospfv2_0_1_delete_simple_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_delete_simple_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/delete_simple_authentication_key", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_md5_authentication_key
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_md5_authentication_key", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_md5_authentication_key(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_key_id,
	const string&	arg_password,
	const string&	arg_start_time,
	const string&	arg_end_time,
	const uint32_t&	arg_max_time_drift,
	Ospfv201SetMd5AuthenticationKeyCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_md5_authentication_key(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_key_id,
        arg_password,
        arg_start_time,
        arg_end_time,
        arg_max_time_drift);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_md5_authentication_key(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(8), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_md5_authentication_key");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetMd5AuthenticationKeyRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_md5_authentication_key, pxa_outputs);
	async_ospfv2_0_1_set_md5_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "key_id").uint32(),
	    xa_inputs.get(4, "password").text(),
	    xa_inputs.get(5, "start_time").text(),
	    xa_inputs.get(6, "end_time").text(),
	    xa_inputs.get(7, "max_time_drift").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_md5_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "key_id").uint32(),
	    xa_inputs.get(4, "password").text(),
	    xa_inputs.get(5, "start_time").text(),
	    xa_inputs.get(6, "end_time").text(),
	    xa_inputs.get(7, "max_time_drift").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_md5_authentication_key", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_md5_authentication_key
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/delete_md5_authentication_key", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_delete_md5_authentication_key(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const uint32_t&	arg_key_id,
	Ospfv201DeleteMd5AuthenticationKeyCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_delete_md5_authentication_key(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_key_id);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_delete_md5_authentication_key(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/delete_md5_authentication_key");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201DeleteMd5AuthenticationKeyRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_delete_md5_authentication_key, pxa_outputs);
	async_ospfv2_0_1_delete_md5_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "key_id").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_delete_md5_authentication_key(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "key_id").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/delete_md5_authentication_key", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_set_passive
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/set_passive", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_set_passive(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv4&	arg_area,
	const bool&	arg_passive,
	const bool&	arg_host,
	Ospfv201SetPassiveCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_set_passive(
        arg_ifname,
        arg_vifname,
        arg_area,
        arg_passive,
        arg_host);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_set_passive(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/set_passive");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SetPassiveRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_set_passive, pxa_outputs);
	async_ospfv2_0_1_set_passive(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "passive").boolean(),
	    xa_inputs.get(4, "host").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_set_passive(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "area").ipv4(),
	    xa_inputs.get(3, "passive").boolean(),
	    xa_inputs.get(4, "host").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/set_passive", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_originate_default_route
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/originate_default_route", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_originate_default_route(
	const IPv4&	arg_area,
	const bool&	arg_enable,
	Ospfv201OriginateDefaultRouteCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_originate_default_route(
        arg_area,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_originate_default_route(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/originate_default_route");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201OriginateDefaultRouteRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_originate_default_route, pxa_outputs);
	async_ospfv2_0_1_originate_default_route(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_originate_default_route(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/originate_default_route", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_stub_default_cost
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/stub_default_cost", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_stub_default_cost(
	const IPv4&	arg_area,
	const uint32_t&	arg_cost,
	Ospfv201StubDefaultCostCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_stub_default_cost(
        arg_area,
        arg_cost);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_stub_default_cost(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/stub_default_cost");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201StubDefaultCostRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_stub_default_cost, pxa_outputs);
	async_ospfv2_0_1_stub_default_cost(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "cost").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_stub_default_cost(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "cost").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/stub_default_cost", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_summaries
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/summaries", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_summaries(
	const IPv4&	arg_area,
	const bool&	arg_enable,
	Ospfv201SummariesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_summaries(
        arg_area,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_summaries(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/summaries");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201SummariesRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_summaries, pxa_outputs);
	async_ospfv2_0_1_summaries(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_summaries(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/summaries", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_area_range_add
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/area_range_add", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_area_range_add(
	const IPv4&	arg_area,
	const IPv4Net&	arg_net,
	const bool&	arg_advertise,
	Ospfv201AreaRangeAddCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_area_range_add(
        arg_area,
        arg_net,
        arg_advertise);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_area_range_add(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/area_range_add");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201AreaRangeAddRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_area_range_add, pxa_outputs);
	async_ospfv2_0_1_area_range_add(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "net").ipv4net(),
	    xa_inputs.get(2, "advertise").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_area_range_add(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "net").ipv4net(),
	    xa_inputs.get(2, "advertise").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/area_range_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_area_range_delete
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/area_range_delete", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_area_range_delete(
	const IPv4&	arg_area,
	const IPv4Net&	arg_net,
	Ospfv201AreaRangeDeleteCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_area_range_delete(
        arg_area,
        arg_net);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_area_range_delete(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/area_range_delete");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201AreaRangeDeleteRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_area_range_delete, pxa_outputs);
	async_ospfv2_0_1_area_range_delete(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "net").ipv4net(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_area_range_delete(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "net").ipv4net());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/area_range_delete", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_area_range_change_state
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/area_range_change_state", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_area_range_change_state(
	const IPv4&	arg_area,
	const IPv4Net&	arg_net,
	const bool&	arg_advertise,
	Ospfv201AreaRangeChangeStateCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_area_range_change_state(
        arg_area,
        arg_net,
        arg_advertise);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_area_range_change_state(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/area_range_change_state");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201AreaRangeChangeStateRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_area_range_change_state, pxa_outputs);
	async_ospfv2_0_1_area_range_change_state(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "net").ipv4net(),
	    xa_inputs.get(2, "advertise").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_area_range_change_state(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "net").ipv4net(),
	    xa_inputs.get(2, "advertise").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/area_range_change_state", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_trace
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/trace", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_trace(
	const string&	arg_tvar,
	const bool&	arg_enable,
	Ospfv201TraceCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_trace(
        arg_tvar,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_trace(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/trace");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201TraceRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_trace, pxa_outputs);
	async_ospfv2_0_1_trace(
	    xa_inputs.get(0, "tvar").text(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_trace(
	    xa_inputs.get(0, "tvar").text(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/trace", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_get_lsa
    (const XrlCmdError &e,
     const bool* rarg_valid,
     const bool* rarg_toohigh,
     const bool* rarg_self,
     const vector<uint8_t>* rarg_lsa,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/get_lsa", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("valid", *rarg_valid);
	    out.add("toohigh", *rarg_toohigh);
	    out.add("self", *rarg_self);
	    out.add("lsa", *rarg_lsa);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_get_lsa(
	const IPv4&	arg_area,
	const uint32_t&	arg_index,
	Ospfv201GetLsaCB c_b)
{

    /* Return value declarations */
    bool rarg_valid;
    bool rarg_toohigh;
    bool rarg_self;
    vector<uint8_t> rarg_lsa;
    XrlCmdError e = ospfv2_0_1_get_lsa(
        arg_area,
        arg_index,
        rarg_valid,
        rarg_toohigh,
        rarg_self,
        rarg_lsa);
    return c_b->dispatch(e,
        &rarg_valid,
        &rarg_toohigh,
        &rarg_self,
        &rarg_lsa);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_get_lsa(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/get_lsa");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201GetLsaRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_get_lsa, pxa_outputs);
	async_ospfv2_0_1_get_lsa(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "index").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_valid;
    bool r_toohigh;
    bool r_self;
    vector<uint8_t> r_lsa;
    try {
	XrlCmdError e = ospfv2_0_1_get_lsa(
	    xa_inputs.get(0, "area").ipv4(),
	    xa_inputs.get(1, "index").uint32(),
	    r_valid,
	    r_toohigh,
	    r_self,
	    r_lsa);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/get_lsa", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("valid", r_valid);
	pxa_outputs->add("toohigh", r_toohigh);
	pxa_outputs->add("self", r_self);
	pxa_outputs->add("lsa", r_lsa);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_get_area_list
    (const XrlCmdError &e,
     const XrlAtomList* rarg_areas,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/get_area_list", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("areas", *rarg_areas);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_get_area_list(
	Ospfv201GetAreaListCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_areas;
    XrlCmdError e = ospfv2_0_1_get_area_list(
        rarg_areas);
    return c_b->dispatch(e,
        &rarg_areas);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_get_area_list(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/get_area_list");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201GetAreaListRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_get_area_list, pxa_outputs);
	async_ospfv2_0_1_get_area_list( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_areas;
    try {
	XrlCmdError e = ospfv2_0_1_get_area_list(
	    r_areas);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/get_area_list", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("areas", r_areas);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_get_neighbour_list
    (const XrlCmdError &e,
     const XrlAtomList* rarg_areas,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/get_neighbour_list", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("areas", *rarg_areas);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_get_neighbour_list(
	Ospfv201GetNeighbourListCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_areas;
    XrlCmdError e = ospfv2_0_1_get_neighbour_list(
        rarg_areas);
    return c_b->dispatch(e,
        &rarg_areas);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_get_neighbour_list(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/get_neighbour_list");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201GetNeighbourListRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_get_neighbour_list, pxa_outputs);
	async_ospfv2_0_1_get_neighbour_list( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_areas;
    try {
	XrlCmdError e = ospfv2_0_1_get_neighbour_list(
	    r_areas);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/get_neighbour_list", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("areas", r_areas);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_get_neighbour_info
    (const XrlCmdError &e,
     const string* rarg_address,
     const string* rarg_interface,
     const string* rarg_state,
     const IPv4* rarg_rid,
     const uint32_t* rarg_priority,
     const uint32_t* rarg_deadtime,
     const IPv4* rarg_area,
     const uint32_t* rarg_opt,
     const IPv4* rarg_dr,
     const IPv4* rarg_bdr,
     const uint32_t* rarg_up,
     const uint32_t* rarg_adjacent,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/get_neighbour_info", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("address", *rarg_address);
	    out.add("interface", *rarg_interface);
	    out.add("state", *rarg_state);
	    out.add("rid", *rarg_rid);
	    out.add("priority", *rarg_priority);
	    out.add("deadtime", *rarg_deadtime);
	    out.add("area", *rarg_area);
	    out.add("opt", *rarg_opt);
	    out.add("dr", *rarg_dr);
	    out.add("bdr", *rarg_bdr);
	    out.add("up", *rarg_up);
	    out.add("adjacent", *rarg_adjacent);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_get_neighbour_info(
	const uint32_t&	arg_nid,
	Ospfv201GetNeighbourInfoCB c_b)
{

    /* Return value declarations */
    string rarg_address;
    string rarg_interface;
    string rarg_state;
    IPv4 rarg_rid;
    uint32_t rarg_priority;
    uint32_t rarg_deadtime;
    IPv4 rarg_area;
    uint32_t rarg_opt;
    IPv4 rarg_dr;
    IPv4 rarg_bdr;
    uint32_t rarg_up;
    uint32_t rarg_adjacent;
    XrlCmdError e = ospfv2_0_1_get_neighbour_info(
        arg_nid,
        rarg_address,
        rarg_interface,
        rarg_state,
        rarg_rid,
        rarg_priority,
        rarg_deadtime,
        rarg_area,
        rarg_opt,
        rarg_dr,
        rarg_bdr,
        rarg_up,
        rarg_adjacent);
    return c_b->dispatch(e,
        &rarg_address,
        &rarg_interface,
        &rarg_state,
        &rarg_rid,
        &rarg_priority,
        &rarg_deadtime,
        &rarg_area,
        &rarg_opt,
        &rarg_dr,
        &rarg_bdr,
        &rarg_up,
        &rarg_adjacent);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_get_neighbour_info(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/get_neighbour_info");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201GetNeighbourInfoRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_get_neighbour_info, pxa_outputs);
	async_ospfv2_0_1_get_neighbour_info(
	    xa_inputs.get(0, "nid").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_address;
    string r_interface;
    string r_state;
    IPv4 r_rid;
    uint32_t r_priority;
    uint32_t r_deadtime;
    IPv4 r_area;
    uint32_t r_opt;
    IPv4 r_dr;
    IPv4 r_bdr;
    uint32_t r_up;
    uint32_t r_adjacent;
    try {
	XrlCmdError e = ospfv2_0_1_get_neighbour_info(
	    xa_inputs.get(0, "nid").uint32(),
	    r_address,
	    r_interface,
	    r_state,
	    r_rid,
	    r_priority,
	    r_deadtime,
	    r_area,
	    r_opt,
	    r_dr,
	    r_bdr,
	    r_up,
	    r_adjacent);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/get_neighbour_info", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("address", r_address);
	pxa_outputs->add("interface", r_interface);
	pxa_outputs->add("state", r_state);
	pxa_outputs->add("rid", r_rid);
	pxa_outputs->add("priority", r_priority);
	pxa_outputs->add("deadtime", r_deadtime);
	pxa_outputs->add("area", r_area);
	pxa_outputs->add("opt", r_opt);
	pxa_outputs->add("dr", r_dr);
	pxa_outputs->add("bdr", r_bdr);
	pxa_outputs->add("up", r_up);
	pxa_outputs->add("adjacent", r_adjacent);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlOspfv2TargetBase::callback_ospfv2_0_1_clear_database
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ospfv2/0.1/clear_database", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlOspfv2TargetBase::async_ospfv2_0_1_clear_database(
	Ospfv201ClearDatabaseCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ospfv2_0_1_clear_database();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlOspfv2TargetBase::handle_ospfv2_0_1_clear_database(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "ospfv2/0.1/clear_database");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ospfv201ClearDatabaseRF mycb =
	    callback(this, &XrlOspfv2TargetBase::callback_ospfv2_0_1_clear_database, pxa_outputs);
	async_ospfv2_0_1_clear_database( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ospfv2_0_1_clear_database();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ospfv2/0.1/clear_database", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlOspfv2TargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "ospfv2", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlOspfv2TargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
