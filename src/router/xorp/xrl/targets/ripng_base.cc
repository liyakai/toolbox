/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/ripng_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "ripng_base.hh"


const struct XrlRipngTargetBase::handler_table XrlRipngTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlRipngTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlRipngTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlRipngTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlRipngTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlRipngTargetBase::handle_common_0_1_startup },
    { "finder_event_observer/0.1/xrl_target_birth",
      &XrlRipngTargetBase::handle_finder_event_observer_0_1_xrl_target_birth },
    { "finder_event_observer/0.1/xrl_target_death",
      &XrlRipngTargetBase::handle_finder_event_observer_0_1_xrl_target_death },
    { "policy_backend/0.1/configure",
      &XrlRipngTargetBase::handle_policy_backend_0_1_configure },
    { "policy_backend/0.1/reset",
      &XrlRipngTargetBase::handle_policy_backend_0_1_reset },
    { "policy_backend/0.1/push_routes",
      &XrlRipngTargetBase::handle_policy_backend_0_1_push_routes },
    { "policy_redist6/0.1/add_route6",
      &XrlRipngTargetBase::handle_policy_redist6_0_1_add_route6 },
    { "policy_redist6/0.1/delete_route6",
      &XrlRipngTargetBase::handle_policy_redist6_0_1_delete_route6 },
    { "ripng/0.1/add_rip_address",
      &XrlRipngTargetBase::handle_ripng_0_1_add_rip_address },
    { "ripng/0.1/remove_rip_address",
      &XrlRipngTargetBase::handle_ripng_0_1_remove_rip_address },
    { "ripng/0.1/set_rip_address_enabled",
      &XrlRipngTargetBase::handle_ripng_0_1_set_rip_address_enabled },
    { "ripng/0.1/rip_address_enabled",
      &XrlRipngTargetBase::handle_ripng_0_1_rip_address_enabled },
    { "ripng/0.1/set_cost",
      &XrlRipngTargetBase::handle_ripng_0_1_set_cost },
    { "ripng/0.1/cost",
      &XrlRipngTargetBase::handle_ripng_0_1_cost },
    { "ripng/0.1/set_horizon",
      &XrlRipngTargetBase::handle_ripng_0_1_set_horizon },
    { "ripng/0.1/horizon",
      &XrlRipngTargetBase::handle_ripng_0_1_horizon },
    { "ripng/0.1/set_passive",
      &XrlRipngTargetBase::handle_ripng_0_1_set_passive },
    { "ripng/0.1/passive",
      &XrlRipngTargetBase::handle_ripng_0_1_passive },
    { "ripng/0.1/set_accept_non_rip_requests",
      &XrlRipngTargetBase::handle_ripng_0_1_set_accept_non_rip_requests },
    { "ripng/0.1/accept_non_rip_requests",
      &XrlRipngTargetBase::handle_ripng_0_1_accept_non_rip_requests },
    { "ripng/0.1/set_accept_default_route",
      &XrlRipngTargetBase::handle_ripng_0_1_set_accept_default_route },
    { "ripng/0.1/accept_default_route",
      &XrlRipngTargetBase::handle_ripng_0_1_accept_default_route },
    { "ripng/0.1/set_advertise_default_route",
      &XrlRipngTargetBase::handle_ripng_0_1_set_advertise_default_route },
    { "ripng/0.1/advertise_default_route",
      &XrlRipngTargetBase::handle_ripng_0_1_advertise_default_route },
    { "ripng/0.1/set_route_timeout",
      &XrlRipngTargetBase::handle_ripng_0_1_set_route_timeout },
    { "ripng/0.1/route_timeout",
      &XrlRipngTargetBase::handle_ripng_0_1_route_timeout },
    { "ripng/0.1/set_deletion_delay",
      &XrlRipngTargetBase::handle_ripng_0_1_set_deletion_delay },
    { "ripng/0.1/deletion_delay",
      &XrlRipngTargetBase::handle_ripng_0_1_deletion_delay },
    { "ripng/0.1/set_request_interval",
      &XrlRipngTargetBase::handle_ripng_0_1_set_request_interval },
    { "ripng/0.1/request_interval",
      &XrlRipngTargetBase::handle_ripng_0_1_request_interval },
    { "ripng/0.1/set_update_interval",
      &XrlRipngTargetBase::handle_ripng_0_1_set_update_interval },
    { "ripng/0.1/update_interval",
      &XrlRipngTargetBase::handle_ripng_0_1_update_interval },
    { "ripng/0.1/set_update_jitter",
      &XrlRipngTargetBase::handle_ripng_0_1_set_update_jitter },
    { "ripng/0.1/update_jitter",
      &XrlRipngTargetBase::handle_ripng_0_1_update_jitter },
    { "ripng/0.1/set_triggered_update_delay",
      &XrlRipngTargetBase::handle_ripng_0_1_set_triggered_update_delay },
    { "ripng/0.1/triggered_update_delay",
      &XrlRipngTargetBase::handle_ripng_0_1_triggered_update_delay },
    { "ripng/0.1/set_triggered_update_jitter",
      &XrlRipngTargetBase::handle_ripng_0_1_set_triggered_update_jitter },
    { "ripng/0.1/triggered_update_jitter",
      &XrlRipngTargetBase::handle_ripng_0_1_triggered_update_jitter },
    { "ripng/0.1/set_interpacket_delay",
      &XrlRipngTargetBase::handle_ripng_0_1_set_interpacket_delay },
    { "ripng/0.1/interpacket_delay",
      &XrlRipngTargetBase::handle_ripng_0_1_interpacket_delay },
    { "ripng/0.1/rip_address_status",
      &XrlRipngTargetBase::handle_ripng_0_1_rip_address_status },
    { "ripng/0.1/get_all_addresses",
      &XrlRipngTargetBase::handle_ripng_0_1_get_all_addresses },
    { "ripng/0.1/get_counters",
      &XrlRipngTargetBase::handle_ripng_0_1_get_counters },
    { "ripng/0.1/get_peers",
      &XrlRipngTargetBase::handle_ripng_0_1_get_peers },
    { "ripng/0.1/get_all_peers",
      &XrlRipngTargetBase::handle_ripng_0_1_get_all_peers },
    { "ripng/0.1/get_peer_counters",
      &XrlRipngTargetBase::handle_ripng_0_1_get_peer_counters },
    { "ripng/0.1/trace",
      &XrlRipngTargetBase::handle_ripng_0_1_trace },
    { "socket6_user/0.1/recv_event",
      &XrlRipngTargetBase::handle_socket6_user_0_1_recv_event },
    { "socket6_user/0.1/inbound_connect_event",
      &XrlRipngTargetBase::handle_socket6_user_0_1_inbound_connect_event },
    { "socket6_user/0.1/outgoing_connect_event",
      &XrlRipngTargetBase::handle_socket6_user_0_1_outgoing_connect_event },
    { "socket6_user/0.1/error_event",
      &XrlRipngTargetBase::handle_socket6_user_0_1_error_event },
    { "socket6_user/0.1/disconnect_event",
      &XrlRipngTargetBase::handle_socket6_user_0_1_disconnect_event },
};

const size_t XrlRipngTargetBase::num_handlers = (sizeof(XrlRipngTargetBase::handlers) / sizeof(XrlRipngTargetBase::handlers[0]));


XrlRipngTargetBase::XrlRipngTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlRipngTargetBase::~XrlRipngTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlRipngTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_finder_event_observer_0_1_xrl_target_birth
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_finder_event_observer_0_1_xrl_target_birth(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetBirthCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_birth");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetBirthRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_finder_event_observer_0_1_xrl_target_birth, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_birth(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_birth", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_finder_event_observer_0_1_xrl_target_death
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_finder_event_observer_0_1_xrl_target_death(
	const string&	arg_target_class,
	const string&	arg_target_instance,
	FinderEventObserver01XrlTargetDeathCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
        arg_target_class,
        arg_target_instance);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_observer/0.1/xrl_target_death");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventObserver01XrlTargetDeathRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_finder_event_observer_0_1_xrl_target_death, pxa_outputs);
	async_finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_observer_0_1_xrl_target_death(
	    xa_inputs.get(0, "target_class").text(),
	    xa_inputs.get(1, "target_instance").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_observer/0.1/xrl_target_death", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_policy_backend_0_1_configure
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/configure", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_policy_backend_0_1_configure(
	const uint32_t&	arg_filter,
	const string&	arg_conf,
	PolicyBackend01ConfigureCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_configure(
        arg_filter,
        arg_conf);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_policy_backend_0_1_configure(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/configure");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ConfigureRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_policy_backend_0_1_configure, pxa_outputs);
	async_policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_configure(
	    xa_inputs.get(0, "filter").uint32(),
	    xa_inputs.get(1, "conf").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/configure", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_policy_backend_0_1_reset
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/reset", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_policy_backend_0_1_reset(
	const uint32_t&	arg_filter,
	PolicyBackend01ResetCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_reset(
        arg_filter);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_policy_backend_0_1_reset(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/reset");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01ResetRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_policy_backend_0_1_reset, pxa_outputs);
	async_policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_reset(
	    xa_inputs.get(0, "filter").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/reset", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_policy_backend_0_1_push_routes
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_backend/0.1/push_routes", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_policy_backend_0_1_push_routes(
	PolicyBackend01PushRoutesCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_backend_0_1_push_routes();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_policy_backend_0_1_push_routes(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "policy_backend/0.1/push_routes");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyBackend01PushRoutesRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_policy_backend_0_1_push_routes, pxa_outputs);
	async_policy_backend_0_1_push_routes( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_backend_0_1_push_routes();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_backend/0.1/push_routes", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_policy_redist6_0_1_add_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_redist6/0.1/add_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_policy_redist6_0_1_add_route6(
	const IPv6Net&	arg_network,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	const IPv6&	arg_nexthop,
	const uint32_t&	arg_metric,
	const XrlAtomList&	arg_policytags,
	PolicyRedist601AddRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_redist6_0_1_add_route6(
        arg_network,
        arg_unicast,
        arg_multicast,
        arg_nexthop,
        arg_metric,
        arg_policytags);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_policy_redist6_0_1_add_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "policy_redist6/0.1/add_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyRedist601AddRoute6RF mycb =
	    callback(this, &XrlRipngTargetBase::callback_policy_redist6_0_1_add_route6, pxa_outputs);
	async_policy_redist6_0_1_add_route6(
	    xa_inputs.get(0, "network").ipv6net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32(),
	    xa_inputs.get(5, "policytags").list(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_redist6_0_1_add_route6(
	    xa_inputs.get(0, "network").ipv6net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(),
	    xa_inputs.get(3, "nexthop").ipv6(),
	    xa_inputs.get(4, "metric").uint32(),
	    xa_inputs.get(5, "policytags").list());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_redist6/0.1/add_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_policy_redist6_0_1_delete_route6
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "policy_redist6/0.1/delete_route6", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_policy_redist6_0_1_delete_route6(
	const IPv6Net&	arg_network,
	const bool&	arg_unicast,
	const bool&	arg_multicast,
	PolicyRedist601DeleteRoute6CB c_b)
{

    /* Return value declarations */
    XrlCmdError e = policy_redist6_0_1_delete_route6(
        arg_network,
        arg_unicast,
        arg_multicast);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_policy_redist6_0_1_delete_route6(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "policy_redist6/0.1/delete_route6");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	PolicyRedist601DeleteRoute6RF mycb =
	    callback(this, &XrlRipngTargetBase::callback_policy_redist6_0_1_delete_route6, pxa_outputs);
	async_policy_redist6_0_1_delete_route6(
	    xa_inputs.get(0, "network").ipv6net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = policy_redist6_0_1_delete_route6(
	    xa_inputs.get(0, "network").ipv6net(),
	    xa_inputs.get(1, "unicast").boolean(),
	    xa_inputs.get(2, "multicast").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "policy_redist6/0.1/delete_route6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_add_rip_address
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/add_rip_address", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_add_rip_address(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01AddRipAddressCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_add_rip_address(
        arg_ifname,
        arg_vifname,
        arg_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_add_rip_address(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/add_rip_address");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01AddRipAddressRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_add_rip_address, pxa_outputs);
	async_ripng_0_1_add_rip_address(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_add_rip_address(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/add_rip_address", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_remove_rip_address
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/remove_rip_address", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_remove_rip_address(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01RemoveRipAddressCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_remove_rip_address(
        arg_ifname,
        arg_vifname,
        arg_addr);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_remove_rip_address(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/remove_rip_address");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01RemoveRipAddressRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_remove_rip_address, pxa_outputs);
	async_ripng_0_1_remove_rip_address(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_remove_rip_address(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/remove_rip_address", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_rip_address_enabled
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_rip_address_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_rip_address_enabled(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_enabled,
	Ripng01SetRipAddressEnabledCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_rip_address_enabled(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_enabled);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_rip_address_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_rip_address_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetRipAddressEnabledRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_rip_address_enabled, pxa_outputs);
	async_ripng_0_1_set_rip_address_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "enabled").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_rip_address_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_rip_address_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_rip_address_enabled
    (const XrlCmdError &e,
     const bool* rarg_enabled,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/rip_address_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("enabled", *rarg_enabled);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_rip_address_enabled(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01RipAddressEnabledCB c_b)
{

    /* Return value declarations */
    bool rarg_enabled;
    XrlCmdError e = ripng_0_1_rip_address_enabled(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_enabled);
    return c_b->dispatch(e,
        &rarg_enabled);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_rip_address_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/rip_address_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01RipAddressEnabledRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_rip_address_enabled, pxa_outputs);
	async_ripng_0_1_rip_address_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_enabled;
    try {
	XrlCmdError e = ripng_0_1_rip_address_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/rip_address_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("enabled", r_enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_cost
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_cost", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_cost(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_cost,
	Ripng01SetCostCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_cost(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_cost);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_cost(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_cost");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetCostRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_cost, pxa_outputs);
	async_ripng_0_1_set_cost(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "cost").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_cost(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "cost").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_cost", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_cost
    (const XrlCmdError &e,
     const uint32_t* rarg_cost,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/cost", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("cost", *rarg_cost);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_cost(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01CostCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_cost;
    XrlCmdError e = ripng_0_1_cost(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_cost);
    return c_b->dispatch(e,
        &rarg_cost);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_cost(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/cost");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01CostRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_cost, pxa_outputs);
	async_ripng_0_1_cost(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_cost;
    try {
	XrlCmdError e = ripng_0_1_cost(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_cost);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/cost", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("cost", r_cost);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_horizon
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_horizon", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_horizon(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const string&	arg_horizon,
	Ripng01SetHorizonCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_horizon(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_horizon);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_horizon(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_horizon");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetHorizonRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_horizon, pxa_outputs);
	async_ripng_0_1_set_horizon(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "horizon").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_horizon(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "horizon").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_horizon", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_horizon
    (const XrlCmdError &e,
     const string* rarg_horizon,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/horizon", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("horizon", *rarg_horizon);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_horizon(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01HorizonCB c_b)
{

    /* Return value declarations */
    string rarg_horizon;
    XrlCmdError e = ripng_0_1_horizon(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_horizon);
    return c_b->dispatch(e,
        &rarg_horizon);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_horizon(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/horizon");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01HorizonRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_horizon, pxa_outputs);
	async_ripng_0_1_horizon(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_horizon;
    try {
	XrlCmdError e = ripng_0_1_horizon(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_horizon);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/horizon", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("horizon", r_horizon);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_passive
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_passive", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_passive(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_passive,
	Ripng01SetPassiveCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_passive(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_passive);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_passive(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_passive");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetPassiveRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_passive, pxa_outputs);
	async_ripng_0_1_set_passive(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "passive").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_passive(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "passive").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_passive", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_passive
    (const XrlCmdError &e,
     const bool* rarg_passive,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/passive", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("passive", *rarg_passive);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_passive(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01PassiveCB c_b)
{

    /* Return value declarations */
    bool rarg_passive;
    XrlCmdError e = ripng_0_1_passive(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_passive);
    return c_b->dispatch(e,
        &rarg_passive);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_passive(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/passive");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01PassiveRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_passive, pxa_outputs);
	async_ripng_0_1_passive(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_passive;
    try {
	XrlCmdError e = ripng_0_1_passive(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_passive);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/passive", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("passive", r_passive);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_accept_non_rip_requests
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_accept_non_rip_requests", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_accept_non_rip_requests(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_accept,
	Ripng01SetAcceptNonRipRequestsCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_accept_non_rip_requests(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_accept);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_accept_non_rip_requests(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_accept_non_rip_requests");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetAcceptNonRipRequestsRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_accept_non_rip_requests, pxa_outputs);
	async_ripng_0_1_set_accept_non_rip_requests(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "accept").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_accept_non_rip_requests(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "accept").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_accept_non_rip_requests", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_accept_non_rip_requests
    (const XrlCmdError &e,
     const bool* rarg_accept,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/accept_non_rip_requests", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("accept", *rarg_accept);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_accept_non_rip_requests(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01AcceptNonRipRequestsCB c_b)
{

    /* Return value declarations */
    bool rarg_accept;
    XrlCmdError e = ripng_0_1_accept_non_rip_requests(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_accept);
    return c_b->dispatch(e,
        &rarg_accept);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_accept_non_rip_requests(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/accept_non_rip_requests");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01AcceptNonRipRequestsRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_accept_non_rip_requests, pxa_outputs);
	async_ripng_0_1_accept_non_rip_requests(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_accept;
    try {
	XrlCmdError e = ripng_0_1_accept_non_rip_requests(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_accept);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/accept_non_rip_requests", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("accept", r_accept);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_accept_default_route
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_accept_default_route", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_accept_default_route(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_accept,
	Ripng01SetAcceptDefaultRouteCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_accept_default_route(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_accept);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_accept_default_route(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_accept_default_route");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetAcceptDefaultRouteRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_accept_default_route, pxa_outputs);
	async_ripng_0_1_set_accept_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "accept").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_accept_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "accept").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_accept_default_route", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_accept_default_route
    (const XrlCmdError &e,
     const bool* rarg_accept,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/accept_default_route", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("accept", *rarg_accept);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_accept_default_route(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01AcceptDefaultRouteCB c_b)
{

    /* Return value declarations */
    bool rarg_accept;
    XrlCmdError e = ripng_0_1_accept_default_route(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_accept);
    return c_b->dispatch(e,
        &rarg_accept);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_accept_default_route(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/accept_default_route");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01AcceptDefaultRouteRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_accept_default_route, pxa_outputs);
	async_ripng_0_1_accept_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_accept;
    try {
	XrlCmdError e = ripng_0_1_accept_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_accept);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/accept_default_route", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("accept", r_accept);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_advertise_default_route
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_advertise_default_route", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_advertise_default_route(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const bool&	arg_advertise,
	Ripng01SetAdvertiseDefaultRouteCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_advertise_default_route(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_advertise);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_advertise_default_route(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_advertise_default_route");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetAdvertiseDefaultRouteRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_advertise_default_route, pxa_outputs);
	async_ripng_0_1_set_advertise_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "advertise").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_advertise_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "advertise").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_advertise_default_route", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_advertise_default_route
    (const XrlCmdError &e,
     const bool* rarg_advertise,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/advertise_default_route", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("advertise", *rarg_advertise);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_advertise_default_route(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01AdvertiseDefaultRouteCB c_b)
{

    /* Return value declarations */
    bool rarg_advertise;
    XrlCmdError e = ripng_0_1_advertise_default_route(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_advertise);
    return c_b->dispatch(e,
        &rarg_advertise);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_advertise_default_route(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/advertise_default_route");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01AdvertiseDefaultRouteRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_advertise_default_route, pxa_outputs);
	async_ripng_0_1_advertise_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_advertise;
    try {
	XrlCmdError e = ripng_0_1_advertise_default_route(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_advertise);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/advertise_default_route", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("advertise", r_advertise);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_route_timeout
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_route_timeout", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_route_timeout(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_secs,
	Ripng01SetRouteTimeoutCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_route_timeout(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_secs);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_route_timeout(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_route_timeout");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetRouteTimeoutRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_route_timeout, pxa_outputs);
	async_ripng_0_1_set_route_timeout(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_route_timeout(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_route_timeout", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_route_timeout
    (const XrlCmdError &e,
     const uint32_t* rarg_t_secs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/route_timeout", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_secs", *rarg_t_secs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_route_timeout(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01RouteTimeoutCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_secs;
    XrlCmdError e = ripng_0_1_route_timeout(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_secs);
    return c_b->dispatch(e,
        &rarg_t_secs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_route_timeout(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/route_timeout");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01RouteTimeoutRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_route_timeout, pxa_outputs);
	async_ripng_0_1_route_timeout(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_secs;
    try {
	XrlCmdError e = ripng_0_1_route_timeout(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_secs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/route_timeout", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_secs", r_t_secs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_deletion_delay
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_deletion_delay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_deletion_delay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_secs,
	Ripng01SetDeletionDelayCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_deletion_delay(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_secs);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_deletion_delay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_deletion_delay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetDeletionDelayRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_deletion_delay, pxa_outputs);
	async_ripng_0_1_set_deletion_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_deletion_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_deletion_delay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_deletion_delay
    (const XrlCmdError &e,
     const uint32_t* rarg_t_secs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/deletion_delay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_secs", *rarg_t_secs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_deletion_delay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01DeletionDelayCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_secs;
    XrlCmdError e = ripng_0_1_deletion_delay(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_secs);
    return c_b->dispatch(e,
        &rarg_t_secs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_deletion_delay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/deletion_delay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01DeletionDelayRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_deletion_delay, pxa_outputs);
	async_ripng_0_1_deletion_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_secs;
    try {
	XrlCmdError e = ripng_0_1_deletion_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_secs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/deletion_delay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_secs", r_t_secs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_request_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_request_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_request_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_secs,
	Ripng01SetRequestIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_request_interval(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_secs);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_request_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_request_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetRequestIntervalRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_request_interval, pxa_outputs);
	async_ripng_0_1_set_request_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_request_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_request_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_request_interval
    (const XrlCmdError &e,
     const uint32_t* rarg_t_secs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/request_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_secs", *rarg_t_secs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_request_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01RequestIntervalCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_secs;
    XrlCmdError e = ripng_0_1_request_interval(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_secs);
    return c_b->dispatch(e,
        &rarg_t_secs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_request_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/request_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01RequestIntervalRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_request_interval, pxa_outputs);
	async_ripng_0_1_request_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_secs;
    try {
	XrlCmdError e = ripng_0_1_request_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_secs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/request_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_secs", r_t_secs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_update_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_update_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_update_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_secs,
	Ripng01SetUpdateIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_update_interval(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_secs);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_update_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_update_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetUpdateIntervalRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_update_interval, pxa_outputs);
	async_ripng_0_1_set_update_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_update_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_update_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_update_interval
    (const XrlCmdError &e,
     const uint32_t* rarg_t_secs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/update_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_secs", *rarg_t_secs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_update_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01UpdateIntervalCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_secs;
    XrlCmdError e = ripng_0_1_update_interval(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_secs);
    return c_b->dispatch(e,
        &rarg_t_secs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_update_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/update_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01UpdateIntervalRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_update_interval, pxa_outputs);
	async_ripng_0_1_update_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_secs;
    try {
	XrlCmdError e = ripng_0_1_update_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_secs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/update_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_secs", r_t_secs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_update_jitter
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_update_jitter", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_update_jitter(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_jitter,
	Ripng01SetUpdateJitterCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_update_jitter(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_jitter);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_update_jitter(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_update_jitter");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetUpdateJitterRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_update_jitter, pxa_outputs);
	async_ripng_0_1_set_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_jitter").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_jitter").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_update_jitter", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_update_jitter
    (const XrlCmdError &e,
     const uint32_t* rarg_t_jitter,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/update_jitter", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_jitter", *rarg_t_jitter);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_update_jitter(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01UpdateJitterCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_jitter;
    XrlCmdError e = ripng_0_1_update_jitter(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_jitter);
    return c_b->dispatch(e,
        &rarg_t_jitter);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_update_jitter(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/update_jitter");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01UpdateJitterRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_update_jitter, pxa_outputs);
	async_ripng_0_1_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_jitter;
    try {
	XrlCmdError e = ripng_0_1_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_jitter);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/update_jitter", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_jitter", r_t_jitter);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_triggered_update_delay
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_triggered_update_delay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_triggered_update_delay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_secs,
	Ripng01SetTriggeredUpdateDelayCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_triggered_update_delay(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_secs);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_triggered_update_delay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_triggered_update_delay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetTriggeredUpdateDelayRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_triggered_update_delay, pxa_outputs);
	async_ripng_0_1_set_triggered_update_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_triggered_update_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_secs").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_triggered_update_delay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_triggered_update_delay
    (const XrlCmdError &e,
     const uint32_t* rarg_t_secs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/triggered_update_delay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_secs", *rarg_t_secs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_triggered_update_delay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01TriggeredUpdateDelayCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_secs;
    XrlCmdError e = ripng_0_1_triggered_update_delay(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_secs);
    return c_b->dispatch(e,
        &rarg_t_secs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_triggered_update_delay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/triggered_update_delay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01TriggeredUpdateDelayRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_triggered_update_delay, pxa_outputs);
	async_ripng_0_1_triggered_update_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_secs;
    try {
	XrlCmdError e = ripng_0_1_triggered_update_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_secs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/triggered_update_delay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_secs", r_t_secs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_triggered_update_jitter
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_triggered_update_jitter", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_triggered_update_jitter(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_jitter,
	Ripng01SetTriggeredUpdateJitterCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_triggered_update_jitter(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_jitter);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_triggered_update_jitter(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_triggered_update_jitter");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetTriggeredUpdateJitterRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_triggered_update_jitter, pxa_outputs);
	async_ripng_0_1_set_triggered_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_jitter").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_triggered_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_jitter").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_triggered_update_jitter", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_triggered_update_jitter
    (const XrlCmdError &e,
     const uint32_t* rarg_t_jitter,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/triggered_update_jitter", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_jitter", *rarg_t_jitter);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_triggered_update_jitter(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01TriggeredUpdateJitterCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_jitter;
    XrlCmdError e = ripng_0_1_triggered_update_jitter(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_jitter);
    return c_b->dispatch(e,
        &rarg_t_jitter);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_triggered_update_jitter(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/triggered_update_jitter");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01TriggeredUpdateJitterRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_triggered_update_jitter, pxa_outputs);
	async_ripng_0_1_triggered_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_jitter;
    try {
	XrlCmdError e = ripng_0_1_triggered_update_jitter(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_jitter);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/triggered_update_jitter", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_jitter", r_t_jitter);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_set_interpacket_delay
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/set_interpacket_delay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_set_interpacket_delay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const uint32_t&	arg_t_msecs,
	Ripng01SetInterpacketDelayCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_set_interpacket_delay(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_t_msecs);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_set_interpacket_delay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/set_interpacket_delay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01SetInterpacketDelayRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_set_interpacket_delay, pxa_outputs);
	async_ripng_0_1_set_interpacket_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_msecs").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_set_interpacket_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "t_msecs").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/set_interpacket_delay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_interpacket_delay
    (const XrlCmdError &e,
     const uint32_t* rarg_t_msecs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/interpacket_delay", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("t_msecs", *rarg_t_msecs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_interpacket_delay(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01InterpacketDelayCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_t_msecs;
    XrlCmdError e = ripng_0_1_interpacket_delay(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_t_msecs);
    return c_b->dispatch(e,
        &rarg_t_msecs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_interpacket_delay(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/interpacket_delay");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01InterpacketDelayRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_interpacket_delay, pxa_outputs);
	async_ripng_0_1_interpacket_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_t_msecs;
    try {
	XrlCmdError e = ripng_0_1_interpacket_delay(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_t_msecs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/interpacket_delay", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("t_msecs", r_t_msecs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_rip_address_status
    (const XrlCmdError &e,
     const string* rarg_status,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/rip_address_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_rip_address_status(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01RipAddressStatusCB c_b)
{

    /* Return value declarations */
    string rarg_status;
    XrlCmdError e = ripng_0_1_rip_address_status(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_status);
    return c_b->dispatch(e,
        &rarg_status);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_rip_address_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/rip_address_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01RipAddressStatusRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_rip_address_status, pxa_outputs);
	async_ripng_0_1_rip_address_status(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_status;
    try {
	XrlCmdError e = ripng_0_1_rip_address_status(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_status);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/rip_address_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_get_all_addresses
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ifnames,
     const XrlAtomList* rarg_vifnames,
     const XrlAtomList* rarg_addrs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/get_all_addresses", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ifnames", *rarg_ifnames);
	    out.add("vifnames", *rarg_vifnames);
	    out.add("addrs", *rarg_addrs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_get_all_addresses(
	Ripng01GetAllAddressesCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ifnames;
    XrlAtomList rarg_vifnames;
    XrlAtomList rarg_addrs;
    XrlCmdError e = ripng_0_1_get_all_addresses(
        rarg_ifnames,
        rarg_vifnames,
        rarg_addrs);
    return c_b->dispatch(e,
        &rarg_ifnames,
        &rarg_vifnames,
        &rarg_addrs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_get_all_addresses(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/get_all_addresses");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01GetAllAddressesRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_get_all_addresses, pxa_outputs);
	async_ripng_0_1_get_all_addresses( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ifnames;
    XrlAtomList r_vifnames;
    XrlAtomList r_addrs;
    try {
	XrlCmdError e = ripng_0_1_get_all_addresses(
	    r_ifnames,
	    r_vifnames,
	    r_addrs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/get_all_addresses", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ifnames", r_ifnames);
	pxa_outputs->add("vifnames", r_vifnames);
	pxa_outputs->add("addrs", r_addrs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_get_counters
    (const XrlCmdError &e,
     const XrlAtomList* rarg_counter_descriptions,
     const XrlAtomList* rarg_counter_values,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/get_counters", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("counter_descriptions", *rarg_counter_descriptions);
	    out.add("counter_values", *rarg_counter_values);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_get_counters(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01GetCountersCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_counter_descriptions;
    XrlAtomList rarg_counter_values;
    XrlCmdError e = ripng_0_1_get_counters(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_counter_descriptions,
        rarg_counter_values);
    return c_b->dispatch(e,
        &rarg_counter_descriptions,
        &rarg_counter_values);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_get_counters(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/get_counters");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01GetCountersRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_get_counters, pxa_outputs);
	async_ripng_0_1_get_counters(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_counter_descriptions;
    XrlAtomList r_counter_values;
    try {
	XrlCmdError e = ripng_0_1_get_counters(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_counter_descriptions,
	    r_counter_values);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/get_counters", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("counter_descriptions", r_counter_descriptions);
	pxa_outputs->add("counter_values", r_counter_values);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_get_peers
    (const XrlCmdError &e,
     const XrlAtomList* rarg_peers,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/get_peers", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("peers", *rarg_peers);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_get_peers(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	Ripng01GetPeersCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_peers;
    XrlCmdError e = ripng_0_1_get_peers(
        arg_ifname,
        arg_vifname,
        arg_addr,
        rarg_peers);
    return c_b->dispatch(e,
        &rarg_peers);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_get_peers(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/get_peers");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01GetPeersRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_get_peers, pxa_outputs);
	async_ripng_0_1_get_peers(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_peers;
    try {
	XrlCmdError e = ripng_0_1_get_peers(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    r_peers);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/get_peers", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("peers", r_peers);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_get_all_peers
    (const XrlCmdError &e,
     const XrlAtomList* rarg_peers,
     const XrlAtomList* rarg_ifnames,
     const XrlAtomList* rarg_vifnames,
     const XrlAtomList* rarg_addrs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/get_all_peers", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("peers", *rarg_peers);
	    out.add("ifnames", *rarg_ifnames);
	    out.add("vifnames", *rarg_vifnames);
	    out.add("addrs", *rarg_addrs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_get_all_peers(
	Ripng01GetAllPeersCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_peers;
    XrlAtomList rarg_ifnames;
    XrlAtomList rarg_vifnames;
    XrlAtomList rarg_addrs;
    XrlCmdError e = ripng_0_1_get_all_peers(
        rarg_peers,
        rarg_ifnames,
        rarg_vifnames,
        rarg_addrs);
    return c_b->dispatch(e,
        &rarg_peers,
        &rarg_ifnames,
        &rarg_vifnames,
        &rarg_addrs);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_get_all_peers(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/get_all_peers");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01GetAllPeersRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_get_all_peers, pxa_outputs);
	async_ripng_0_1_get_all_peers( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_peers;
    XrlAtomList r_ifnames;
    XrlAtomList r_vifnames;
    XrlAtomList r_addrs;
    try {
	XrlCmdError e = ripng_0_1_get_all_peers(
	    r_peers,
	    r_ifnames,
	    r_vifnames,
	    r_addrs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/get_all_peers", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("peers", r_peers);
	pxa_outputs->add("ifnames", r_ifnames);
	pxa_outputs->add("vifnames", r_vifnames);
	pxa_outputs->add("addrs", r_addrs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_get_peer_counters
    (const XrlCmdError &e,
     const XrlAtomList* rarg_counter_descriptions,
     const XrlAtomList* rarg_counter_values,
     const uint32_t* rarg_peer_last_active,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/get_peer_counters", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("counter_descriptions", *rarg_counter_descriptions);
	    out.add("counter_values", *rarg_counter_values);
	    out.add("peer_last_active", *rarg_peer_last_active);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_get_peer_counters(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const IPv6&	arg_addr,
	const IPv6&	arg_peer,
	Ripng01GetPeerCountersCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_counter_descriptions;
    XrlAtomList rarg_counter_values;
    uint32_t rarg_peer_last_active;
    XrlCmdError e = ripng_0_1_get_peer_counters(
        arg_ifname,
        arg_vifname,
        arg_addr,
        arg_peer,
        rarg_counter_descriptions,
        rarg_counter_values,
        rarg_peer_last_active);
    return c_b->dispatch(e,
        &rarg_counter_descriptions,
        &rarg_counter_values,
        &rarg_peer_last_active);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_get_peer_counters(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/get_peer_counters");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01GetPeerCountersRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_get_peer_counters, pxa_outputs);
	async_ripng_0_1_get_peer_counters(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "peer").ipv6(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_counter_descriptions;
    XrlAtomList r_counter_values;
    uint32_t r_peer_last_active;
    try {
	XrlCmdError e = ripng_0_1_get_peer_counters(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "peer").ipv6(),
	    r_counter_descriptions,
	    r_counter_values,
	    r_peer_last_active);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/get_peer_counters", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("counter_descriptions", r_counter_descriptions);
	pxa_outputs->add("counter_values", r_counter_values);
	pxa_outputs->add("peer_last_active", r_peer_last_active);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_ripng_0_1_trace
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "ripng/0.1/trace", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_ripng_0_1_trace(
	const string&	arg_tvar,
	const bool&	arg_enable,
	Ripng01TraceCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = ripng_0_1_trace(
        arg_tvar,
        arg_enable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_ripng_0_1_trace(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "ripng/0.1/trace");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Ripng01TraceRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_ripng_0_1_trace, pxa_outputs);
	async_ripng_0_1_trace(
	    xa_inputs.get(0, "tvar").text(),
	    xa_inputs.get(1, "enable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = ripng_0_1_trace(
	    xa_inputs.get(0, "tvar").text(),
	    xa_inputs.get(1, "enable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "ripng/0.1/trace", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_socket6_user_0_1_recv_event
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "socket6_user/0.1/recv_event", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_socket6_user_0_1_recv_event(
	const string&	arg_sockid,
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const IPv6&	arg_src_host,
	const uint32_t&	arg_src_port,
	const vector<uint8_t>&	arg_data,
	Socket6User01RecvEventCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = socket6_user_0_1_recv_event(
        arg_sockid,
        arg_if_name,
        arg_vif_name,
        arg_src_host,
        arg_src_port,
        arg_data);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_socket6_user_0_1_recv_event(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "socket6_user/0.1/recv_event");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Socket6User01RecvEventRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_socket6_user_0_1_recv_event, pxa_outputs);
	async_socket6_user_0_1_recv_event(
	    xa_inputs.get(0, "sockid").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "src_host").ipv6(),
	    xa_inputs.get(4, "src_port").uint32(),
	    xa_inputs.get(5, "data").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = socket6_user_0_1_recv_event(
	    xa_inputs.get(0, "sockid").text(),
	    xa_inputs.get(1, "if_name").text(),
	    xa_inputs.get(2, "vif_name").text(),
	    xa_inputs.get(3, "src_host").ipv6(),
	    xa_inputs.get(4, "src_port").uint32(),
	    xa_inputs.get(5, "data").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "socket6_user/0.1/recv_event", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_socket6_user_0_1_inbound_connect_event
    (const XrlCmdError &e,
     const bool* rarg_accept,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "socket6_user/0.1/inbound_connect_event", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("accept", *rarg_accept);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_socket6_user_0_1_inbound_connect_event(
	const string&	arg_sockid,
	const IPv6&	arg_src_host,
	const uint32_t&	arg_src_port,
	const string&	arg_new_sockid,
	Socket6User01InboundConnectEventCB c_b)
{

    /* Return value declarations */
    bool rarg_accept;
    XrlCmdError e = socket6_user_0_1_inbound_connect_event(
        arg_sockid,
        arg_src_host,
        arg_src_port,
        arg_new_sockid,
        rarg_accept);
    return c_b->dispatch(e,
        &rarg_accept);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_socket6_user_0_1_inbound_connect_event(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "socket6_user/0.1/inbound_connect_event");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Socket6User01InboundConnectEventRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_socket6_user_0_1_inbound_connect_event, pxa_outputs);
	async_socket6_user_0_1_inbound_connect_event(
	    xa_inputs.get(0, "sockid").text(),
	    xa_inputs.get(1, "src_host").ipv6(),
	    xa_inputs.get(2, "src_port").uint32(),
	    xa_inputs.get(3, "new_sockid").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_accept;
    try {
	XrlCmdError e = socket6_user_0_1_inbound_connect_event(
	    xa_inputs.get(0, "sockid").text(),
	    xa_inputs.get(1, "src_host").ipv6(),
	    xa_inputs.get(2, "src_port").uint32(),
	    xa_inputs.get(3, "new_sockid").text(),
	    r_accept);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "socket6_user/0.1/inbound_connect_event", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("accept", r_accept);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_socket6_user_0_1_outgoing_connect_event
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "socket6_user/0.1/outgoing_connect_event", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_socket6_user_0_1_outgoing_connect_event(
	const string&	arg_sockid,
	Socket6User01OutgoingConnectEventCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = socket6_user_0_1_outgoing_connect_event(
        arg_sockid);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_socket6_user_0_1_outgoing_connect_event(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "socket6_user/0.1/outgoing_connect_event");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Socket6User01OutgoingConnectEventRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_socket6_user_0_1_outgoing_connect_event, pxa_outputs);
	async_socket6_user_0_1_outgoing_connect_event(
	    xa_inputs.get(0, "sockid").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = socket6_user_0_1_outgoing_connect_event(
	    xa_inputs.get(0, "sockid").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "socket6_user/0.1/outgoing_connect_event", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_socket6_user_0_1_error_event
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "socket6_user/0.1/error_event", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_socket6_user_0_1_error_event(
	const string&	arg_sockid,
	const string&	arg_error,
	const bool&	arg_fatal,
	Socket6User01ErrorEventCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = socket6_user_0_1_error_event(
        arg_sockid,
        arg_error,
        arg_fatal);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_socket6_user_0_1_error_event(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "socket6_user/0.1/error_event");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Socket6User01ErrorEventRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_socket6_user_0_1_error_event, pxa_outputs);
	async_socket6_user_0_1_error_event(
	    xa_inputs.get(0, "sockid").text(),
	    xa_inputs.get(1, "error").text(),
	    xa_inputs.get(2, "fatal").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = socket6_user_0_1_error_event(
	    xa_inputs.get(0, "sockid").text(),
	    xa_inputs.get(1, "error").text(),
	    xa_inputs.get(2, "fatal").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "socket6_user/0.1/error_event", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlRipngTargetBase::callback_socket6_user_0_1_disconnect_event
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "socket6_user/0.1/disconnect_event", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlRipngTargetBase::async_socket6_user_0_1_disconnect_event(
	const string&	arg_sockid,
	Socket6User01DisconnectEventCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = socket6_user_0_1_disconnect_event(
        arg_sockid);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlRipngTargetBase::handle_socket6_user_0_1_disconnect_event(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "socket6_user/0.1/disconnect_event");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Socket6User01DisconnectEventRF mycb =
	    callback(this, &XrlRipngTargetBase::callback_socket6_user_0_1_disconnect_event, pxa_outputs);
	async_socket6_user_0_1_disconnect_event(
	    xa_inputs.get(0, "sockid").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = socket6_user_0_1_disconnect_event(
	    xa_inputs.get(0, "sockid").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "socket6_user/0.1/disconnect_event", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlRipngTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "ripng", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlRipngTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
