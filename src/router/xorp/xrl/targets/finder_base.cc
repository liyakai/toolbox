/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/finder_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "finder_base.hh"


const struct XrlFinderTargetBase::handler_table XrlFinderTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlFinderTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlFinderTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlFinderTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlFinderTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlFinderTargetBase::handle_common_0_1_startup },
    { "finder/0.2/register_finder_client",
      &XrlFinderTargetBase::handle_finder_0_2_register_finder_client },
    { "finder/0.2/unregister_finder_client",
      &XrlFinderTargetBase::handle_finder_0_2_unregister_finder_client },
    { "finder/0.2/set_finder_client_enabled",
      &XrlFinderTargetBase::handle_finder_0_2_set_finder_client_enabled },
    { "finder/0.2/finder_client_enabled",
      &XrlFinderTargetBase::handle_finder_0_2_finder_client_enabled },
    { "finder/0.2/add_xrl",
      &XrlFinderTargetBase::handle_finder_0_2_add_xrl },
    { "finder/0.2/remove_xrl",
      &XrlFinderTargetBase::handle_finder_0_2_remove_xrl },
    { "finder/0.2/resolve_xrl",
      &XrlFinderTargetBase::handle_finder_0_2_resolve_xrl },
    { "finder/0.2/get_xrl_targets",
      &XrlFinderTargetBase::handle_finder_0_2_get_xrl_targets },
    { "finder/0.2/get_xrls_registered_by",
      &XrlFinderTargetBase::handle_finder_0_2_get_xrls_registered_by },
    { "finder/0.2/get_ipv4_permitted_hosts",
      &XrlFinderTargetBase::handle_finder_0_2_get_ipv4_permitted_hosts },
    { "finder/0.2/get_ipv4_permitted_nets",
      &XrlFinderTargetBase::handle_finder_0_2_get_ipv4_permitted_nets },
    { "finder/0.2/get_ipv6_permitted_hosts",
      &XrlFinderTargetBase::handle_finder_0_2_get_ipv6_permitted_hosts },
    { "finder/0.2/get_ipv6_permitted_nets",
      &XrlFinderTargetBase::handle_finder_0_2_get_ipv6_permitted_nets },
    { "finder_event_notifier/0.1/register_class_event_interest",
      &XrlFinderTargetBase::handle_finder_event_notifier_0_1_register_class_event_interest },
    { "finder_event_notifier/0.1/deregister_class_event_interest",
      &XrlFinderTargetBase::handle_finder_event_notifier_0_1_deregister_class_event_interest },
    { "finder_event_notifier/0.1/register_instance_event_interest",
      &XrlFinderTargetBase::handle_finder_event_notifier_0_1_register_instance_event_interest },
    { "finder_event_notifier/0.1/deregister_instance_event_interest",
      &XrlFinderTargetBase::handle_finder_event_notifier_0_1_deregister_instance_event_interest },
};

const size_t XrlFinderTargetBase::num_handlers = (sizeof(XrlFinderTargetBase::handlers) / sizeof(XrlFinderTargetBase::handlers[0]));


XrlFinderTargetBase::XrlFinderTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlFinderTargetBase::~XrlFinderTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlFinderTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_register_finder_client
    (const XrlCmdError &e,
     const string* rarg_out_cookie,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/register_finder_client", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("out_cookie", *rarg_out_cookie);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_register_finder_client(
	const string&	arg_instance_name,
	const string&	arg_class_name,
	const bool&	arg_singleton,
	const string&	arg_in_cookie,
	Finder02RegisterFinderClientCB c_b)
{

    /* Return value declarations */
    string rarg_out_cookie;
    XrlCmdError e = finder_0_2_register_finder_client(
        arg_instance_name,
        arg_class_name,
        arg_singleton,
        arg_in_cookie,
        rarg_out_cookie);
    return c_b->dispatch(e,
        &rarg_out_cookie);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_register_finder_client(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/register_finder_client");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02RegisterFinderClientRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_register_finder_client, pxa_outputs);
	async_finder_0_2_register_finder_client(
	    xa_inputs.get(0, "instance_name").text(),
	    xa_inputs.get(1, "class_name").text(),
	    xa_inputs.get(2, "singleton").boolean(),
	    xa_inputs.get(3, "in_cookie").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_out_cookie;
    try {
	XrlCmdError e = finder_0_2_register_finder_client(
	    xa_inputs.get(0, "instance_name").text(),
	    xa_inputs.get(1, "class_name").text(),
	    xa_inputs.get(2, "singleton").boolean(),
	    xa_inputs.get(3, "in_cookie").text(),
	    r_out_cookie);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/register_finder_client", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("out_cookie", r_out_cookie);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_unregister_finder_client
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/unregister_finder_client", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_unregister_finder_client(
	const string&	arg_instance_name,
	Finder02UnregisterFinderClientCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_0_2_unregister_finder_client(
        arg_instance_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_unregister_finder_client(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/unregister_finder_client");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02UnregisterFinderClientRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_unregister_finder_client, pxa_outputs);
	async_finder_0_2_unregister_finder_client(
	    xa_inputs.get(0, "instance_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_0_2_unregister_finder_client(
	    xa_inputs.get(0, "instance_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/unregister_finder_client", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_set_finder_client_enabled
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/set_finder_client_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_set_finder_client_enabled(
	const string&	arg_instance_name,
	const bool&	arg_enabled,
	Finder02SetFinderClientEnabledCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_0_2_set_finder_client_enabled(
        arg_instance_name,
        arg_enabled);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_set_finder_client_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/set_finder_client_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02SetFinderClientEnabledRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_set_finder_client_enabled, pxa_outputs);
	async_finder_0_2_set_finder_client_enabled(
	    xa_inputs.get(0, "instance_name").text(),
	    xa_inputs.get(1, "enabled").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_0_2_set_finder_client_enabled(
	    xa_inputs.get(0, "instance_name").text(),
	    xa_inputs.get(1, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/set_finder_client_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_finder_client_enabled
    (const XrlCmdError &e,
     const bool* rarg_enabled,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/finder_client_enabled", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("enabled", *rarg_enabled);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_finder_client_enabled(
	const string&	arg_instance_name,
	Finder02FinderClientEnabledCB c_b)
{

    /* Return value declarations */
    bool rarg_enabled;
    XrlCmdError e = finder_0_2_finder_client_enabled(
        arg_instance_name,
        rarg_enabled);
    return c_b->dispatch(e,
        &rarg_enabled);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_finder_client_enabled(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/finder_client_enabled");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02FinderClientEnabledRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_finder_client_enabled, pxa_outputs);
	async_finder_0_2_finder_client_enabled(
	    xa_inputs.get(0, "instance_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    bool r_enabled;
    try {
	XrlCmdError e = finder_0_2_finder_client_enabled(
	    xa_inputs.get(0, "instance_name").text(),
	    r_enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/finder_client_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("enabled", r_enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_add_xrl
    (const XrlCmdError &e,
     const string* rarg_resolved_xrl_method_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/add_xrl", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("resolved_xrl_method_name", *rarg_resolved_xrl_method_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_add_xrl(
	const string&	arg_xrl,
	const string&	arg_protocol_name,
	const string&	arg_protocol_args,
	Finder02AddXrlCB c_b)
{

    /* Return value declarations */
    string rarg_resolved_xrl_method_name;
    XrlCmdError e = finder_0_2_add_xrl(
        arg_xrl,
        arg_protocol_name,
        arg_protocol_args,
        rarg_resolved_xrl_method_name);
    return c_b->dispatch(e,
        &rarg_resolved_xrl_method_name);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_add_xrl(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/add_xrl");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02AddXrlRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_add_xrl, pxa_outputs);
	async_finder_0_2_add_xrl(
	    xa_inputs.get(0, "xrl").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_args").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_resolved_xrl_method_name;
    try {
	XrlCmdError e = finder_0_2_add_xrl(
	    xa_inputs.get(0, "xrl").text(),
	    xa_inputs.get(1, "protocol_name").text(),
	    xa_inputs.get(2, "protocol_args").text(),
	    r_resolved_xrl_method_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/add_xrl", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("resolved_xrl_method_name", r_resolved_xrl_method_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_remove_xrl
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/remove_xrl", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_remove_xrl(
	const string&	arg_xrl,
	Finder02RemoveXrlCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_0_2_remove_xrl(
        arg_xrl);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_remove_xrl(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/remove_xrl");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02RemoveXrlRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_remove_xrl, pxa_outputs);
	async_finder_0_2_remove_xrl(
	    xa_inputs.get(0, "xrl").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_0_2_remove_xrl(
	    xa_inputs.get(0, "xrl").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/remove_xrl", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_resolve_xrl
    (const XrlCmdError &e,
     const XrlAtomList* rarg_resolutions,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/resolve_xrl", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("resolutions", *rarg_resolutions);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_resolve_xrl(
	const string&	arg_xrl,
	Finder02ResolveXrlCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_resolutions;
    XrlCmdError e = finder_0_2_resolve_xrl(
        arg_xrl,
        rarg_resolutions);
    return c_b->dispatch(e,
        &rarg_resolutions);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_resolve_xrl(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/resolve_xrl");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02ResolveXrlRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_resolve_xrl, pxa_outputs);
	async_finder_0_2_resolve_xrl(
	    xa_inputs.get(0, "xrl").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_resolutions;
    try {
	XrlCmdError e = finder_0_2_resolve_xrl(
	    xa_inputs.get(0, "xrl").text(),
	    r_resolutions);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/resolve_xrl", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("resolutions", r_resolutions);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_get_xrl_targets
    (const XrlCmdError &e,
     const XrlAtomList* rarg_target_names,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/get_xrl_targets", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("target_names", *rarg_target_names);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_get_xrl_targets(
	Finder02GetXrlTargetsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_target_names;
    XrlCmdError e = finder_0_2_get_xrl_targets(
        rarg_target_names);
    return c_b->dispatch(e,
        &rarg_target_names);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_get_xrl_targets(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/get_xrl_targets");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02GetXrlTargetsRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_get_xrl_targets, pxa_outputs);
	async_finder_0_2_get_xrl_targets( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_target_names;
    try {
	XrlCmdError e = finder_0_2_get_xrl_targets(
	    r_target_names);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/get_xrl_targets", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("target_names", r_target_names);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_get_xrls_registered_by
    (const XrlCmdError &e,
     const XrlAtomList* rarg_xrls,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/get_xrls_registered_by", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("xrls", *rarg_xrls);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_get_xrls_registered_by(
	const string&	arg_target_name,
	Finder02GetXrlsRegisteredByCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_xrls;
    XrlCmdError e = finder_0_2_get_xrls_registered_by(
        arg_target_name,
        rarg_xrls);
    return c_b->dispatch(e,
        &rarg_xrls);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_get_xrls_registered_by(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/get_xrls_registered_by");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02GetXrlsRegisteredByRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_get_xrls_registered_by, pxa_outputs);
	async_finder_0_2_get_xrls_registered_by(
	    xa_inputs.get(0, "target_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_xrls;
    try {
	XrlCmdError e = finder_0_2_get_xrls_registered_by(
	    xa_inputs.get(0, "target_name").text(),
	    r_xrls);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/get_xrls_registered_by", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("xrls", r_xrls);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_get_ipv4_permitted_hosts
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ipv4s,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/get_ipv4_permitted_hosts", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ipv4s", *rarg_ipv4s);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_get_ipv4_permitted_hosts(
	Finder02GetIpv4PermittedHostsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ipv4s;
    XrlCmdError e = finder_0_2_get_ipv4_permitted_hosts(
        rarg_ipv4s);
    return c_b->dispatch(e,
        &rarg_ipv4s);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_get_ipv4_permitted_hosts(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/get_ipv4_permitted_hosts");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02GetIpv4PermittedHostsRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_get_ipv4_permitted_hosts, pxa_outputs);
	async_finder_0_2_get_ipv4_permitted_hosts( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ipv4s;
    try {
	XrlCmdError e = finder_0_2_get_ipv4_permitted_hosts(
	    r_ipv4s);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/get_ipv4_permitted_hosts", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ipv4s", r_ipv4s);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_get_ipv4_permitted_nets
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ipv4nets,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/get_ipv4_permitted_nets", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ipv4nets", *rarg_ipv4nets);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_get_ipv4_permitted_nets(
	Finder02GetIpv4PermittedNetsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ipv4nets;
    XrlCmdError e = finder_0_2_get_ipv4_permitted_nets(
        rarg_ipv4nets);
    return c_b->dispatch(e,
        &rarg_ipv4nets);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_get_ipv4_permitted_nets(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/get_ipv4_permitted_nets");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02GetIpv4PermittedNetsRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_get_ipv4_permitted_nets, pxa_outputs);
	async_finder_0_2_get_ipv4_permitted_nets( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ipv4nets;
    try {
	XrlCmdError e = finder_0_2_get_ipv4_permitted_nets(
	    r_ipv4nets);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/get_ipv4_permitted_nets", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ipv4nets", r_ipv4nets);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_get_ipv6_permitted_hosts
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ipv6s,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/get_ipv6_permitted_hosts", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ipv6s", *rarg_ipv6s);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_get_ipv6_permitted_hosts(
	Finder02GetIpv6PermittedHostsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ipv6s;
    XrlCmdError e = finder_0_2_get_ipv6_permitted_hosts(
        rarg_ipv6s);
    return c_b->dispatch(e,
        &rarg_ipv6s);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_get_ipv6_permitted_hosts(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/get_ipv6_permitted_hosts");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02GetIpv6PermittedHostsRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_get_ipv6_permitted_hosts, pxa_outputs);
	async_finder_0_2_get_ipv6_permitted_hosts( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ipv6s;
    try {
	XrlCmdError e = finder_0_2_get_ipv6_permitted_hosts(
	    r_ipv6s);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/get_ipv6_permitted_hosts", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ipv6s", r_ipv6s);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_0_2_get_ipv6_permitted_nets
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ipv6nets,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder/0.2/get_ipv6_permitted_nets", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ipv6nets", *rarg_ipv6nets);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_0_2_get_ipv6_permitted_nets(
	Finder02GetIpv6PermittedNetsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ipv6nets;
    XrlCmdError e = finder_0_2_get_ipv6_permitted_nets(
        rarg_ipv6nets);
    return c_b->dispatch(e,
        &rarg_ipv6nets);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_0_2_get_ipv6_permitted_nets(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "finder/0.2/get_ipv6_permitted_nets");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Finder02GetIpv6PermittedNetsRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_0_2_get_ipv6_permitted_nets, pxa_outputs);
	async_finder_0_2_get_ipv6_permitted_nets( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ipv6nets;
    try {
	XrlCmdError e = finder_0_2_get_ipv6_permitted_nets(
	    r_ipv6nets);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder/0.2/get_ipv6_permitted_nets", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ipv6nets", r_ipv6nets);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_event_notifier_0_1_register_class_event_interest
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_notifier/0.1/register_class_event_interest", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_event_notifier_0_1_register_class_event_interest(
	const string&	arg_requester_instance,
	const string&	arg_class_name,
	FinderEventNotifier01RegisterClassEventInterestCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_notifier_0_1_register_class_event_interest(
        arg_requester_instance,
        arg_class_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_event_notifier_0_1_register_class_event_interest(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_notifier/0.1/register_class_event_interest");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventNotifier01RegisterClassEventInterestRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_event_notifier_0_1_register_class_event_interest, pxa_outputs);
	async_finder_event_notifier_0_1_register_class_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "class_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_notifier_0_1_register_class_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "class_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_notifier/0.1/register_class_event_interest", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_event_notifier_0_1_deregister_class_event_interest
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_notifier/0.1/deregister_class_event_interest", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_event_notifier_0_1_deregister_class_event_interest(
	const string&	arg_requester_instance,
	const string&	arg_class_name,
	FinderEventNotifier01DeregisterClassEventInterestCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_notifier_0_1_deregister_class_event_interest(
        arg_requester_instance,
        arg_class_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_event_notifier_0_1_deregister_class_event_interest(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_notifier/0.1/deregister_class_event_interest");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventNotifier01DeregisterClassEventInterestRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_event_notifier_0_1_deregister_class_event_interest, pxa_outputs);
	async_finder_event_notifier_0_1_deregister_class_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "class_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_notifier_0_1_deregister_class_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "class_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_notifier/0.1/deregister_class_event_interest", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_event_notifier_0_1_register_instance_event_interest
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_notifier/0.1/register_instance_event_interest", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_event_notifier_0_1_register_instance_event_interest(
	const string&	arg_requester_instance,
	const string&	arg_instance_name,
	FinderEventNotifier01RegisterInstanceEventInterestCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_notifier_0_1_register_instance_event_interest(
        arg_requester_instance,
        arg_instance_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_event_notifier_0_1_register_instance_event_interest(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_notifier/0.1/register_instance_event_interest");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventNotifier01RegisterInstanceEventInterestRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_event_notifier_0_1_register_instance_event_interest, pxa_outputs);
	async_finder_event_notifier_0_1_register_instance_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "instance_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_notifier_0_1_register_instance_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "instance_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_notifier/0.1/register_instance_event_interest", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlFinderTargetBase::callback_finder_event_notifier_0_1_deregister_instance_event_interest
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "finder_event_notifier/0.1/deregister_instance_event_interest", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlFinderTargetBase::async_finder_event_notifier_0_1_deregister_instance_event_interest(
	const string&	arg_requester_instance,
	const string&	arg_instance_name,
	FinderEventNotifier01DeregisterInstanceEventInterestCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = finder_event_notifier_0_1_deregister_instance_event_interest(
        arg_requester_instance,
        arg_instance_name);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlFinderTargetBase::handle_finder_event_notifier_0_1_deregister_instance_event_interest(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "finder_event_notifier/0.1/deregister_instance_event_interest");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	FinderEventNotifier01DeregisterInstanceEventInterestRF mycb =
	    callback(this, &XrlFinderTargetBase::callback_finder_event_notifier_0_1_deregister_instance_event_interest, pxa_outputs);
	async_finder_event_notifier_0_1_deregister_instance_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "instance_name").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = finder_event_notifier_0_1_deregister_instance_event_interest(
	    xa_inputs.get(0, "requester_instance").text(),
	    xa_inputs.get(1, "instance_name").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "finder_event_notifier/0.1/deregister_instance_event_interest", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlFinderTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "finder", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlFinderTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
