/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/cli_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_CLI_BASE_HH__
#define __XRL_TARGETS_CLI_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlCliTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlCliTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlCliTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlCliTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "cli/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable/start/stop the CLI.
     *
     *  @param enable if true, then enable the CLI, otherwise disable it.
     */
    virtual XrlCmdError cli_manager_0_1_enable_cli(
	// Input values,
	const bool&	enable) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01EnableCliRF;

    class CliManager01EnableCliCB {
        CliManager01EnableCliRF cb;

    public:
        operator const CliManager01EnableCliRF& () const { return cb; }
        const CliManager01EnableCliRF& operator ->() const { return cb; }
        CliManager01EnableCliCB(const CliManager01EnableCliRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01EnableCliRsp :
      public CliManager01EnableCliCB {
        CliManager01EnableCliRsp(const CliManager01EnableCliRF& cb)
          : CliManager01EnableCliCB(cb) { }

    };

    virtual void async_cli_manager_0_1_enable_cli
       (
	const bool&	enable,
	CliManager01EnableCliCB);
#endif

    virtual XrlCmdError cli_manager_0_1_start_cli() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01StartCliRF;

    class CliManager01StartCliCB {
        CliManager01StartCliRF cb;

    public:
        operator const CliManager01StartCliRF& () const { return cb; }
        const CliManager01StartCliRF& operator ->() const { return cb; }
        CliManager01StartCliCB(const CliManager01StartCliRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01StartCliRsp :
      public CliManager01StartCliCB {
        CliManager01StartCliRsp(const CliManager01StartCliRF& cb)
          : CliManager01StartCliCB(cb) { }

    };

    virtual void async_cli_manager_0_1_start_cli
       (
	CliManager01StartCliCB);
#endif

    virtual XrlCmdError cli_manager_0_1_stop_cli() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01StopCliRF;

    class CliManager01StopCliCB {
        CliManager01StopCliRF cb;

    public:
        operator const CliManager01StopCliRF& () const { return cb; }
        const CliManager01StopCliRF& operator ->() const { return cb; }
        CliManager01StopCliCB(const CliManager01StopCliRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01StopCliRsp :
      public CliManager01StopCliCB {
        CliManager01StopCliRsp(const CliManager01StopCliRF& cb)
          : CliManager01StopCliCB(cb) { }

    };

    virtual void async_cli_manager_0_1_stop_cli
       (
	CliManager01StopCliCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add a subnet address to the list of subnet addresses enabled for CLI
     *  access. This method can be called more than once to add a number of
     *  subnet addresses.
     *
     *  @param subnet_addr the subnet address to add.
     */
    virtual XrlCmdError cli_manager_0_1_add_enable_cli_access_from_subnet4(
	// Input values,
	const IPv4Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01AddEnableCliAccessFromSubnet4RF;

    class CliManager01AddEnableCliAccessFromSubnet4CB {
        CliManager01AddEnableCliAccessFromSubnet4RF cb;

    public:
        operator const CliManager01AddEnableCliAccessFromSubnet4RF& () const { return cb; }
        const CliManager01AddEnableCliAccessFromSubnet4RF& operator ->() const { return cb; }
        CliManager01AddEnableCliAccessFromSubnet4CB(const CliManager01AddEnableCliAccessFromSubnet4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01AddEnableCliAccessFromSubnet4Rsp :
      public CliManager01AddEnableCliAccessFromSubnet4CB {
        CliManager01AddEnableCliAccessFromSubnet4Rsp(const CliManager01AddEnableCliAccessFromSubnet4RF& cb)
          : CliManager01AddEnableCliAccessFromSubnet4CB(cb) { }

    };

    virtual void async_cli_manager_0_1_add_enable_cli_access_from_subnet4
       (
	const IPv4Net&	subnet_addr,
	CliManager01AddEnableCliAccessFromSubnet4CB);
#endif

    virtual XrlCmdError cli_manager_0_1_add_enable_cli_access_from_subnet6(
	// Input values,
	const IPv6Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01AddEnableCliAccessFromSubnet6RF;

    class CliManager01AddEnableCliAccessFromSubnet6CB {
        CliManager01AddEnableCliAccessFromSubnet6RF cb;

    public:
        operator const CliManager01AddEnableCliAccessFromSubnet6RF& () const { return cb; }
        const CliManager01AddEnableCliAccessFromSubnet6RF& operator ->() const { return cb; }
        CliManager01AddEnableCliAccessFromSubnet6CB(const CliManager01AddEnableCliAccessFromSubnet6RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01AddEnableCliAccessFromSubnet6Rsp :
      public CliManager01AddEnableCliAccessFromSubnet6CB {
        CliManager01AddEnableCliAccessFromSubnet6Rsp(const CliManager01AddEnableCliAccessFromSubnet6RF& cb)
          : CliManager01AddEnableCliAccessFromSubnet6CB(cb) { }

    };

    virtual void async_cli_manager_0_1_add_enable_cli_access_from_subnet6
       (
	const IPv6Net&	subnet_addr,
	CliManager01AddEnableCliAccessFromSubnet6CB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete a subnet address from the list of subnet addresses enabled for
     *  CLI access.
     *
     *  @param subnet_addr the subnet address to delete.
     */
    virtual XrlCmdError cli_manager_0_1_delete_enable_cli_access_from_subnet4(
	// Input values,
	const IPv4Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01DeleteEnableCliAccessFromSubnet4RF;

    class CliManager01DeleteEnableCliAccessFromSubnet4CB {
        CliManager01DeleteEnableCliAccessFromSubnet4RF cb;

    public:
        operator const CliManager01DeleteEnableCliAccessFromSubnet4RF& () const { return cb; }
        const CliManager01DeleteEnableCliAccessFromSubnet4RF& operator ->() const { return cb; }
        CliManager01DeleteEnableCliAccessFromSubnet4CB(const CliManager01DeleteEnableCliAccessFromSubnet4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01DeleteEnableCliAccessFromSubnet4Rsp :
      public CliManager01DeleteEnableCliAccessFromSubnet4CB {
        CliManager01DeleteEnableCliAccessFromSubnet4Rsp(const CliManager01DeleteEnableCliAccessFromSubnet4RF& cb)
          : CliManager01DeleteEnableCliAccessFromSubnet4CB(cb) { }

    };

    virtual void async_cli_manager_0_1_delete_enable_cli_access_from_subnet4
       (
	const IPv4Net&	subnet_addr,
	CliManager01DeleteEnableCliAccessFromSubnet4CB);
#endif

    virtual XrlCmdError cli_manager_0_1_delete_enable_cli_access_from_subnet6(
	// Input values,
	const IPv6Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01DeleteEnableCliAccessFromSubnet6RF;

    class CliManager01DeleteEnableCliAccessFromSubnet6CB {
        CliManager01DeleteEnableCliAccessFromSubnet6RF cb;

    public:
        operator const CliManager01DeleteEnableCliAccessFromSubnet6RF& () const { return cb; }
        const CliManager01DeleteEnableCliAccessFromSubnet6RF& operator ->() const { return cb; }
        CliManager01DeleteEnableCliAccessFromSubnet6CB(const CliManager01DeleteEnableCliAccessFromSubnet6RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01DeleteEnableCliAccessFromSubnet6Rsp :
      public CliManager01DeleteEnableCliAccessFromSubnet6CB {
        CliManager01DeleteEnableCliAccessFromSubnet6Rsp(const CliManager01DeleteEnableCliAccessFromSubnet6RF& cb)
          : CliManager01DeleteEnableCliAccessFromSubnet6CB(cb) { }

    };

    virtual void async_cli_manager_0_1_delete_enable_cli_access_from_subnet6
       (
	const IPv6Net&	subnet_addr,
	CliManager01DeleteEnableCliAccessFromSubnet6CB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add a subnet address to the list of subnet addresses disabled for CLI
     *  access. This method can be called more than once to add a number of
     *  subnet addresses.
     *
     *  @param subnet_addr the subnet address to add.
     */
    virtual XrlCmdError cli_manager_0_1_add_disable_cli_access_from_subnet4(
	// Input values,
	const IPv4Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01AddDisableCliAccessFromSubnet4RF;

    class CliManager01AddDisableCliAccessFromSubnet4CB {
        CliManager01AddDisableCliAccessFromSubnet4RF cb;

    public:
        operator const CliManager01AddDisableCliAccessFromSubnet4RF& () const { return cb; }
        const CliManager01AddDisableCliAccessFromSubnet4RF& operator ->() const { return cb; }
        CliManager01AddDisableCliAccessFromSubnet4CB(const CliManager01AddDisableCliAccessFromSubnet4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01AddDisableCliAccessFromSubnet4Rsp :
      public CliManager01AddDisableCliAccessFromSubnet4CB {
        CliManager01AddDisableCliAccessFromSubnet4Rsp(const CliManager01AddDisableCliAccessFromSubnet4RF& cb)
          : CliManager01AddDisableCliAccessFromSubnet4CB(cb) { }

    };

    virtual void async_cli_manager_0_1_add_disable_cli_access_from_subnet4
       (
	const IPv4Net&	subnet_addr,
	CliManager01AddDisableCliAccessFromSubnet4CB);
#endif

    virtual XrlCmdError cli_manager_0_1_add_disable_cli_access_from_subnet6(
	// Input values,
	const IPv6Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01AddDisableCliAccessFromSubnet6RF;

    class CliManager01AddDisableCliAccessFromSubnet6CB {
        CliManager01AddDisableCliAccessFromSubnet6RF cb;

    public:
        operator const CliManager01AddDisableCliAccessFromSubnet6RF& () const { return cb; }
        const CliManager01AddDisableCliAccessFromSubnet6RF& operator ->() const { return cb; }
        CliManager01AddDisableCliAccessFromSubnet6CB(const CliManager01AddDisableCliAccessFromSubnet6RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01AddDisableCliAccessFromSubnet6Rsp :
      public CliManager01AddDisableCliAccessFromSubnet6CB {
        CliManager01AddDisableCliAccessFromSubnet6Rsp(const CliManager01AddDisableCliAccessFromSubnet6RF& cb)
          : CliManager01AddDisableCliAccessFromSubnet6CB(cb) { }

    };

    virtual void async_cli_manager_0_1_add_disable_cli_access_from_subnet6
       (
	const IPv6Net&	subnet_addr,
	CliManager01AddDisableCliAccessFromSubnet6CB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete a subnet address from the list of subnet addresses disabled for
     *  CLI access.
     *
     *  @param subnet_addr the subnet address to delete.
     */
    virtual XrlCmdError cli_manager_0_1_delete_disable_cli_access_from_subnet4(
	// Input values,
	const IPv4Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01DeleteDisableCliAccessFromSubnet4RF;

    class CliManager01DeleteDisableCliAccessFromSubnet4CB {
        CliManager01DeleteDisableCliAccessFromSubnet4RF cb;

    public:
        operator const CliManager01DeleteDisableCliAccessFromSubnet4RF& () const { return cb; }
        const CliManager01DeleteDisableCliAccessFromSubnet4RF& operator ->() const { return cb; }
        CliManager01DeleteDisableCliAccessFromSubnet4CB(const CliManager01DeleteDisableCliAccessFromSubnet4RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01DeleteDisableCliAccessFromSubnet4Rsp :
      public CliManager01DeleteDisableCliAccessFromSubnet4CB {
        CliManager01DeleteDisableCliAccessFromSubnet4Rsp(const CliManager01DeleteDisableCliAccessFromSubnet4RF& cb)
          : CliManager01DeleteDisableCliAccessFromSubnet4CB(cb) { }

    };

    virtual void async_cli_manager_0_1_delete_disable_cli_access_from_subnet4
       (
	const IPv4Net&	subnet_addr,
	CliManager01DeleteDisableCliAccessFromSubnet4CB);
#endif

    virtual XrlCmdError cli_manager_0_1_delete_disable_cli_access_from_subnet6(
	// Input values,
	const IPv6Net&	subnet_addr) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01DeleteDisableCliAccessFromSubnet6RF;

    class CliManager01DeleteDisableCliAccessFromSubnet6CB {
        CliManager01DeleteDisableCliAccessFromSubnet6RF cb;

    public:
        operator const CliManager01DeleteDisableCliAccessFromSubnet6RF& () const { return cb; }
        const CliManager01DeleteDisableCliAccessFromSubnet6RF& operator ->() const { return cb; }
        CliManager01DeleteDisableCliAccessFromSubnet6CB(const CliManager01DeleteDisableCliAccessFromSubnet6RF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01DeleteDisableCliAccessFromSubnet6Rsp :
      public CliManager01DeleteDisableCliAccessFromSubnet6CB {
        CliManager01DeleteDisableCliAccessFromSubnet6Rsp(const CliManager01DeleteDisableCliAccessFromSubnet6RF& cb)
          : CliManager01DeleteDisableCliAccessFromSubnet6CB(cb) { }

    };

    virtual void async_cli_manager_0_1_delete_disable_cli_access_from_subnet6
       (
	const IPv6Net&	subnet_addr,
	CliManager01DeleteDisableCliAccessFromSubnet6CB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add a CLI command to the CLI manager
     *
     *  @param processor_name the name of the module that will process that
     *  command.
     *
     *  @param command_name the name of the command to add.
     *
     *  @param command_help the help for the command to add.
     *
     *  @param is_command_cd is true, the string that will replace the CLI
     *  prompt after we "cd" to that level of the CLI command-tree.
     *
     *  @param command_cd_prompt if
     *
     *  @param is_command_processor if true, this is a processing command that
     *  would be performed by processor_name.
     */
    virtual XrlCmdError cli_manager_0_1_add_cli_command(
	// Input values,
	const string&	processor_name,
	const string&	command_name,
	const string&	command_help,
	const bool&	is_command_cd,
	const string&	command_cd_prompt,
	const bool&	is_command_processor) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01AddCliCommandRF;

    class CliManager01AddCliCommandCB {
        CliManager01AddCliCommandRF cb;

    public:
        operator const CliManager01AddCliCommandRF& () const { return cb; }
        const CliManager01AddCliCommandRF& operator ->() const { return cb; }
        CliManager01AddCliCommandCB(const CliManager01AddCliCommandRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01AddCliCommandRsp :
      public CliManager01AddCliCommandCB {
        CliManager01AddCliCommandRsp(const CliManager01AddCliCommandRF& cb)
          : CliManager01AddCliCommandCB(cb) { }

    };

    virtual void async_cli_manager_0_1_add_cli_command
       (
	const string&	processor_name,
	const string&	command_name,
	const string&	command_help,
	const bool&	is_command_cd,
	const string&	command_cd_prompt,
	const bool&	is_command_processor,
	CliManager01AddCliCommandCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete a CLI command from the CLI manager
     *
     *  @param processor_name the name of the module that sends the request.
     *
     *  @param command_name the name of the command to delete.
     */
    virtual XrlCmdError cli_manager_0_1_delete_cli_command(
	// Input values,
	const string&	processor_name,
	const string&	command_name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    CliManager01DeleteCliCommandRF;

    class CliManager01DeleteCliCommandCB {
        CliManager01DeleteCliCommandRF cb;

    public:
        operator const CliManager01DeleteCliCommandRF& () const { return cb; }
        const CliManager01DeleteCliCommandRF& operator ->() const { return cb; }
        CliManager01DeleteCliCommandCB(const CliManager01DeleteCliCommandRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct CliManager01DeleteCliCommandRsp :
      public CliManager01DeleteCliCommandCB {
        CliManager01DeleteCliCommandRsp(const CliManager01DeleteCliCommandRF& cb)
          : CliManager01DeleteCliCommandCB(cb) { }

    };

    virtual void async_cli_manager_0_1_delete_cli_command
       (
	const string&	processor_name,
	const string&	command_name,
	CliManager01DeleteCliCommandCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_enable_cli(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_enable_cli
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_start_cli(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_start_cli
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_stop_cli(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_stop_cli
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_add_enable_cli_access_from_subnet4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_add_enable_cli_access_from_subnet4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_add_enable_cli_access_from_subnet6(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_add_enable_cli_access_from_subnet6
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_delete_enable_cli_access_from_subnet4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_delete_enable_cli_access_from_subnet4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_delete_enable_cli_access_from_subnet6(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_delete_enable_cli_access_from_subnet6
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_add_disable_cli_access_from_subnet4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_add_disable_cli_access_from_subnet4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_add_disable_cli_access_from_subnet6(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_add_disable_cli_access_from_subnet6
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_delete_disable_cli_access_from_subnet4(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_delete_disable_cli_access_from_subnet4
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_delete_disable_cli_access_from_subnet6(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_delete_disable_cli_access_from_subnet6
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_add_cli_command(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_add_cli_command
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_manager_0_1_delete_cli_command(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_manager_0_1_delete_cli_command
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlCliTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_CLI_BASE_HH__
