/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/vrrp.xrls
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

/**
 *  Get name of Xrl Target
 */
finder://vrrp/common/0.1/get_target_name->name:txt

/**
 *  Get version string from Xrl Target
 */
finder://vrrp/common/0.1/get_version->version:txt

/**
 *  Get status of Xrl Target
 */
finder://vrrp/common/0.1/get_status->status:u32&reason:txt

/**
 *  Request clean shutdown of Xrl Target
 */
finder://vrrp/common/0.1/shutdown

/**
 *  Request a startup of Xrl Target
 */
finder://vrrp/common/0.1/startup

/**
 *  Create a VRRP instance.
 *
 *  @param ifname the interface name.
 *
 *  @param vifname the vif name.
 *
 *  @param vrid the VRRP router ID.
 */
finder://vrrp/vrrp/0.1/add_vrid?ifname:txt&vifname:txt&vrid:u32

/**
 *  Remove a VRRP instance.
 *
 *  @param ifname the interface name.
 *
 *  @param vifname the vif name.
 *
 *  @param vrid the VRRP router ID.
 */
finder://vrrp/vrrp/0.1/delete_vrid?ifname:txt&vifname:txt&vrid:u32

/**
 *  Set the router's priority.
 *
 *  @param ifname the interface on which VRRP is running.
 *
 *  @param vifname the vif on which VRRP is running.
 *
 *  @param vrid the VRRP router ID.
 *
 *  @param priority the new priority value.
 */
finder://vrrp/vrrp/0.1/set_priority?ifname:txt&vifname:txt&vrid:u32&priority:u32

/**
 *  Set the advertisement interval.
 *
 *  @param ifname the interface on which VRRP is running.
 *
 *  @param vifname the vif on which VRRP is running.
 *
 *  @param vrid the VRRP router ID.
 *
 *  @param interval the new advertisement interval.
 */
finder://vrrp/vrrp/0.1/set_interval?ifname:txt&vifname:txt&vrid:u32&interval:u32

/**
 *  Set whether a high priority backup router should preempt a low priority
 *  router that is acting as a master.
 *
 *  @param ifname the interface on which VRRP is running.
 *
 *  @param vifname the vif on which VRRP is running.
 *
 *  @param vrid the VRRP router ID.
 *
 *  @param preempt true if preemption should occur.
 */
finder://vrrp/vrrp/0.1/set_preempt?ifname:txt&vifname:txt&vrid:u32&preempt:bool

/**
 *  Start or stop a VRRP instance.
 *
 *  @param ifname the interface on which VRRP is running.
 *
 *  @param vifname the vif on which VRRP is running.
 *
 *  @param vrid the VRRP router ID.
 *
 *  @param disable if true, stop VRRP. Start it otherwise.
 */
finder://vrrp/vrrp/0.1/set_disable?ifname:txt&vifname:txt&vrid:u32&disable:bool

/**
 *  Add an IP to the virtual router.
 *
 *  @param ifname the interface on which VRRP is running.
 *
 *  @param vifname the vif on which VRRP is running.
 *
 *  @param vrid the VRRP router ID.
 *
 *  @param ip the IP address to add.
 */
finder://vrrp/vrrp/0.1/add_ip?ifname:txt&vifname:txt&vrid:u32&ip:ipv4

finder://vrrp/vrrp/0.1/set_prefix?ifname:txt&vifname:txt&vrid:u32&ip:ipv4&prefix_len:u32

/**
 *  Remove an IP from the virtual router.
 *
 *  @param ifname the interface on which VRRP is running.
 *
 *  @param vifname the vif on which VRRP is running.
 *
 *  @param vrid the VRRP router ID.
 *
 *  @param ip the IP address to remove.
 */
finder://vrrp/vrrp/0.1/delete_ip?ifname:txt&vifname:txt&vrid:u32&ip:ipv4

/**
 *  Get the physical interfaces on which VRRP is running.
 *
 *  @param ifs a list of interface names (strings).
 */
finder://vrrp/vrrp/0.1/get_ifs->ifs:list

/**
 *  For a given physical interface, get the virtual interfaces on which VRRP is
 *  running.
 *
 *  @param ifname the physical interface name.
 *
 *  @param vifs a list of virtual interface names (strings).
 */
finder://vrrp/vrrp/0.1/get_vifs?ifname:txt->vifs:list

/**
 *  Get the virtual router IDs of all the VRRP instances running on a network
 *  interface.
 *
 *  @param ifname the physical interface name.
 *
 *  @param vifname the logical interface name.
 *
 *  @param vrids a list of VRRP router IDs (integers).
 */
finder://vrrp/vrrp/0.1/get_vrids?ifname:txt&vifname:txt->vrids:list

/**
 *  Get state information from a particular VRRP instance.
 *
 *  @param ifname the interface on which the VRRP instance is running.
 *
 *  @param vifname the vif on which the instance is running.
 *
 *  @param vrid the virtual router ID of the VRRP instance.
 *
 *  @param state the state of the router (initialize, master, backup).
 *
 *  @param master the IP address of the master. Only valid when running.
 */
finder://vrrp/vrrp/0.1/get_vrid_info?ifname:txt&vifname:txt&vrid:u32->state:txt&master:ipv4

/**
 *  Receive an IPv4 packet from a raw socket.
 *
 *  @param if_name the interface name the packet arrived on.
 *
 *  @param vif_name the vif name the packet arrived on.
 *
 *  @param src_address the IP source address.
 *
 *  @param dst_address the IP destination address.
 *
 *  @param ip_protocol the IP protocol number.
 *
 *  @param ip_ttl the IP TTL (hop-limit). If it has a negative value, then the
 *  received value is unknown.
 *
 *  @param ip_tos the Type of Service (Diffserv/ECN bits for IPv4). If it has a
 *  negative value, then the received value is unknown.
 *
 *  @param ip_router_alert if true, the IP Router Alert option was included in
 *  the IP packet.
 *
 *  @param ip_internet_control if true, then this is IP control traffic.
 *
 *  @param payload the payload, everything after the IP header and options.
 */
finder://vrrp/raw_packet4_client/0.1/recv?if_name:txt&vif_name:txt&src_address:ipv4&dst_address:ipv4&ip_protocol:u32&ip_ttl:i32&ip_tos:i32&ip_router_alert:bool&ip_internet_control:bool&payload:binary

/**
 *  Receive a raw link-level packet on an interface.
 *
 *  @param if_name the interface name the packet arrived on.
 *
 *  @param vif_name the vif name the packet arrived on.
 *
 *  @param src_address the MAC source address.
 *
 *  @param dst_address the MAC destination address.
 *
 *  @param ether_type the EtherType protocol number or the Destination SAP. It
 *  must be between 1536 and 65535 to specify the EtherType, or between 1 and
 *  255 to specify the Destination SAP for IEEE 802.2 LLC frames.
 *
 *  @param payload the payload, everything after the MAC header.
 */
finder://vrrp/raw_link_client/0.1/recv?if_name:txt&vif_name:txt&src_address:mac&dst_address:mac&ether_type:u32&payload:binary

