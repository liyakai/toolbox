/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/vrrp_base.cc
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#include "vrrp_base.hh"


const struct XrlVrrpTargetBase::handler_table XrlVrrpTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlVrrpTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlVrrpTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlVrrpTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlVrrpTargetBase::handle_common_0_1_shutdown },
    { "common/0.1/startup",
      &XrlVrrpTargetBase::handle_common_0_1_startup },
    { "vrrp/0.1/add_vrid",
      &XrlVrrpTargetBase::handle_vrrp_0_1_add_vrid },
    { "vrrp/0.1/delete_vrid",
      &XrlVrrpTargetBase::handle_vrrp_0_1_delete_vrid },
    { "vrrp/0.1/set_priority",
      &XrlVrrpTargetBase::handle_vrrp_0_1_set_priority },
    { "vrrp/0.1/set_interval",
      &XrlVrrpTargetBase::handle_vrrp_0_1_set_interval },
    { "vrrp/0.1/set_preempt",
      &XrlVrrpTargetBase::handle_vrrp_0_1_set_preempt },
    { "vrrp/0.1/set_disable",
      &XrlVrrpTargetBase::handle_vrrp_0_1_set_disable },
    { "vrrp/0.1/add_ip",
      &XrlVrrpTargetBase::handle_vrrp_0_1_add_ip },
    { "vrrp/0.1/set_prefix",
      &XrlVrrpTargetBase::handle_vrrp_0_1_set_prefix },
    { "vrrp/0.1/delete_ip",
      &XrlVrrpTargetBase::handle_vrrp_0_1_delete_ip },
    { "vrrp/0.1/get_ifs",
      &XrlVrrpTargetBase::handle_vrrp_0_1_get_ifs },
    { "vrrp/0.1/get_vifs",
      &XrlVrrpTargetBase::handle_vrrp_0_1_get_vifs },
    { "vrrp/0.1/get_vrids",
      &XrlVrrpTargetBase::handle_vrrp_0_1_get_vrids },
    { "vrrp/0.1/get_vrid_info",
      &XrlVrrpTargetBase::handle_vrrp_0_1_get_vrid_info },
    { "raw_packet4_client/0.1/recv",
      &XrlVrrpTargetBase::handle_raw_packet4_client_0_1_recv },
    { "raw_link_client/0.1/recv",
      &XrlVrrpTargetBase::handle_raw_link_client_0_1_recv },
};

const size_t XrlVrrpTargetBase::num_handlers = (sizeof(XrlVrrpTargetBase::handlers) / sizeof(XrlVrrpTargetBase::handlers[0]));


XrlVrrpTargetBase::XrlVrrpTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlVrrpTargetBase::~XrlVrrpTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlVrrpTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_common_0_1_get_target_name
    (const XrlCmdError &e,
     const string* rarg_name,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_target_name", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("name", *rarg_name);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_common_0_1_get_target_name(
	Common01GetTargetNameCB c_b)
{

    /* Return value declarations */
    string rarg_name;
    XrlCmdError e = common_0_1_get_target_name(
        rarg_name);
    return c_b->dispatch(e,
        &rarg_name);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetTargetNameRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_common_0_1_get_target_name, pxa_outputs);
	async_common_0_1_get_target_name( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    r_name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", r_name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_common_0_1_get_version
    (const XrlCmdError &e,
     const string* rarg_version,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_version", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("version", *rarg_version);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_common_0_1_get_version(
	Common01GetVersionCB c_b)
{

    /* Return value declarations */
    string rarg_version;
    XrlCmdError e = common_0_1_get_version(
        rarg_version);
    return c_b->dispatch(e,
        &rarg_version);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetVersionRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_common_0_1_get_version, pxa_outputs);
	async_common_0_1_get_version( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    r_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", r_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_common_0_1_get_status
    (const XrlCmdError &e,
     const uint32_t* rarg_status,
     const string* rarg_reason,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/get_status", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("status", *rarg_status);
	    out.add("reason", *rarg_reason);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_common_0_1_get_status(
	Common01GetStatusCB c_b)
{

    /* Return value declarations */
    uint32_t rarg_status;
    string rarg_reason;
    XrlCmdError e = common_0_1_get_status(
        rarg_status,
        rarg_reason);
    return c_b->dispatch(e,
        &rarg_status,
        &rarg_reason);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01GetStatusRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_common_0_1_get_status, pxa_outputs);
	async_common_0_1_get_status( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    uint32_t r_status;
    string r_reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    r_status,
	    r_reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", r_status);
	pxa_outputs->add("reason", r_reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_common_0_1_shutdown
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/shutdown", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_common_0_1_shutdown(
	Common01ShutdownCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_shutdown();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01ShutdownRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_common_0_1_shutdown, pxa_outputs);
	async_common_0_1_shutdown( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_common_0_1_startup
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "common/0.1/startup", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_common_0_1_startup(
	Common01StartupCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = common_0_1_startup();
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_common_0_1_startup(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/startup");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Common01StartupRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_common_0_1_startup, pxa_outputs);
	async_common_0_1_startup( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_startup();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/startup", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_add_vrid
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/add_vrid", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_add_vrid(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	Vrrp01AddVridCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_add_vrid(
        arg_ifname,
        arg_vifname,
        arg_vrid);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_add_vrid(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/add_vrid");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01AddVridRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_add_vrid, pxa_outputs);
	async_vrrp_0_1_add_vrid(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_add_vrid(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/add_vrid", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_delete_vrid
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/delete_vrid", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_delete_vrid(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	Vrrp01DeleteVridCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_delete_vrid(
        arg_ifname,
        arg_vifname,
        arg_vrid);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_delete_vrid(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/delete_vrid");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01DeleteVridRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_delete_vrid, pxa_outputs);
	async_vrrp_0_1_delete_vrid(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_delete_vrid(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/delete_vrid", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_set_priority
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/set_priority", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_set_priority(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const uint32_t&	arg_priority,
	Vrrp01SetPriorityCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_set_priority(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_priority);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_set_priority(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/set_priority");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01SetPriorityRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_set_priority, pxa_outputs);
	async_vrrp_0_1_set_priority(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "priority").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_set_priority(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "priority").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/set_priority", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_set_interval
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/set_interval", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_set_interval(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const uint32_t&	arg_interval,
	Vrrp01SetIntervalCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_set_interval(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_interval);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_set_interval(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/set_interval");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01SetIntervalRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_set_interval, pxa_outputs);
	async_vrrp_0_1_set_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "interval").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_set_interval(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "interval").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/set_interval", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_set_preempt
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/set_preempt", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_set_preempt(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const bool&	arg_preempt,
	Vrrp01SetPreemptCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_set_preempt(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_preempt);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_set_preempt(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/set_preempt");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01SetPreemptRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_set_preempt, pxa_outputs);
	async_vrrp_0_1_set_preempt(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "preempt").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_set_preempt(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "preempt").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/set_preempt", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_set_disable
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/set_disable", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_set_disable(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const bool&	arg_disable,
	Vrrp01SetDisableCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_set_disable(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_disable);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_set_disable(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/set_disable");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01SetDisableRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_set_disable, pxa_outputs);
	async_vrrp_0_1_set_disable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "disable").boolean(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_set_disable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "disable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/set_disable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_add_ip
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/add_ip", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_add_ip(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const IPv4&	arg_ip,
	Vrrp01AddIpCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_add_ip(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_ip);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_add_ip(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/add_ip");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01AddIpRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_add_ip, pxa_outputs);
	async_vrrp_0_1_add_ip(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "ip").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_add_ip(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "ip").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/add_ip", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_set_prefix
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/set_prefix", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_set_prefix(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const IPv4&	arg_ip,
	const uint32_t&	arg_prefix_len,
	Vrrp01SetPrefixCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_set_prefix(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_ip,
        arg_prefix_len);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_set_prefix(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(5), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/set_prefix");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01SetPrefixRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_set_prefix, pxa_outputs);
	async_vrrp_0_1_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "ip").ipv4(),
	    xa_inputs.get(4, "prefix_len").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "ip").ipv4(),
	    xa_inputs.get(4, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/set_prefix", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_delete_ip
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/delete_ip", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_delete_ip(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	const IPv4&	arg_ip,
	Vrrp01DeleteIpCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = vrrp_0_1_delete_ip(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        arg_ip);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_delete_ip(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/delete_ip");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01DeleteIpRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_delete_ip, pxa_outputs);
	async_vrrp_0_1_delete_ip(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "ip").ipv4(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = vrrp_0_1_delete_ip(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    xa_inputs.get(3, "ip").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/delete_ip", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_get_ifs
    (const XrlCmdError &e,
     const XrlAtomList* rarg_ifs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/get_ifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("ifs", *rarg_ifs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_get_ifs(
	Vrrp01GetIfsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_ifs;
    XrlCmdError e = vrrp_0_1_get_ifs(
        rarg_ifs);
    return c_b->dispatch(e,
        &rarg_ifs);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_get_ifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/get_ifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01GetIfsRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_get_ifs, pxa_outputs);
	async_vrrp_0_1_get_ifs( mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_ifs;
    try {
	XrlCmdError e = vrrp_0_1_get_ifs(
	    r_ifs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/get_ifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ifs", r_ifs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_get_vifs
    (const XrlCmdError &e,
     const XrlAtomList* rarg_vifs,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/get_vifs", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("vifs", *rarg_vifs);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_get_vifs(
	const string&	arg_ifname,
	Vrrp01GetVifsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_vifs;
    XrlCmdError e = vrrp_0_1_get_vifs(
        arg_ifname,
        rarg_vifs);
    return c_b->dispatch(e,
        &rarg_vifs);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_get_vifs(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/get_vifs");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01GetVifsRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_get_vifs, pxa_outputs);
	async_vrrp_0_1_get_vifs(
	    xa_inputs.get(0, "ifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_vifs;
    try {
	XrlCmdError e = vrrp_0_1_get_vifs(
	    xa_inputs.get(0, "ifname").text(),
	    r_vifs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/get_vifs", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("vifs", r_vifs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_get_vrids
    (const XrlCmdError &e,
     const XrlAtomList* rarg_vrids,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/get_vrids", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("vrids", *rarg_vrids);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_get_vrids(
	const string&	arg_ifname,
	const string&	arg_vifname,
	Vrrp01GetVridsCB c_b)
{

    /* Return value declarations */
    XrlAtomList rarg_vrids;
    XrlCmdError e = vrrp_0_1_get_vrids(
        arg_ifname,
        arg_vifname,
        rarg_vrids);
    return c_b->dispatch(e,
        &rarg_vrids);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_get_vrids(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/get_vrids");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01GetVridsRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_get_vrids, pxa_outputs);
	async_vrrp_0_1_get_vrids(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    XrlAtomList r_vrids;
    try {
	XrlCmdError e = vrrp_0_1_get_vrids(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    r_vrids);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/get_vrids", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("vrids", r_vrids);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_vrrp_0_1_get_vrid_info
    (const XrlCmdError &e,
     const string* rarg_state,
     const IPv4* rarg_master,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "vrrp/0.1/get_vrid_info", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;

        /* Marshall return values */
        try {
	    out.add("state", *rarg_state);
	    out.add("master", *rarg_master);
        } catch (const XrlArgs::XrlAtomFound& ) {
	    XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
        }

        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_vrrp_0_1_get_vrid_info(
	const string&	arg_ifname,
	const string&	arg_vifname,
	const uint32_t&	arg_vrid,
	Vrrp01GetVridInfoCB c_b)
{

    /* Return value declarations */
    string rarg_state;
    IPv4 rarg_master;
    XrlCmdError e = vrrp_0_1_get_vrid_info(
        arg_ifname,
        arg_vifname,
        arg_vrid,
        rarg_state,
        rarg_master);
    return c_b->dispatch(e,
        &rarg_state,
        &rarg_master);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_vrrp_0_1_get_vrid_info(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "vrrp/0.1/get_vrid_info");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	Vrrp01GetVridInfoRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_vrrp_0_1_get_vrid_info, pxa_outputs);
	async_vrrp_0_1_get_vrid_info(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    string r_state;
    IPv4 r_master;
    try {
	XrlCmdError e = vrrp_0_1_get_vrid_info(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vrid").uint32(),
	    r_state,
	    r_master);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "vrrp/0.1/get_vrid_info", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("state", r_state);
	pxa_outputs->add("master", r_master);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_raw_packet4_client_0_1_recv
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "raw_packet4_client/0.1/recv", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_raw_packet4_client_0_1_recv(
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const IPv4&	arg_src_address,
	const IPv4&	arg_dst_address,
	const uint32_t&	arg_ip_protocol,
	const int32_t&	arg_ip_ttl,
	const int32_t&	arg_ip_tos,
	const bool&	arg_ip_router_alert,
	const bool&	arg_ip_internet_control,
	const vector<uint8_t>&	arg_payload,
	RawPacket4Client01RecvCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = raw_packet4_client_0_1_recv(
        arg_if_name,
        arg_vif_name,
        arg_src_address,
        arg_dst_address,
        arg_ip_protocol,
        arg_ip_ttl,
        arg_ip_tos,
        arg_ip_router_alert,
        arg_ip_internet_control,
        arg_payload);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_raw_packet4_client_0_1_recv(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 10) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(10), XORP_UINT_CAST(xa_inputs.size()), "raw_packet4_client/0.1/recv");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	RawPacket4Client01RecvRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_raw_packet4_client_0_1_recv, pxa_outputs);
	async_raw_packet4_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv4(),
	    xa_inputs.get(3, "dst_address").ipv4(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "payload").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet4_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").ipv4(),
	    xa_inputs.get(3, "dst_address").ipv4(),
	    xa_inputs.get(4, "ip_protocol").uint32(),
	    xa_inputs.get(5, "ip_ttl").int32(),
	    xa_inputs.get(6, "ip_tos").int32(),
	    xa_inputs.get(7, "ip_router_alert").boolean(),
	    xa_inputs.get(8, "ip_internet_control").boolean(),
	    xa_inputs.get(9, "payload").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "raw_packet4_client/0.1/recv", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}


#ifdef XORP_ENABLE_ASYNC_SERVER
void
XrlVrrpTargetBase::callback_raw_link_client_0_1_recv
    (const XrlCmdError &e,
     XrlRespCallback c_b)
{
    if (e != XrlCmdError::OKAY()) {
	XLOG_WARNING("Handling method for %s failed: %s",
		     "raw_link_client/0.1/recv", e.str().c_str());
	return c_b->dispatch(e, NULL);
    } else {
	XrlArgs out;
        return c_b->dispatch(e, &out);
    }
}


void
XrlVrrpTargetBase::async_raw_link_client_0_1_recv(
	const string&	arg_if_name,
	const string&	arg_vif_name,
	const Mac&	arg_src_address,
	const Mac&	arg_dst_address,
	const uint32_t&	arg_ether_type,
	const vector<uint8_t>&	arg_payload,
	RawLinkClient01RecvCB c_b)
{

    /* Return value declarations */
    XrlCmdError e = raw_link_client_0_1_recv(
        arg_if_name,
        arg_vif_name,
        arg_src_address,
        arg_dst_address,
        arg_ether_type,
        arg_payload);
    return c_b->dispatch(e);
}
#endif

XrlCmdRT
XrlVrrpTargetBase::handle_raw_link_client_0_1_recv(const XrlArgs& xa_inputs, XrlCmdOT pxa_outputs)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(6), XORP_UINT_CAST(xa_inputs.size()), "raw_link_client/0.1/recv");
	XRL_CMD_RETURN_ERROR(pxa_outputs, XrlCmdError::BAD_ARGS());
    }

#ifndef XORP_ENABLE_ASYNC_SERVER
    UNUSED(pxa_outputs);
#endif

#ifdef XORP_ENABLE_ASYNC_SERVER
    try {
	RawLinkClient01RecvRF mycb =
	    callback(this, &XrlVrrpTargetBase::callback_raw_link_client_0_1_recv, pxa_outputs);
	async_raw_link_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").mac(),
	    xa_inputs.get(3, "dst_address").mac(),
	    xa_inputs.get(4, "ether_type").uint32(),
	    xa_inputs.get(5, "payload").binary(), mycb);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return pxa_outputs->dispatch(XrlCmdError::BAD_ARGS(e.str()), NULL);
    }
#else

    /* Return value declarations */
    try {
	XrlCmdError e = raw_link_client_0_1_recv(
	    xa_inputs.get(0, "if_name").text(),
	    xa_inputs.get(1, "vif_name").text(),
	    xa_inputs.get(2, "src_address").mac(),
	    xa_inputs.get(3, "dst_address").mac(),
	    xa_inputs.get(4, "ether_type").uint32(),
	    xa_inputs.get(5, "payload").binary());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "raw_link_client/0.1/recv", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
#endif
}

void
XrlVrrpTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "vrrp", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlVrrpTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
