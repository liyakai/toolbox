/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/policy_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_POLICY_BASE_HH__
#define __XRL_TARGETS_POLICY_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlPolicyTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlPolicyTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlPolicyTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlPolicyTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "policy/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetTargetNameRF;

    class Common01GetTargetNameCB {
        Common01GetTargetNameRF cb;

    public:
        operator const Common01GetTargetNameRF& () const { return cb; }
        const Common01GetTargetNameRF& operator ->() const { return cb; }
        Common01GetTargetNameCB(const Common01GetTargetNameRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_name) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_name);
        }
    };

    struct Common01GetTargetNameRsp :
      public Common01GetTargetNameCB {
        struct args_str {
            string name;
        };

    private:
        args_str args;

    public:
        Common01GetTargetNameRsp(const Common01GetTargetNameRF& cb)
          : Common01GetTargetNameCB(cb) { }

        void respond() const {
            Common01GetTargetNameCB::
            respond(args.name);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_target_name
       (
	Common01GetTargetNameCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Common01GetVersionRF;

    class Common01GetVersionCB {
        Common01GetVersionRF cb;

    public:
        operator const Common01GetVersionRF& () const { return cb; }
        const Common01GetVersionRF& operator ->() const { return cb; }
        Common01GetVersionCB(const Common01GetVersionRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_version) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_version);
        }
    };

    struct Common01GetVersionRsp :
      public Common01GetVersionCB {
        struct args_str {
            string version;
        };

    private:
        args_str args;

    public:
        Common01GetVersionRsp(const Common01GetVersionRF& cb)
          : Common01GetVersionCB(cb) { }

        void respond() const {
            Common01GetVersionCB::
            respond(args.version);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_version
       (
	Common01GetVersionCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback3<void, const XrlCmdError &,
	const uint32_t*,
	const string*>::RefPtr
    Common01GetStatusRF;

    class Common01GetStatusCB {
        Common01GetStatusRF cb;

    public:
        operator const Common01GetStatusRF& () const { return cb; }
        const Common01GetStatusRF& operator ->() const { return cb; }
        Common01GetStatusCB(const Common01GetStatusRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL); }

        void respond(const uint32_t& arg_status,
                     const string& arg_reason) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_status,
                         &arg_reason);
        }
    };

    struct Common01GetStatusRsp :
      public Common01GetStatusCB {
        struct args_str {
            uint32_t status;
            string reason;
        };

    private:
        args_str args;

    public:
        Common01GetStatusRsp(const Common01GetStatusRF& cb)
          : Common01GetStatusCB(cb) { }

        void respond() const {
            Common01GetStatusCB::
            respond(args.status,
                        args.reason);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_common_0_1_get_status
       (
	Common01GetStatusCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01ShutdownRF;

    class Common01ShutdownCB {
        Common01ShutdownRF cb;

    public:
        operator const Common01ShutdownRF& () const { return cb; }
        const Common01ShutdownRF& operator ->() const { return cb; }
        Common01ShutdownCB(const Common01ShutdownRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01ShutdownRsp :
      public Common01ShutdownCB {
        Common01ShutdownRsp(const Common01ShutdownRF& cb)
          : Common01ShutdownCB(cb) { }

    };

    virtual void async_common_0_1_shutdown
       (
	Common01ShutdownCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request a startup of Xrl Target
     */
    virtual XrlCmdError common_0_1_startup() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Common01StartupRF;

    class Common01StartupCB {
        Common01StartupRF cb;

    public:
        operator const Common01StartupRF& () const { return cb; }
        const Common01StartupRF& operator ->() const { return cb; }
        Common01StartupCB(const Common01StartupRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Common01StartupRsp :
      public Common01StartupCB {
        Common01StartupRsp(const Common01StartupRF& cb)
          : Common01StartupCB(cb) { }

    };

    virtual void async_common_0_1_startup
       (
	Common01StartupCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Announce target birth to observer.
     *
     *  @param target_class the target class name.
     *
     *  @param target_instance the target instance name.
     */
    virtual XrlCmdError finder_event_observer_0_1_xrl_target_birth(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    FinderEventObserver01XrlTargetBirthRF;

    class FinderEventObserver01XrlTargetBirthCB {
        FinderEventObserver01XrlTargetBirthRF cb;

    public:
        operator const FinderEventObserver01XrlTargetBirthRF& () const { return cb; }
        const FinderEventObserver01XrlTargetBirthRF& operator ->() const { return cb; }
        FinderEventObserver01XrlTargetBirthCB(const FinderEventObserver01XrlTargetBirthRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct FinderEventObserver01XrlTargetBirthRsp :
      public FinderEventObserver01XrlTargetBirthCB {
        FinderEventObserver01XrlTargetBirthRsp(const FinderEventObserver01XrlTargetBirthRF& cb)
          : FinderEventObserver01XrlTargetBirthCB(cb) { }

    };

    virtual void async_finder_event_observer_0_1_xrl_target_birth
       (
	const string&	target_class,
	const string&	target_instance,
	FinderEventObserver01XrlTargetBirthCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Announce target death to observer.
     *
     *  @param target_class the target class name.
     *
     *  @param target_instance the target instance name.
     */
    virtual XrlCmdError finder_event_observer_0_1_xrl_target_death(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    FinderEventObserver01XrlTargetDeathRF;

    class FinderEventObserver01XrlTargetDeathCB {
        FinderEventObserver01XrlTargetDeathRF cb;

    public:
        operator const FinderEventObserver01XrlTargetDeathRF& () const { return cb; }
        const FinderEventObserver01XrlTargetDeathRF& operator ->() const { return cb; }
        FinderEventObserver01XrlTargetDeathCB(const FinderEventObserver01XrlTargetDeathRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct FinderEventObserver01XrlTargetDeathRsp :
      public FinderEventObserver01XrlTargetDeathCB {
        FinderEventObserver01XrlTargetDeathRsp(const FinderEventObserver01XrlTargetDeathRF& cb)
          : FinderEventObserver01XrlTargetDeathCB(cb) { }

    };

    virtual void async_finder_event_observer_0_1_xrl_target_death
       (
	const string&	target_class,
	const string&	target_instance,
	FinderEventObserver01XrlTargetDeathCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create a term in a policy. The term will be the last term in the policy
     *  statement.
     *
     *  @param policy the name of the policy.
     *
     *  @param order position of term.
     *
     *  @param term the name of the term.
     */
    virtual XrlCmdError policy_0_1_create_term(
	// Input values,
	const string&	policy,
	const string&	order,
	const string&	term) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01CreateTermRF;

    class Policy01CreateTermCB {
        Policy01CreateTermRF cb;

    public:
        operator const Policy01CreateTermRF& () const { return cb; }
        const Policy01CreateTermRF& operator ->() const { return cb; }
        Policy01CreateTermCB(const Policy01CreateTermRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01CreateTermRsp :
      public Policy01CreateTermCB {
        Policy01CreateTermRsp(const Policy01CreateTermRF& cb)
          : Policy01CreateTermCB(cb) { }

    };

    virtual void async_policy_0_1_create_term
       (
	const string&	policy,
	const string&	order,
	const string&	term,
	Policy01CreateTermCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete a term in a policy.
     *
     *  @param policy the name of the policy.
     *
     *  @param term the name of the term.
     */
    virtual XrlCmdError policy_0_1_delete_term(
	// Input values,
	const string&	policy,
	const string&	term) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01DeleteTermRF;

    class Policy01DeleteTermCB {
        Policy01DeleteTermRF cb;

    public:
        operator const Policy01DeleteTermRF& () const { return cb; }
        const Policy01DeleteTermRF& operator ->() const { return cb; }
        Policy01DeleteTermCB(const Policy01DeleteTermRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01DeleteTermRsp :
      public Policy01DeleteTermCB {
        Policy01DeleteTermRsp(const Policy01DeleteTermRF& cb)
          : Policy01DeleteTermCB(cb) { }

    };

    virtual void async_policy_0_1_delete_term
       (
	const string&	policy,
	const string&	term,
	Policy01DeleteTermCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Update the source/dest/action block of a term in a policy. Note: if
     *  statement is empty, the previous one in that position will be deleted.
     *
     *  @param policy the name of the policy.
     *
     *  @param term the name of the term.
     *
     *  @param block the block to update (0:source, 1:dest, 2:action).
     *
     *  @param order numerical position (local) of statement.
     *
     *  @param statement the statement to insert or delete.
     */
    virtual XrlCmdError policy_0_1_update_term_block(
	// Input values,
	const string&	policy,
	const string&	term,
	const uint32_t&	block,
	const string&	order,
	const string&	statement) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01UpdateTermBlockRF;

    class Policy01UpdateTermBlockCB {
        Policy01UpdateTermBlockRF cb;

    public:
        operator const Policy01UpdateTermBlockRF& () const { return cb; }
        const Policy01UpdateTermBlockRF& operator ->() const { return cb; }
        Policy01UpdateTermBlockCB(const Policy01UpdateTermBlockRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01UpdateTermBlockRsp :
      public Policy01UpdateTermBlockCB {
        Policy01UpdateTermBlockRsp(const Policy01UpdateTermBlockRF& cb)
          : Policy01UpdateTermBlockCB(cb) { }

    };

    virtual void async_policy_0_1_update_term_block
       (
	const string&	policy,
	const string&	term,
	const uint32_t&	block,
	const string&	order,
	const string&	statement,
	Policy01UpdateTermBlockCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create a policy.
     *
     *  @param policy name of the policy.
     */
    virtual XrlCmdError policy_0_1_create_policy(
	// Input values,
	const string&	policy) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01CreatePolicyRF;

    class Policy01CreatePolicyCB {
        Policy01CreatePolicyRF cb;

    public:
        operator const Policy01CreatePolicyRF& () const { return cb; }
        const Policy01CreatePolicyRF& operator ->() const { return cb; }
        Policy01CreatePolicyCB(const Policy01CreatePolicyRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01CreatePolicyRsp :
      public Policy01CreatePolicyCB {
        Policy01CreatePolicyRsp(const Policy01CreatePolicyRF& cb)
          : Policy01CreatePolicyCB(cb) { }

    };

    virtual void async_policy_0_1_create_policy
       (
	const string&	policy,
	Policy01CreatePolicyCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete a policy.
     *
     *  @param policy name of the policy.
     */
    virtual XrlCmdError policy_0_1_delete_policy(
	// Input values,
	const string&	policy) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01DeletePolicyRF;

    class Policy01DeletePolicyCB {
        Policy01DeletePolicyRF cb;

    public:
        operator const Policy01DeletePolicyRF& () const { return cb; }
        const Policy01DeletePolicyRF& operator ->() const { return cb; }
        Policy01DeletePolicyCB(const Policy01DeletePolicyRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01DeletePolicyRsp :
      public Policy01DeletePolicyCB {
        Policy01DeletePolicyRsp(const Policy01DeletePolicyRF& cb)
          : Policy01DeletePolicyCB(cb) { }

    };

    virtual void async_policy_0_1_delete_policy
       (
	const string&	policy,
	Policy01DeletePolicyCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Create a set.
     *
     *  @param set name of the set.
     */
    virtual XrlCmdError policy_0_1_create_set(
	// Input values,
	const string&	set) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01CreateSetRF;

    class Policy01CreateSetCB {
        Policy01CreateSetRF cb;

    public:
        operator const Policy01CreateSetRF& () const { return cb; }
        const Policy01CreateSetRF& operator ->() const { return cb; }
        Policy01CreateSetCB(const Policy01CreateSetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01CreateSetRsp :
      public Policy01CreateSetCB {
        Policy01CreateSetRsp(const Policy01CreateSetRF& cb)
          : Policy01CreateSetCB(cb) { }

    };

    virtual void async_policy_0_1_create_set
       (
	const string&	set,
	Policy01CreateSetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Replace elements in a set.
     *
     *  @param type the type of the set.
     *
     *  @param set name of the set.
     *
     *  @param elements comma delimited list of set elements.
     */
    virtual XrlCmdError policy_0_1_update_set(
	// Input values,
	const string&	type,
	const string&	set,
	const string&	elements) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01UpdateSetRF;

    class Policy01UpdateSetCB {
        Policy01UpdateSetRF cb;

    public:
        operator const Policy01UpdateSetRF& () const { return cb; }
        const Policy01UpdateSetRF& operator ->() const { return cb; }
        Policy01UpdateSetCB(const Policy01UpdateSetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01UpdateSetRsp :
      public Policy01UpdateSetCB {
        Policy01UpdateSetRsp(const Policy01UpdateSetRF& cb)
          : Policy01UpdateSetCB(cb) { }

    };

    virtual void async_policy_0_1_update_set
       (
	const string&	type,
	const string&	set,
	const string&	elements,
	Policy01UpdateSetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete a set.
     *
     *  @param set name of the set.
     */
    virtual XrlCmdError policy_0_1_delete_set(
	// Input values,
	const string&	set) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01DeleteSetRF;

    class Policy01DeleteSetCB {
        Policy01DeleteSetRF cb;

    public:
        operator const Policy01DeleteSetRF& () const { return cb; }
        const Policy01DeleteSetRF& operator ->() const { return cb; }
        Policy01DeleteSetCB(const Policy01DeleteSetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01DeleteSetRsp :
      public Policy01DeleteSetCB {
        Policy01DeleteSetRsp(const Policy01DeleteSetRF& cb)
          : Policy01DeleteSetCB(cb) { }

    };

    virtual void async_policy_0_1_delete_set
       (
	const string&	set,
	Policy01DeleteSetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add an element to a set.
     *
     *  @param type the type of the set.
     *
     *  @param set name of the set.
     *
     *  @param element the element to add.
     */
    virtual XrlCmdError policy_0_1_add_to_set(
	// Input values,
	const string&	type,
	const string&	set,
	const string&	element) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01AddToSetRF;

    class Policy01AddToSetCB {
        Policy01AddToSetRF cb;

    public:
        operator const Policy01AddToSetRF& () const { return cb; }
        const Policy01AddToSetRF& operator ->() const { return cb; }
        Policy01AddToSetCB(const Policy01AddToSetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01AddToSetRsp :
      public Policy01AddToSetCB {
        Policy01AddToSetRsp(const Policy01AddToSetRF& cb)
          : Policy01AddToSetCB(cb) { }

    };

    virtual void async_policy_0_1_add_to_set
       (
	const string&	type,
	const string&	set,
	const string&	element,
	Policy01AddToSetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Delete an element from a set.
     *
     *  @param type the type of the set.
     *
     *  @param set name of the set.
     *
     *  @param element the element to delete.
     */
    virtual XrlCmdError policy_0_1_delete_from_set(
	// Input values,
	const string&	type,
	const string&	set,
	const string&	element) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01DeleteFromSetRF;

    class Policy01DeleteFromSetCB {
        Policy01DeleteFromSetRF cb;

    public:
        operator const Policy01DeleteFromSetRF& () const { return cb; }
        const Policy01DeleteFromSetRF& operator ->() const { return cb; }
        Policy01DeleteFromSetCB(const Policy01DeleteFromSetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01DeleteFromSetRsp :
      public Policy01DeleteFromSetCB {
        Policy01DeleteFromSetRsp(const Policy01DeleteFromSetRF& cb)
          : Policy01DeleteFromSetCB(cb) { }

    };

    virtual void async_policy_0_1_delete_from_set
       (
	const string&	type,
	const string&	set,
	const string&	element,
	Policy01DeleteFromSetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Commit the configuration.
     */
    virtual XrlCmdError policy_0_1_done_global_policy_conf() = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01DoneGlobalPolicyConfRF;

    class Policy01DoneGlobalPolicyConfCB {
        Policy01DoneGlobalPolicyConfRF cb;

    public:
        operator const Policy01DoneGlobalPolicyConfRF& () const { return cb; }
        const Policy01DoneGlobalPolicyConfRF& operator ->() const { return cb; }
        Policy01DoneGlobalPolicyConfCB(const Policy01DoneGlobalPolicyConfRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01DoneGlobalPolicyConfRsp :
      public Policy01DoneGlobalPolicyConfCB {
        Policy01DoneGlobalPolicyConfRsp(const Policy01DoneGlobalPolicyConfRF& cb)
          : Policy01DoneGlobalPolicyConfCB(cb) { }

    };

    virtual void async_policy_0_1_done_global_policy_conf
       (
	Policy01DoneGlobalPolicyConfCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Replace import/export policies for a protocol. Will normally cause a
     *  delayed commit.
     *
     *  @param protocol protocol for which policies must be replaced.
     *
     *  @param policies comma separated list of policies.
     *
     *  @param modifier a match statement to insert in each policy.
     */
    virtual XrlCmdError policy_0_1_import(
	// Input values,
	const string&	protocol,
	const string&	policies,
	const string&	modifier) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01ImportRF;

    class Policy01ImportCB {
        Policy01ImportRF cb;

    public:
        operator const Policy01ImportRF& () const { return cb; }
        const Policy01ImportRF& operator ->() const { return cb; }
        Policy01ImportCB(const Policy01ImportRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01ImportRsp :
      public Policy01ImportCB {
        Policy01ImportRsp(const Policy01ImportRF& cb)
          : Policy01ImportCB(cb) { }

    };

    virtual void async_policy_0_1_import
       (
	const string&	protocol,
	const string&	policies,
	const string&	modifier,
	Policy01ImportCB);
#endif

    virtual XrlCmdError policy_0_1_export(
	// Input values,
	const string&	protocol,
	const string&	policies,
	const string&	modifier) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01ExportRF;

    class Policy01ExportCB {
        Policy01ExportRF cb;

    public:
        operator const Policy01ExportRF& () const { return cb; }
        const Policy01ExportRF& operator ->() const { return cb; }
        Policy01ExportCB(const Policy01ExportRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01ExportRsp :
      public Policy01ExportCB {
        Policy01ExportRsp(const Policy01ExportRF& cb)
          : Policy01ExportCB(cb) { }

    };

    virtual void async_policy_0_1_export
       (
	const string&	protocol,
	const string&	policies,
	const string&	modifier,
	Policy01ExportCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add a variable to the varmap configuration.
     *
     *  @param protocol the protocol this variable is available to.
     *
     *  @param variable name of the variable.
     *
     *  @param type the type of the variable.
     *
     *  @param access the permissions on the variable (r/rw).
     *
     *  @param id unique id for this var. Scoped by protocol.
     */
    virtual XrlCmdError policy_0_1_add_varmap(
	// Input values,
	const string&	protocol,
	const string&	variable,
	const string&	type,
	const string&	access,
	const uint32_t&	id) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01AddVarmapRF;

    class Policy01AddVarmapCB {
        Policy01AddVarmapRF cb;

    public:
        operator const Policy01AddVarmapRF& () const { return cb; }
        const Policy01AddVarmapRF& operator ->() const { return cb; }
        Policy01AddVarmapCB(const Policy01AddVarmapRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01AddVarmapRsp :
      public Policy01AddVarmapCB {
        Policy01AddVarmapRsp(const Policy01AddVarmapRF& cb)
          : Policy01AddVarmapCB(cb) { }

    };

    virtual void async_policy_0_1_add_varmap
       (
	const string&	protocol,
	const string&	variable,
	const string&	type,
	const string&	access,
	const uint32_t&	id,
	Policy01AddVarmapCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Dump state of policy manager. To be used ONLY for debugging.
     *
     *  @param id which aspect of the internal state to dump.
     */
    virtual XrlCmdError policy_0_1_dump_state(
	// Input values,
	const uint32_t&	id,
	// Output values,
	string&	state) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback2<void, const XrlCmdError &,
	const string*>::RefPtr
    Policy01DumpStateRF;

    class Policy01DumpStateCB {
        Policy01DumpStateRF cb;

    public:
        operator const Policy01DumpStateRF& () const { return cb; }
        const Policy01DumpStateRF& operator ->() const { return cb; }
        Policy01DumpStateCB(const Policy01DumpStateRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL); }

        void respond(const string& arg_state) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_state);
        }
    };

    struct Policy01DumpStateRsp :
      public Policy01DumpStateCB {
        struct args_str {
            string state;
        };

    private:
        args_str args;

    public:
        Policy01DumpStateRsp(const Policy01DumpStateRF& cb)
          : Policy01DumpStateCB(cb) { }

        void respond() const {
            Policy01DumpStateCB::
            respond(args.state);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_policy_0_1_dump_state
       (
	const uint32_t&	id,
	Policy01DumpStateCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Update the mapping from protocols to their XRL target name.
     *
     *  @param protocol protocol to update.
     *
     *  @param target XRL target for the protocol.
     */
    virtual XrlCmdError policy_0_1_set_proto_target(
	// Input values,
	const string&	protocol,
	const string&	target) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    Policy01SetProtoTargetRF;

    class Policy01SetProtoTargetCB {
        Policy01SetProtoTargetRF cb;

    public:
        operator const Policy01SetProtoTargetRF& () const { return cb; }
        const Policy01SetProtoTargetRF& operator ->() const { return cb; }
        Policy01SetProtoTargetCB(const Policy01SetProtoTargetRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct Policy01SetProtoTargetRsp :
      public Policy01SetProtoTargetCB {
        Policy01SetProtoTargetRsp(const Policy01SetProtoTargetRF& cb)
          : Policy01SetProtoTargetCB(cb) { }

    };

    virtual void async_policy_0_1_set_proto_target
       (
	const string&	protocol,
	const string&	target,
	Policy01SetProtoTargetCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Process a CLI command.
     *
     *  @param processor_name the processor name for this command.
     *
     *  @param cli_term_name the terminal name the command was entered from.
     *
     *  @param cli_session_id the CLI session ID the command was entered from.
     *
     *  @param command_name the command name to process.
     *
     *  @param command_args the command arguments to process.
     *
     *  @param ret_processor_name the processor name to return back to the CLI.
     *
     *  @param ret_cli_term_name the terminal name to return back.
     *
     *  @param ret_cli_session_id the CLI session ID to return back.
     *
     *  @param ret_command_output the command output to return back.
     */
    virtual XrlCmdError cli_processor_0_1_process_command(
	// Input values,
	const string&	processor_name,
	const string&	cli_term_name,
	const uint32_t&	cli_session_id,
	const string&	command_name,
	const string&	command_args,
	// Output values,
	string&	ret_processor_name,
	string&	ret_cli_term_name,
	uint32_t&	ret_cli_session_id,
	string&	ret_command_output) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback5<void, const XrlCmdError &,
	const string*,
	const string*,
	const uint32_t*,
	const string*>::RefPtr
    CliProcessor01ProcessCommandRF;

    class CliProcessor01ProcessCommandCB {
        CliProcessor01ProcessCommandRF cb;

    public:
        operator const CliProcessor01ProcessCommandRF& () const { return cb; }
        const CliProcessor01ProcessCommandRF& operator ->() const { return cb; }
        CliProcessor01ProcessCommandCB(const CliProcessor01ProcessCommandRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e, NULL, NULL, NULL, NULL); }

        void respond(const string& arg_ret_processor_name,
                     const string& arg_ret_cli_term_name,
                     const uint32_t& arg_ret_cli_session_id,
                     const string& arg_ret_command_output) const {
            cb->dispatch(XrlCmdError::OKAY(),
                         &arg_ret_processor_name,
                         &arg_ret_cli_term_name,
                         &arg_ret_cli_session_id,
                         &arg_ret_command_output);
        }
    };

    struct CliProcessor01ProcessCommandRsp :
      public CliProcessor01ProcessCommandCB {
        struct args_str {
            string ret_processor_name;
            string ret_cli_term_name;
            uint32_t ret_cli_session_id;
            string ret_command_output;
        };

    private:
        args_str args;

    public:
        CliProcessor01ProcessCommandRsp(const CliProcessor01ProcessCommandRF& cb)
          : CliProcessor01ProcessCommandCB(cb) { }

        void respond() const {
            CliProcessor01ProcessCommandCB::
            respond(args.ret_processor_name,
                        args.ret_cli_term_name,
                        args.ret_cli_session_id,
                        args.ret_command_output);
        }

        args_str* operator ->() {
            return &args;
        }
    };

    virtual void async_cli_processor_0_1_process_command
       (
	const string&	processor_name,
	const string&	cli_term_name,
	const uint32_t&	cli_session_id,
	const string&	command_name,
	const string&	command_args,
	CliProcessor01ProcessCommandCB);
#endif

private:
    XrlCmdRT handle_common_0_1_get_target_name(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_target_name
       (const XrlCmdError &e,
	const string* arg_name,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_version(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_version
       (const XrlCmdError &e,
	const string* arg_version,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_get_status(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_get_status
       (const XrlCmdError &e,
	const uint32_t* arg_status,
	const string* arg_reason,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_shutdown(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_shutdown
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_common_0_1_startup(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_common_0_1_startup
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_finder_event_observer_0_1_xrl_target_birth
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_finder_event_observer_0_1_xrl_target_death
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_create_term(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_create_term
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_delete_term(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_delete_term
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_update_term_block(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_update_term_block
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_create_policy(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_create_policy
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_delete_policy(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_delete_policy
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_create_set(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_create_set
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_update_set(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_update_set
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_delete_set(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_delete_set
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_add_to_set(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_add_to_set
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_delete_from_set(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_delete_from_set
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_done_global_policy_conf(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_done_global_policy_conf
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_import(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_import
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_export(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_export
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_add_varmap(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_add_varmap
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_dump_state(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_dump_state
       (const XrlCmdError &e,
	const string* arg_state,
        XrlRespCallback);
#endif

    XrlCmdRT handle_policy_0_1_set_proto_target(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_policy_0_1_set_proto_target
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_cli_processor_0_1_process_command(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_cli_processor_0_1_process_command
       (const XrlCmdError &e,
	const string* arg_ret_processor_name,
	const string* arg_ret_cli_term_name,
	const uint32_t* arg_ret_cli_session_id,
	const string* arg_ret_command_output,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlPolicyTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_POLICY_BASE_HH__
