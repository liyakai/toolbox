/*
 * obj/x86_64-unknown-linux-gnu/xrl/targets/test_fea_ifmgr_mirror_base.hh
 * vim:set sts=4 ts=8 ft=cpp:
 *
 * Copyright (c) 2001-2011 XORP, Inc and Others
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */


#ifndef __XRL_TARGETS_TEST_FEA_IFMGR_MIRROR_BASE_HH__
#define __XRL_TARGETS_TEST_FEA_IFMGR_MIRROR_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlTestFeaIfmgrMirrorTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlTestFeaIfmgrMirrorTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlTestFeaIfmgrMirrorTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlTestFeaIfmgrMirrorTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    const string& get_name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    const char* version() const { return "test_fea_ifmgr_mirror/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Register remote mirror of interface state.
     */
    virtual XrlCmdError ifmgr_replicator_0_1_register_ifmgr_mirror(
	// Input values,
	const string&	clientname) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    IfmgrReplicator01RegisterIfmgrMirrorRF;

    class IfmgrReplicator01RegisterIfmgrMirrorCB {
        IfmgrReplicator01RegisterIfmgrMirrorRF cb;

    public:
        operator const IfmgrReplicator01RegisterIfmgrMirrorRF& () const { return cb; }
        const IfmgrReplicator01RegisterIfmgrMirrorRF& operator ->() const { return cb; }
        IfmgrReplicator01RegisterIfmgrMirrorCB(const IfmgrReplicator01RegisterIfmgrMirrorRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct IfmgrReplicator01RegisterIfmgrMirrorRsp :
      public IfmgrReplicator01RegisterIfmgrMirrorCB {
        IfmgrReplicator01RegisterIfmgrMirrorRsp(const IfmgrReplicator01RegisterIfmgrMirrorRF& cb)
          : IfmgrReplicator01RegisterIfmgrMirrorCB(cb) { }

    };

    virtual void async_ifmgr_replicator_0_1_register_ifmgr_mirror
       (
	const string&	clientname,
	IfmgrReplicator01RegisterIfmgrMirrorCB);
#endif

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Register remote mirror of interface state.
     */
    virtual XrlCmdError ifmgr_replicator_0_1_unregister_ifmgr_mirror(
	// Input values,
	const string&	clientname) = 0;
#ifdef XORP_ENABLE_ASYNC_SERVER
    typedef
    XorpCallback1<void, const XrlCmdError &>::RefPtr
    IfmgrReplicator01UnregisterIfmgrMirrorRF;

    class IfmgrReplicator01UnregisterIfmgrMirrorCB {
        IfmgrReplicator01UnregisterIfmgrMirrorRF cb;

    public:
        operator const IfmgrReplicator01UnregisterIfmgrMirrorRF& () const { return cb; }
        const IfmgrReplicator01UnregisterIfmgrMirrorRF& operator ->() const { return cb; }
        IfmgrReplicator01UnregisterIfmgrMirrorCB(const IfmgrReplicator01UnregisterIfmgrMirrorRF& cb)
          : cb(cb) { }

        void fail(const XrlCmdError &e) const { cb->dispatch(e); }

        void respond() const {
            cb->dispatch(XrlCmdError::OKAY());
        }
    };

    struct IfmgrReplicator01UnregisterIfmgrMirrorRsp :
      public IfmgrReplicator01UnregisterIfmgrMirrorCB {
        IfmgrReplicator01UnregisterIfmgrMirrorRsp(const IfmgrReplicator01UnregisterIfmgrMirrorRF& cb)
          : IfmgrReplicator01UnregisterIfmgrMirrorCB(cb) { }

    };

    virtual void async_ifmgr_replicator_0_1_unregister_ifmgr_mirror
       (
	const string&	clientname,
	IfmgrReplicator01UnregisterIfmgrMirrorCB);
#endif

private:
    XrlCmdRT handle_ifmgr_replicator_0_1_register_ifmgr_mirror(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ifmgr_replicator_0_1_register_ifmgr_mirror
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    XrlCmdRT handle_ifmgr_replicator_0_1_unregister_ifmgr_mirror(const XrlArgs& in, XrlCmdOT out);
#ifdef XORP_ENABLE_ASYNC_SERVER
    void callback_ifmgr_replicator_0_1_unregister_ifmgr_mirror
       (const XrlCmdError &e,
        XrlRespCallback);
#endif

    void add_handlers();
    void remove_handlers();

    struct handler_table {
        const char *name;
        XrlCmdRT (XrlTestFeaIfmgrMirrorTargetBase::*method)(const XrlArgs&, XrlCmdOT);
    };

    static const struct handler_table handlers[];
    static const size_t num_handlers;
};

#endif // __XRL_TARGETS_TEST_FEA_IFMGR_MIRROR_BASE_HH__
