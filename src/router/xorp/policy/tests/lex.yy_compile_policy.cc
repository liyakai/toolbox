#line 2 "lex.yy_compile_policy.cc"

#line 4 "lex.yy_compile_policy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yy_compile_policyrestart(yy_compile_policyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yy_compile_policyleng;

extern FILE *yy_compile_policyin, *yy_compile_policyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yy_compile_policytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yy_compile_policytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yy_compile_policyrestart()), so that the user can continue scanning by
	 * just pointing yy_compile_policyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yy_compile_policytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yy_compile_policyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yy_compile_policywrap()'s to do buffer switches
 * instead of setting up a fresh yy_compile_policyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yy_compile_policyrestart (FILE *input_file  );
void yy_compile_policy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_compile_policy_create_buffer (FILE *file,int size  );
void yy_compile_policy_delete_buffer (YY_BUFFER_STATE b  );
void yy_compile_policy_flush_buffer (YY_BUFFER_STATE b  );
void yy_compile_policypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yy_compile_policypop_buffer_state (void );

static void yy_compile_policyensure_buffer_stack (void );
static void yy_compile_policy_load_buffer_state (void );
static void yy_compile_policy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_compile_policy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_compile_policy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_compile_policy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_compile_policy_scan_bytes (yyconst char *bytes,int len  );

void *yy_compile_policyalloc (yy_size_t  );
void *yy_compile_policyrealloc (void *,yy_size_t  );
void yy_compile_policyfree (void *  );

#define yy_new_buffer yy_compile_policy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yy_compile_policyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_compile_policy_create_buffer(yy_compile_policyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yy_compile_policyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_compile_policy_create_buffer(yy_compile_policyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yy_compile_policywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yy_compile_policyin = (FILE *) 0, *yy_compile_policyout = (FILE *) 0;

typedef int yy_state_type;

extern int yy_compile_policylineno;

int yy_compile_policylineno = 1;

extern char *yy_compile_policytext;
#define yytext_ptr yy_compile_policytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yy_compile_policytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yy_compile_policyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 27
#define YY_END_OF_BUFFER 28
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[701] =
    {   0,
        0,    0,    0,    0,   10,   10,   28,   26,   25,   24,
        1,   26,   26,   26,   26,   23,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,    2,    3,   12,   11,
       10,   10,    7,    8,    9,   25,    0,    0,    0,    0,
        0,    0,    0,   15,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   12,   10,   10,    8,    9,    8,
        9,    0,    0,    0,    0,    0,    0,   15,    0,    0,
       15,   15,   15,   15,   22,   19,   22,   22,   22,   22,
       22,   22,   22,    0,    0,    0,    0,    0,    0,    0,
        0,   15,   15,   15,   15,   16,   16,    0,   15,    0,

       15,   15,   15,   15,   22,   22,    5,   22,   22,   22,
       22,   17,    0,    0,    0,    0,    0,    0,   15,   15,
        0,   15,   15,   15,   15,   16,   16,   16,    0,    0,
        0,   15,   15,   15,   15,   15,   15,   15,   22,   22,
       22,   22,   22,    0,    0,    0,    0,    0,    0,    0,
        0,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   16,    0,    0,    0,    0,    0,   15,    0,
       15,    0,   15,   15,   15,   15,    6,   21,   20,   22,
        4,   13,   13,   13,    0,    0,    0,   15,   15,    0,
       15,   15,   15,   15,   15,   15,    0,   15,   15,   15,

       15,    0,    0,    0,    0,    0,    0,    0,   15,   15,
       15,   15,   15,   15,   15,    0,    0,   13,   13,   13,
       13,    0,    0,    0,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,    0,   15,    0,   15,   15,   15,   15,
        0,   14,   14,   14,   13,    0,    0,   15,   15,    0,
       15,   15,   15,   15,   15,   15,    0,   15,   15,   15,
       15,   15,   15,    0,   15,   15,   15,   15,   15,   15,
       15,    0,    0,    0,    0,    0,    0,    0,    0,   15,

       15,   15,   15,   15,   15,   15,    0,    0,    0,    0,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
        0,   15,    0,   15,   15,   15,   15,    0,    0,    0,
       15,   15,    0,   15,   15,   15,   15,   15,   15,    0,
       15,   15,   15,   15,   15,   15,    0,   15,   15,   15,
       15,   15,   15,    0,   15,   15,   15,   15,   15,   15,
       15,   15,    0,    0,    0,    0,    0,    0,    0,    0,

       15,   15,   15,   15,   15,   15,   15,    0,    0,    0,
        0,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   15,    0,   15,
        0,   15,   15,   15,   15,    0,    0,    0,    0,    0,
       15,    0,   15,    0,   15,   15,   15,   15,   15,   15,
        0,   15,   15,   15,   15,   15,   15,    0,   15,   15,
       15,   15,   15,   15,    0,   15,   15,   15,   15,   15,

       15,    0,   15,   15,   15,   15,   15,   15,   15,   15,
        0,    0,    0,    0,    0,    0,    0,    0,   15,   15,
       15,   15,   15,   15,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
        0,   15,    0,   15,   15,   15,   15,    0,    0,    0,
        0,    0,    0,   15,   15,    0,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,    0,    0,    0,    0,    0,    0,    0,    0,   15,
       15,   15,   15,    0,    0,    0,    0,    0,    0,    0,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   15,   15,   18,    0,    0,    0,    0,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
       15,   15,   15,   15,    0,    0,    0,    0,    0,   15,
       15,   15,   15,    0,   15,   15,   15,   15,    0,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   14,   14,   15,   16,   17,    1,
        1,    1,    1,    1,   18,   18,   18,   18,   19,   18,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   21,   22,   20,   20,   20,   20,   20,   20,
        1,    1,    1,    1,   23,    1,   24,   18,   25,   26,

       27,   18,   20,   20,   28,   20,   20,   29,   30,   31,
       32,   33,   20,   34,   35,   36,   37,   20,   20,   38,
       39,   20,   40,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    1,    2,    1,    3,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    6,    7,    8,    8,    1,
        1,    1,    1,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        7
    } ;

static yyconst flex_int16_t yy_base[924] =
    {   0,
        0,    0, 2177, 2176,   40,   42, 2177, 3856, 2162, 3856,
     3856,   78,   98,   38, 2146, 3856,  106,  138, 2141, 2134,
     2131, 2119, 2109, 2106, 2105, 2109, 3856, 3856,    0, 3856,
        0,   58, 3856,   50,   52, 2131,   54,  160, 2101, 2100,
      180,   51,   52,  189,  209,    0, 2093, 2078, 2076, 2067,
     2065, 2068, 2059, 2061,    0,    0,  203,   67,   69,   71,
       73, 2088,  239, 2087,   61,   79, 2061,  248,  161, 2067,
      270,  290,  229,  299,  308,    0, 2047, 2038, 2039, 2026,
     2028, 2021, 2024,  150, 2047, 2046,  322, 2045, 2000, 1999,
     1998,  332,  352,  299,  361,    0,  172,  201,  372,  392,

      405,  414,   64,  424, 1997, 1980,    0, 1977, 1976, 1984,
     1972,    0, 1986,  435, 1985, 1984, 1970, 1969,  444,  466,
      486,  426,  506,   86,  516, 3856,    0, 1957, 1965,  527,
     1964,  518,  537,  548,  568,  361,  577,  579, 1938, 1930,
     1916, 1894, 1901,  221, 1921, 1920,  582, 1916, 1905, 1892,
     1891,  592,  612,  426,  621,  623,  625,  636,  656,  518,
      665,  667, 3856,  260, 1900, 1899,  670, 1896,  670,  282,
      681,  701,  714,  723,  211,  733,    0,    0,    0, 1883,
        0, 1862,  743, 1857, 1857, 1846, 1842,  752,  774,  794,
      807,  816,  250,  826,  827,  838,  858,  871,  880,  299,

      890, 1851,  901, 1838, 1837, 1836,  911, 1835,  892,  921,
      932,  952,  537,  961,  963, 1803,  972, 1817, 1798,  981,
     1793, 1783, 1782, 1778,  991, 1011,  733, 1020, 1022, 1024,
     1035, 1055,  827, 1064, 1066, 1068, 1070, 1081, 1101,  892,
     1110, 1112,  321, 1787, 1774, 1115, 1773,  344, 1772, 1771,
     1117, 1768, 1117,  384, 1128, 1148, 1161, 1170,  310, 1180,
     1722,  456,  405, 3856, 1750, 1740, 1739, 1190, 1212, 1232,
     1245, 1254,  361, 1264, 1265, 1276, 1296, 1309, 1318,  394,
     1328, 1329, 1340, 1360, 1373, 1382,  446, 1392, 1745, 1402,
     1744, 1734, 1733, 1412, 1715, 1710, 1709, 1422, 1708, 1432,

     1434, 1445, 1465,  921, 1474, 1476, 1686, 1693, 1680, 1679,
     1487, 1507,  963, 1516, 1518, 1520, 1531, 1551,  981, 1560,
     1562, 1564, 1566, 1577, 1597, 1180, 1606, 1608, 1610, 1612,
     1623, 1643, 1265, 1652, 1654, 1687, 1686, 1657, 1683,  478,
     1671, 1660, 1659, 1657,  498, 1656, 1640, 1661, 1639, 1662,
      560, 1673, 1693, 1706, 1715,  488, 1725, 1608, 1627, 1624,
     1735, 1757, 1777, 1790, 1799,  537, 1809, 1810, 1821, 1841,
     1854, 1863,  575, 1873, 1874, 1885, 1905, 1918, 1927,  577,
     1937, 1938, 1949, 1969, 1982, 1991,  598, 2001, 1620, 1618,
     2011, 1616, 1615, 1614, 2021, 1594, 1593, 1592, 2031, 1591,

     2041, 2043, 2054, 2074, 1329, 2083, 2085, 1567, 1565, 1563,
     2094, 2116, 2136, 1392, 2145, 2147, 2149, 2160, 2180, 1434,
     2189, 2191, 2193, 2195, 2206, 2226, 1476, 2235, 2237, 2239,
     2241, 2252, 2272, 1725, 2281, 2283, 2285, 2287, 2298, 2318,
     1810, 2327, 2329, 1570, 1568, 2332, 1567,  625, 1548, 1547,
     2334, 1546,  648, 1545, 1542, 2336, 1529, 2337,  670, 2348,
     2368, 2381, 2390,  600, 2400, 1503, 1515, 2411, 2431, 1874,
     1523, 1513, 2441,    0, 2402, 2461,  687, 2471, 2472, 2483,
        0, 2496, 2505,  689, 2515, 2516, 2527,    0, 2540, 2549,
      703, 2559, 2560, 2571,    0, 2584, 2593,  708, 2603, 2604,

     2615,    0, 2628, 2637,  733, 2647, 1521, 1503, 2657, 1502,
     1502, 1501, 2667, 1498, 1485, 1462, 2677, 1461, 2687, 2689,
     2700, 2720, 1938, 2729, 2731, 1439, 1449,  764, 2742, 1446,
     1433, 2762,  754, 1413, 1400, 2733, 2772, 1399, 2774, 2776,
     2778, 1381, 2780, 2791, 2793, 1376, 2795, 2797, 2799, 1375,
     2810, 2812, 2814, 1374, 2816, 1370, 1369, 2820, 1356,  786,
     1356, 1355, 2823, 1354,  807, 1351, 1337, 2825, 1318, 2817,
      850, 2835,    0, 2848, 2857,  796, 2867, 1288, 1312, 2878,
     1311, 2022, 2668, 1306, 1305, 2869, 1292, 2887, 1291, 2888,
     1290, 2889, 1289, 2890, 1286, 2891, 1272, 1253, 1248, 2901,

     1247, 1247, 1243, 2911, 1242, 1229, 1228, 2921, 1227, 2931,
     2933, 1225, 2935, 1193,  871, 1207, 1206, 2938, 1205, 1194,
     1200, 1199, 1188, 1187, 1169, 1164, 1163, 1162, 1158, 2941,
     1157,  944, 1145, 1144, 2944, 1143, 1003, 1142, 1139, 2948,
     1121, 2950, 1118, 3856, 1116, 2961, 1114, 1098, 1096, 1095,
     1094, 1091, 1078, 1076, 1074, 1072, 1071, 2970, 1051, 1046,
     1033, 2980, 1031, 1029, 1007, 1024, 1002,  972, 2990,  949,
      942,  929, 2992,  928, 1047,  912,  880, 2994,  869,  867,
      854, 3003,  848,  835,  815,  790, 3012,  784,  769,  722,
      717, 3021,  691,  675,  668, 3023,  652,  646,  633, 3856,

     3038, 3046, 3054, 3062,  633, 3066, 3070, 3076, 3079, 3082,
     3086,  631, 3091,  604, 3097, 3098, 3102, 3107,  589,  582,
     3112, 3118, 3121, 3122, 3126, 3131,  566, 3137, 3140, 3143,
     3148,  560, 3154, 3155, 3159, 3164, 3170, 3175,  504, 3181,
      484, 3183, 3188, 3190, 3191, 3195, 3200, 3205, 3211, 3214,
     3217, 3220, 3223, 3228, 3233, 3234, 3238, 3243, 3249, 3254,
     3260, 3265,  478, 3271,  427, 3274,  415, 3276, 3280, 3284,
     3289, 3294, 3299, 3304, 3306, 3309, 3312, 3315, 3318, 3321,
     3326, 3330, 3334, 3339, 3345, 3350, 3356, 3361, 3367, 3372,
     3377,  390, 3380,  384, 3383,  350, 3385, 3389, 3393, 3398,

     3403, 3408, 3413, 3418, 3420, 3423, 3426, 3429, 3432, 3435,
     3440, 3444, 3449, 3455, 3460, 3466, 3471, 3477, 3482, 3488,
     3493, 3498,  344, 3501,  288, 3504,  282, 3506, 3510, 3515,
     3519, 3523, 3528, 3532, 3537, 3541, 3546, 3550, 3555, 3559,
     3564, 3569, 3571, 3574, 3577, 3580, 3583, 3586, 3591,  266,
     3595, 3599, 3604, 3610, 3615, 3621, 3626, 3632, 3637, 3643,
     3648, 3654, 3659, 3664,  241, 3667,  227, 3670,  207, 3671,
     3676, 3682, 3685, 3688, 3693, 3698, 3703, 3708, 3713, 3718,
     3723, 3728, 3730, 3733, 3736, 3739, 3742, 3745, 3750,  178,
     3756, 3758, 3763, 3768, 3773, 3778, 3783, 3788, 3793,  156,

     3796,  150, 3799, 3801, 3807, 3810, 3812, 3817, 3819, 3822,
     3825, 3827,  118, 3833, 3835,   51, 3838, 3840, 3842, 3844,
     3846, 3848, 3850
    } ;

static yyconst flex_int16_t yy_def[924] =
    {   0,
      700,    1,  701,  701,  702,  702,  700,  700,  700,  700,
      700,  700,   12,   13,  700,  700,  700,   17,   18,   17,
       17,   17,   18,   18,   18,   18,  700,  700,  703,  700,
      704,  704,  700,  700,  700,  700,  705,  700,  706,  707,
       38,   41,  707,  700,   17,   18,   18,   45,   45,   18,
       18,   18,   18,   18,  703,  704,  704,  700,  700,  700,
      700,  708,  700,  709,  710,  710,  711,  700,  710,  712,
      700,   71,   72,  713,   45,   18,   18,   18,   18,   18,
       18,   18,   18,  714,  709,  715,  715,  700,  700,  716,
      717,  700,   92,   93,  718,  719,  719,  720,  700,  700,

      721,   99,  102,  721,   18,   18,   18,   18,   18,   18,
       18,   18,  722,  700,  723,  700,  724,  725,  700,  700,
      700,  726,  120,  123,  726,  700,  727,  727,  728,  700,
      729,  730,  730,  700,  134,  135,  731,  730,   18,   18,
       18,   18,   18,  732,  723,  733,  733,  700,  700,  734,
      735,  700,  152,  153,  736,  737,  737,  700,  158,  159,
      738,  737,  700,  739,  729,  740,  740,  700,  700,  741,
      700,  700,  742,  171,  174,  742,   18,   18,   18,   18,
       18,  743,  700,  744,  700,  745,  746,  700,  700,  700,
      747,  189,  192,  747,  700,  700,  700,  748,  196,  199,

      748,  749,  700,  750,  700,  751,  700,  752,  753,  753,
      700,  211,  212,  754,  753,  700,  700,  744,  755,  755,
      700,  700,  756,  757,  700,  225,  226,  758,  759,  759,
      700,  231,  232,  760,  759,  761,  761,  700,  238,  239,
      762,  761,  763,  750,  764,  764,  700,  765,  752,  766,
      766,  700,  700,  767,  700,  700,  768,  255,  258,  768,
      700,  217,  700,  700,  700,  769,  770,  700,  700,  700,
      771,  269,  272,  771,  700,  700,  700,  772,  276,  279,
      772,  700,  700,  700,  773,  283,  286,  773,  774,  700,
      775,  700,  776,  700,  777,  700,  778,  700,  779,  780,

      780,  700,  302,  303,  781,  780,  700,  700,  782,  783,
      700,  311,  312,  784,  785,  785,  700,  317,  318,  786,
      785,  787,  787,  700,  324,  325,  788,  787,  789,  789,
      700,  331,  332,  790,  789,  775,  791,  791,  700,  792,
      777,  793,  793,  700,  794,  779,  795,  795,  700,  700,
      796,  700,  700,  797,  352,  355,  797,  700,  798,  799,
      700,  700,  700,  800,  362,  365,  800,  700,  700,  700,
      801,  369,  372,  801,  700,  700,  700,  802,  376,  379,
      802,  700,  700,  700,  803,  383,  386,  803,  700,  804,
      700,  805,  700,  806,  700,  807,  700,  808,  700,  809,

      810,  810,  700,  403,  404,  811,  810,  700,  700,  812,
      700,  700,  412,  413,  813,  814,  814,  700,  418,  419,
      815,  814,  816,  816,  700,  425,  426,  817,  816,  818,
      818,  700,  432,  433,  819,  818,  820,  820,  700,  439,
      440,  821,  820,  805,  822,  822,  700,  823,  807,  824,
      824,  700,  825,  809,  826,  826,  700,  700,  827,  700,
      700,  828,  460,  463,  828,  700,  829,  700,  468,  469,
      830,  831,  700,  832,  833,  473,  476,  833,  700,  700,
      834,  835,  480,  483,  835,  700,  700,  836,  837,  487,
      490,  837,  700,  700,  838,  839,  494,  497,  839,  700,

      700,  840,  841,  501,  504,  841,  700,  842,  700,  843,
      700,  844,  700,  845,  700,  846,  700,  847,  848,  848,
      700,  521,  522,  849,  848,  700,  700,  850,  700,  851,
      852,  529,  532,  852,  853,  854,  854,  855,  854,  856,
      856,  857,  856,  858,  858,  859,  858,  860,  860,  861,
      860,  862,  862,  863,  862,  843,  864,  864,  700,  865,
      845,  866,  866,  700,  867,  847,  868,  868,  700,  700,
      869,  700,  870,  871,  572,  575,  871,  700,  872,  700,
      873,  874,  874,  875,  700,  874,  876,  700,  877,  700,
      878,  700,  879,  700,  880,  700,  881,  700,  882,  700,

      883,  700,  884,  700,  885,  700,  886,  700,  887,  888,
      888,  889,  888,  700,  890,  873,  891,  891,  700,  700,
      892,  893,  894,  895,  896,  897,  898,  883,  899,  899,
      700,  900,  885,  901,  901,  700,  902,  887,  903,  903,
      700,  700,  904,  700,  905,  700,  906,  700,  907,  700,
      700,  700,  700,  700,  700,  700,  908,  700,  909,  700,
      910,  700,  911,  700,  912,  913,  906,  914,  914,  700,
      909,  915,  915,  700,  916,  911,  917,  917,  700,  700,
      918,  700,  919,  700,  700,  920,  700,  921,  700,  919,
      922,  922,  700,  921,  923,  923,  700,  700,  700,    0,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700
    } ;

static yyconst flex_int16_t yy_nxt[3898] =
    {   0,
        8,    9,   10,   11,    8,    8,    8,   12,   12,   13,
       14,   14,   14,   14,   14,   15,   16,   17,   17,   18,
       19,   18,    8,   20,   17,   21,   22,   23,   18,   18,
       18,   18,   24,   18,   25,   26,   18,   18,   18,   27,
       28,   32,   32,   32,   32,   43,   43,   43,   43,   43,
       43,   60,   60,   61,   61,  688,   33,   37,   33,   57,
       57,   62,   62,   63,   66,   66,   37,   39,   60,   60,
       61,   61,   60,   60,   61,   61,   39,  133,  133,   34,
       35,   34,   35,   37,  700,   38,   38,   38,   38,   38,
       38,   38,   38,   39,   39,   40,   40,   58,   59,  157,

      157,   40,   40,   40,   40,   41,   41,   41,   41,   41,
       42,   43,   43,   45,   45,   45,   45,   45,   45,   45,
       45,   39,  683,   45,   45,   46,   46,   46,   46,   45,
       45,   45,   45,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,  700,  663,   46,   46,  113,  113,  114,
      659,   46,   46,   46,   46,   37,   37,   65,   65,   65,
       65,   65,   65,   65,   65,   39,   39,   66,   66,  127,
      127,  128,  647,   66,   66,   66,   66,   69,   69,   69,
       69,   69,   69,   69,   69,   70,   71,   71,   72,   73,

       73,   73,   73,   73,   57,   57,   74,   74,  129,  129,
      130,  609,   74,   74,   74,   74,   75,   75,   75,   75,
       75,   75,   75,   75,  210,  210,   75,   75,  182,  182,
      183,  605,   75,   75,   75,   75,  104,  104,  104,  104,
      104,  104,   58,   59,   84,  601,   86,   86,   86,   86,
       86,   87,   88,   88,   70,   92,   92,   93,   94,   94,
       94,   94,   94,  230,  230,   95,   95,  202,  202,  203,
      581,   95,   95,   95,   95,   98,   70,   99,   99,   99,
       99,   99,   99,   99,   99,  100,  518,  101,  101,  206,
      206,  207,  514,  101,  101,  101,  101,  102,  102,  102,

      102,  102,  103,  104,  104,   70,  125,  125,  125,  125,
      125,  125,  237,  237,  100,  105,  105,  105,  105,  105,
      105,  105,  105,  301,  301,  105,  105,   84,  289,  289,
      290,  105,  105,  105,  105,  700,  700,   98,   70,  120,
      120,  120,  120,  120,  120,  120,  120,  121,  510,  122,
      122,  293,  293,  294,  400,  122,  122,  122,  122,  123,
      123,  123,  123,  123,  124,  125,  125,   70,  176,  176,
      176,  176,  176,  176,  316,  316,  121,   98,   70,  132,
      132,  132,  132,  132,  132,  132,  132,  100,  396,  133,
      133,  297,  297,  298,  392,  133,  133,  133,  133,  134,

      134,  135,  136,  136,  136,  136,  136,  323,  323,  137,
      137,   70,  264,  264,  264,  137,  137,  137,  137,  299,
      100,  138,  138,  138,  138,  138,  138,  138,  138,   98,
       70,  295,   70,  194,  194,  194,  194,  194,  194,  100,
      144,  121,  146,  146,  146,  146,  146,  147,  148,  148,
       70,  152,  152,  153,  154,  154,  154,  154,  154,  330,
      330,  155,  155,  264,  264,  264,  264,  155,  155,  155,
      155,   98,   70,  156,  156,  156,  156,  156,  156,  156,
      156,  121,  291,  157,  157,  390,  390,  391,  208,  157,
      157,  157,  157,  158,  158,  159,  160,  160,  160,  160,

      160,  402,  402,  161,  161,  394,  394,  395,  204,  161,
      161,  161,  161,  162,  162,  162,  162,  162,  162,  162,
      162,   98,   70,   98,   70,  201,  201,  201,  201,  201,
      201,  121,  164,  100,  166,  166,  166,  166,  166,  167,
      168,  168,  700,   70,  260,  260,  260,  260,  260,  260,
      417,  417,  100,  170,   70,  171,  171,  171,  171,  171,
      171,  171,  171,  172,  184,  173,  173,  398,  398,  399,
      163,  173,  173,  173,  173,  174,  174,  174,  174,  174,
      175,  176,  176,   70,   98,   70,  131,  144,  424,  424,
      431,  431,  172,  126,  100,  700,  700,   98,   70,  189,

      189,  189,  189,  189,  189,  189,  189,  190,  115,  191,
      191,  438,  438,  520,  520,  191,  191,  191,  191,  192,
      192,  192,  192,  192,  193,  194,  194,   70,   98,   70,
      700,   70,  508,  508,  509,   96,  190,   64,  121,   70,
      121,  170,   70,  196,  196,  196,  196,  196,  196,  196,
      196,  197,   70,  198,  198,  512,  512,  513,   70,  198,
      198,  198,  198,  199,  199,  199,  199,  199,  200,  201,
      201,   70,   98,   70,   70,  164,   70,  516,  516,  517,
      197,   70,  121,  700,  700,  100,  170,   70,  209,  209,
      209,  209,  209,  209,  209,  209,  172,   70,  210,  210,

      537,  537,  541,  541,  210,  210,  210,  210,  211,  211,
      212,  213,  213,  213,  213,  213,  545,  545,  214,  214,
       70,  549,  549,   70,  214,  214,  214,  214,   70,  172,
      215,  215,  215,  215,  215,  215,  215,  215,  170,   70,
      274,  274,  274,  274,  274,  274,  553,  553,  172,  217,
      219,  219,  219,  219,  219,  220,  221,  221,   70,  225,
      225,  226,  227,  227,  227,  227,  227,  583,  583,  228,
      228,  579,  579,  580,  675,  228,  228,  228,  228,   98,
       70,  229,  229,  229,  229,  229,  229,  229,  229,  190,
       70,  230,  230,  599,  599,  600,   70,  230,  230,  230,

      230,  231,  231,  232,  233,  233,  233,  233,  233,  611,
      611,  234,  234,   70,  603,  603,  604,  234,  234,  234,
      234,   70,  190,  235,  235,  235,  235,  235,  235,  235,
      235,   98,   70,   70,  281,  281,  281,  281,  281,  281,
      666,  190,  121,  170,   70,  236,  236,  236,  236,  236,
      236,  236,  236,  197,   70,  237,  237,  607,  607,  608,
       70,  237,  237,  237,  237,  238,  238,  239,  240,  240,
      240,  240,  240,   70,  675,  241,  241,   70,  645,  645,
      646,  241,  241,  241,  241,  675,  197,  242,  242,  242,
      242,  242,  242,  242,  242,  170,   70,  170,   70,  288,

      288,  288,  288,  288,  288,  197,  243,  172,  245,  245,
      245,  245,  245,  246,  247,  247,  248,  675,  250,  250,
      250,  250,  250,  251,  252,  252,  700,   70,  357,  357,
      357,  357,  357,  357,   70,   70,  172,  254,   70,  255,
      255,  255,  255,  255,  255,  255,  255,  256,   70,  257,
      257,  657,  657,  658,  666,  257,  257,  257,  257,  258,
      258,  258,  258,  258,  259,  260,  260,   70,  170,   70,
      367,  367,  367,  367,  367,  367,  256,  666,  172,  262,
      262,  262,  263,  264,  264,  264,  264,  217,  374,  374,
      374,  374,  374,  374,  700,  700,   98,   70,  269,  269,

      269,  269,  269,  269,  269,  269,  270,  666,  271,  271,
      661,  661,  662,   70,  271,  271,  271,  271,  272,  272,
      272,  272,  272,  273,  274,  274,   70,   98,   70,  700,
       70,  681,  681,  682,  637,  270,  675,  190,  675,  190,
      170,   70,  276,  276,  276,  276,  276,  276,  276,  276,
      277,  632,  278,  278,  686,  686,  687,   70,  278,  278,
      278,  278,  279,  279,  279,  279,  279,  280,  281,  281,
       70,   98,   70,  170,   70,  700,   70,   70,   70,  277,
       70,  190,   70,  197,   70,  197,  254,   70,  283,  283,
      283,  283,  283,  283,  283,  283,  284,   70,  285,  285,

       70,   70,   70,  615,  285,  285,  285,  285,  286,  286,
      286,  286,  286,  287,  288,  288,   70,  170,   70,  666,
      243,  666,  248,   70,   70,  284,  637,  197,  700,  700,
      700,  700,  172,  254,   70,  300,  300,  300,  300,  300,
      300,  300,  300,  256,  637,  301,  301,  637,  632,  632,
      632,  301,  301,  301,  301,  302,  302,  303,  304,  304,
      304,  304,  304,   70,   70,  305,  305,   70,   70,   70,
       70,  305,  305,  305,  305,   70,  256,  306,  306,  306,
      306,  306,  306,  306,  306,  254,   70,  381,  381,  381,
      381,  381,  381,   70,   70,  256,   70,  311,  311,  312,

      313,  313,  313,  313,  313,   70,   70,  314,  314,  530,
      615,  615,  615,  314,  314,  314,  314,   98,   70,  315,
      315,  315,  315,  315,  315,  315,  315,  270,  644,  316,
      316,   70,  637,  637,  565,  316,  316,  316,  316,  317,
      317,  318,  319,  319,  319,  319,  319,  632,  632,  320,
      320,   70,  560,   70,   70,  320,  320,  320,  320,   70,
      270,  321,  321,  321,  321,  321,  321,  321,  321,   98,
       70,   70,  388,  388,  388,  388,  388,  388,   70,  270,
      190,  170,   70,  322,  322,  322,  322,  322,  322,  322,
      322,  277,   70,  323,  323,   70,   70,   70,   70,  323,

      323,  323,  323,  324,  324,  325,  326,  326,  326,  326,
      326,   70,   70,  327,  327,   70,  615,  615,  614,  327,
      327,  327,  327,  565,  277,  328,  328,  328,  328,  328,
      328,  328,  328,  170,   70,   70,  465,  465,  465,  465,
      465,  465,  565,  277,  197,  254,   70,  329,  329,  329,
      329,  329,  329,  329,  329,  284,  565,  330,  330,  560,
      560,  560,   70,  330,  330,  330,  330,  331,  331,  332,
      333,  333,  333,  333,  333,   70,   70,  334,  334,   70,
       70,   70,   70,  334,  334,  334,  334,   70,  284,  335,
      335,  335,  335,  335,  335,  335,  335,  254,   70,  478,

      478,  478,  478,  478,  478,   70,   70,  284,   70,  337,
      337,  337,  337,  337,  338,  339,  339,  340,  528,  342,
      342,  342,  342,  342,  343,  344,  344,  345,  530,  347,
      347,  347,  347,  347,  348,  349,  349,  254,   70,  700,
       70,  485,  485,  485,  485,  485,  485,  256,  530,  256,
      351,   70,  352,  352,  352,  352,  352,  352,  352,  352,
      353,  585,  354,  354,  411,  578,  565,  565,  354,  354,
      354,  354,  355,  355,  355,  355,  355,  356,  357,  357,
       70,  254,   70,  492,  492,  492,  492,  492,  492,  353,
      453,  256,   98,   70,  362,  362,  362,  362,  362,  362,

      362,  362,  363,  560,  364,  364,  560,  448,   70,   70,
      364,  364,  364,  364,  365,  365,  365,  365,  365,  366,
      367,  367,   70,   98,   70,  700,   70,   70,  530,   70,
      411,  363,  526,  270,  453,  270,  170,   70,  369,  369,
      369,  369,  369,  369,  369,  369,  370,  453,  371,  371,
      453,  448,  448,  448,  371,  371,  371,  371,  372,  372,
      372,  372,  372,  373,  374,  374,   70,   98,   70,  170,
       70,  700,   70,   70,   70,  370,   70,  270,  411,  277,
      310,  277,  254,   70,  376,  376,  376,  376,  376,  376,
      376,  376,  377,  466,  378,  378,  453,  453,  345,  448,

      378,  378,  378,  378,  379,  379,  379,  379,  379,  380,
      381,  381,   70,  170,   70,  254,   70,  700,   70,  448,
      340,  377,   70,  277,   70,  284,   70,  284,  351,   70,
      383,  383,  383,  383,  383,  383,  383,  383,  384,  411,
      385,  385,  310,  408,  345,  345,  385,  385,  385,  385,
      386,  386,  386,  386,  386,  387,  388,  388,   70,  254,
       70,  345,  340,   70,  340,  340,  345,  384,   70,  284,
      700,  700,  700,  700,  700,  700,  340,  256,  351,   70,
      401,  401,  401,  401,  401,  401,  401,  401,  353,   70,
      402,  402,   70,   70,  361,  310,  402,  402,  402,  402,

      403,  403,  404,  405,  405,  405,  405,  405,  224,  358,
      406,  406,   70,  345,  345,  248,  406,  406,  406,  406,
      340,  353,  407,  407,  407,  407,  407,  407,  407,  407,
      351,   70,  499,  499,  499,  499,  499,  499,  340,  243,
      353,   70,  412,  412,  413,  414,  414,  414,  414,  414,
       70,   70,  415,  415,  310,  224,  217,  307,  415,  415,
      415,  415,   98,   70,  416,  416,  416,  416,  416,  416,
      416,  416,  363,  248,  417,  417,  248,  248,  243,  243,
      417,  417,  417,  417,  418,  418,  419,  420,  420,  420,
      420,  420,  243,  268,  421,  421,   70,  224,  151,  217,

      421,  421,  421,  421,  217,  363,  422,  422,  422,  422,
      422,  422,  422,  422,   98,   70,   70,  506,  506,  506,
      506,  506,  506,  217,  363,  270,  170,   70,  423,  423,
      423,  423,  423,  423,  423,  423,  370,  261,  424,  424,
      248,  248,  164,  243,  424,  424,  424,  424,  425,  425,
      426,  427,  427,  427,  427,  427,  243,  224,  428,  428,
       70,  151,  144,  217,  428,  428,  428,  428,  217,  370,
      429,  429,  429,  429,  429,  429,  429,  429,  170,   70,
       70,  534,  534,  534,  534,  534,  534,  216,  370,  277,
      254,   70,  430,  430,  430,  430,  430,  430,  430,  430,

      377,  164,  431,  431,  164,  164,  188,  151,  431,  431,
      431,  431,  432,  432,  433,  434,  434,  434,  434,  434,
       91,  144,  435,  435,   70,  144,  144,  181,  435,  435,
      435,  435,  180,  377,  436,  436,  436,  436,  436,  436,
      436,  436,  254,   70,   70,  577,  577,  577,  577,  577,
      577,  179,  377,  284,  351,   70,  437,  437,  437,  437,
      437,  437,  437,  437,  384,  178,  438,  438,  177,  164,
      164,  700,  438,  438,  438,  438,  439,  439,  440,  441,
      441,  441,  441,  441,  151,   91,  442,  442,   70,   84,
      144,  144,  442,  442,  442,  442,  143,  384,  443,  443,

      443,  443,  443,  443,  443,  443,  351,   70,  142,  141,
      140,  139,   39,  119,   91,   39,  384,   70,  445,  445,
      445,  445,  445,  446,  447,  447,  448,  528,  450,  450,
      450,  450,  450,  451,  452,  452,  453,  530,  455,  455,
      455,  455,  455,  456,  457,  457,  351,   70,  700,   70,
       84,   84,   84,  112,  111,  110,  353,  109,  353,  459,
       70,  460,  460,  460,  460,  460,  460,  460,  460,  461,
      108,  462,  462,  107,  106,   97,   91,  462,  462,  462,
      462,  463,  463,  463,  463,  463,  464,  465,  465,   70,
      351,   70,   84,   84,   83,   82,   81,   80,  461,   79,

      353,  468,  468,  469,  470,  470,  470,  470,  470,  471,
       78,  472,  472,   77,   76,   39,   68,  472,  472,  472,
      472,   98,   70,  473,  473,  473,  473,  473,  473,  473,
      473,  474,   36,  475,  475,   54,   53,   52,   51,  475,
      475,  475,  475,  476,  476,  476,  476,  476,  477,  478,
      478,   70,   98,   70,  700,   70,   50,   49,   48,   47,
      474,   44,  363,   36,  363,  170,   70,  480,  480,  480,
      480,  480,  480,  480,  480,  481,  700,  482,  482,   30,
       30,  700,  700,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  484,  485,  485,   70,   98,   70,  170,   70,

      700,   70,  700,  700,  481,  700,  363,  700,  370,  700,
      370,  254,   70,  487,  487,  487,  487,  487,  487,  487,
      487,  488,  700,  489,  489,  700,  700,  700,  700,  489,
      489,  489,  489,  490,  490,  490,  490,  490,  491,  492,
      492,   70,  170,   70,  254,   70,  700,   70,  700,  700,
      488,  700,  370,  700,  377,  700,  377,  351,   70,  494,
      494,  494,  494,  494,  494,  494,  494,  495,  700,  496,
      496,  700,  700,  700,  700,  496,  496,  496,  496,  497,
      497,  497,  497,  497,  498,  499,  499,   70,  254,   70,
      351,   70,  700,   70,  700,  700,  495,  700,  377,  700,

      384,  700,  384,  459,   70,  501,  501,  501,  501,  501,
      501,  501,  501,  502,  700,  503,  503,  700,  700,  700,
      700,  503,  503,  503,  503,  504,  504,  504,  504,  504,
      505,  506,  506,   70,  351,   70,  700,  700,   70,  448,
      700,  453,  502,   70,  384,  700,  700,  700,  700,  700,
      700,  700,  353,  459,   70,  519,  519,  519,  519,  519,
      519,  519,  519,  461,  700,  520,  520,  700,  700,  700,
      700,  520,  520,  520,  520,  521,  521,  522,  523,  523,
      523,  523,  523,  700,  700,  524,  524,   70,  700,  700,
      700,  524,  524,  524,  524,  700,  461,  525,  525,  525,

      525,  525,  525,  525,  525,  459,   70,  700,   70,  700,
      700,  700,  700,  700,  700,  461,  528,  474,  529,  529,
      529,  529,  529,  529,  529,  529,  530,  700,  531,  531,
      700,  700,  700,  700,  531,  531,  531,  531,  532,  532,
      532,  532,  532,  533,  534,  534,   98,   70,  536,  536,
      536,  536,  536,  536,  536,  536,  474,  700,  537,  537,
      700,  700,  700,  700,  537,  537,  537,  537,  539,  539,
      539,  539,  539,  539,  539,  539,   98,   70,   70,  700,
      700,  700,  700,  700,  700,  700,  474,  363,  170,   70,
      540,  540,  540,  540,  540,  540,  540,  540,  481,  700,

      541,  541,   70,  700,  700,  700,  541,  541,  541,  541,
      700,  481,  543,  543,  543,  543,  543,  543,  543,  543,
      170,   70,   70,  700,  700,  700,  700,  700,  700,  700,
      481,  370,  254,   70,  544,  544,  544,  544,  544,  544,
      544,  544,  488,  700,  545,  545,   70,  700,  700,  700,
      545,  545,  545,  545,  700,  488,  547,  547,  547,  547,
      547,  547,  547,  547,  254,   70,   70,  700,  700,  700,
      700,  700,  700,  700,  488,  377,  351,   70,  548,  548,
      548,  548,  548,  548,  548,  548,  495,  700,  549,  549,
       70,  700,  700,  700,  549,  549,  549,  549,  700,  495,

      551,  551,  551,  551,  551,  551,  551,  551,  351,   70,
       70,  700,  700,  700,  700,  700,  700,  700,  495,  384,
      459,   70,  552,  552,  552,  552,  552,  552,  552,  552,
      502,  700,  553,  553,   70,  700,  700,  700,  553,  553,
      553,  553,  700,  502,  555,  555,  555,  555,  555,  555,
      555,  555,  459,   70,  700,  700,  700,  700,  700,  700,
      700,  700,  502,   70,  557,  557,  557,  557,  557,  558,
      559,  559,  560,  700,  562,  562,  562,  562,  562,  563,
      564,  564,  565,  530,  567,  567,  567,  567,  567,  568,
      569,  569,  459,   70,  700,   70,  700,  700,  700,  700,

      700,  700,  461,  700,  461,  571,   70,  572,  572,  572,
      572,  572,  572,  572,  572,  573,  700,  574,  574,  700,
      700,  700,  700,  574,  574,  574,  574,  575,  575,  575,
      575,  575,  576,  577,  577,   70,  459,   70,   98,   70,
      700,  700,  700,  700,  573,  700,  461,  528,  474,  582,
      582,  582,  582,  582,  582,  582,  582,  530,  700,  583,
      583,  700,  700,  700,  700,  583,  583,  583,  583,  586,
      586,  586,  586,  586,  586,  586,  586,  700,   70,   98,
       70,  170,   70,  700,   70,  170,   70,  474,  700,  474,
      700,  481,  700,  481,  700,  481,  254,   70,  700,   70,

      254,   70,  351,   70,  700,   70,  488,  700,  488,  700,
      488,  700,  495,  700,  495,  351,   70,  459,   70,  700,
       70,  459,   70,   70,  700,  495,   70,  502,  560,  502,
      565,  502,  461,  700,  700,  700,  700,  700,  700,  700,
      571,   70,  610,  610,  610,  610,  610,  610,  610,  610,
      573,  700,  611,  611,   70,  700,  700,  700,  611,  611,
      611,  611,  700,  573,  613,  613,  613,  613,  613,  613,
      613,  613,  571,   70,  528,  700,  700,  700,  700,  700,
      700,  700,  573,  615,  530,  617,  617,  617,  617,  617,
      618,  619,  619,   70,   70,   70,   70,   70,  700,  700,

      700,  700,  474,  481,  488,  495,  502,   70,  629,  629,
      629,  629,  629,  630,  631,  631,  632,  700,  634,  634,
      634,  634,  634,  635,  636,  636,  637,  700,  639,  639,
      639,  639,  639,  640,  641,  641,  571,   70,  700,   70,
      571,   70,  700,  615,  700,  700,  573,   70,  573,  632,
      573,  700,  700,  637,  700,  700,   70,  700,  700,  700,
      700,  700,  700,  700,  700,  573,  666,  700,  668,  668,
      668,  668,  668,  669,  670,  670,   70,  672,  672,  672,
      672,  672,  673,  674,  674,  675,  700,  677,  677,  677,
      677,  677,  678,  679,  679,  666,  700,  700,   70,  675,

      700,  700,  700,  700,  700,  700,  700,  700,  700,   70,
      691,  691,  691,  691,  691,  692,  693,  693,   70,  695,
      695,  695,  695,  695,  696,  697,  697,   70,  700,   70,
      700,  700,  700,  700,  700,  700,  700,  700,   29,   29,
       29,   29,   29,   29,   29,   29,   31,   31,   31,   31,
       31,   31,   31,   31,   55,  700,   55,   55,   55,   55,
       55,   55,   56,   56,   56,   56,   56,   56,  700,   56,
       67,   67,  700,   67,   66,   66,  700,   66,   85,  700,
       85,   88,  700,   88,   89,  700,   89,   89,  700,   89,
       90,   90,  700,   90,  101,  101,  101,  700,  101,  116,

      700,  116,  117,  117,  700,  117,  118,  118,  700,  118,
      122,  122,  122,  700,  122,  133,  133,  133,  700,  133,
      145,  700,  145,  148,  700,  148,  149,  149,  700,  149,
      150,  150,  700,  150,  157,  157,  157,  700,  157,  165,
      700,  165,  168,  700,  168,  169,  169,  169,  169,  700,
      169,  173,  173,  173,  700,  173,  185,  700,  185,  186,
      186,  700,  186,  187,  187,  700,  187,  191,  191,  191,
      700,  191,  195,  195,  195,  195,  700,  195,  198,  198,
      198,  700,  198,  205,  700,  205,  210,  210,  210,  700,
      210,  218,  218,  221,  221,  222,  222,  700,  222,  223,

      223,  700,  223,  230,  230,  230,  700,  230,  237,  237,
      237,  700,  237,  244,  700,  244,  247,  700,  247,  249,
      700,  249,  252,  700,  252,  253,  253,  253,  253,  700,
      253,  257,  257,  257,  700,  257,  265,  265,  266,  266,
      700,  266,  267,  267,  700,  267,  271,  271,  271,  700,
      271,  275,  275,  275,  275,  700,  275,  278,  278,  278,
      700,  278,  282,  282,  282,  282,  700,  282,  285,  285,
      285,  700,  285,  292,  700,  292,  296,  700,  296,  301,
      301,  301,  700,  301,  308,  308,  700,  308,  309,  309,
      700,  309,  316,  316,  316,  700,  316,  323,  323,  323,

      700,  323,  330,  330,  330,  700,  330,  336,  336,  339,
      339,  341,  700,  341,  344,  700,  344,  346,  700,  346,
      349,  700,  349,  350,  350,  350,  350,  700,  350,  354,
      354,  354,  700,  354,  359,  359,  700,  359,  360,  360,
      700,  360,  364,  364,  364,  700,  364,  368,  368,  368,
      368,  700,  368,  371,  371,  371,  700,  371,  375,  375,
      375,  375,  700,  375,  378,  378,  378,  700,  378,  382,
      382,  382,  382,  700,  382,  385,  385,  385,  700,  385,
      389,  389,  393,  700,  393,  397,  700,  397,  402,  402,
      402,  700,  402,  409,  409,  700,  409,  410,  410,  700,

      410,  417,  417,  417,  700,  417,  424,  424,  424,  700,
      424,  431,  431,  431,  700,  431,  438,  438,  438,  700,
      438,  444,  444,  447,  447,  449,  700,  449,  452,  700,
      452,  454,  700,  454,  457,  700,  457,  458,  458,  458,
      458,  700,  458,  462,  462,  462,  700,  462,  467,  467,
      700,  467,  475,  475,  475,  700,  475,  479,  479,  479,
      479,  700,  479,  482,  482,  482,  700,  482,  486,  486,
      486,  486,  700,  486,  489,  489,  489,  700,  489,  493,
      493,  493,  493,  700,  493,  496,  496,  496,  700,  496,
      500,  500,  500,  500,  700,  500,  503,  503,  503,  700,

      503,  507,  507,  511,  700,  511,  515,  700,  515,  520,
      520,  520,  700,  520,  527,  527,  700,  527,  535,  535,
      700,  700,  535,  531,  531,  700,  531,  538,  700,  700,
      538,  537,  537,  537,  700,  537,  542,  700,  700,  542,
      541,  541,  541,  700,  541,  546,  700,  700,  546,  545,
      545,  545,  700,  545,  550,  700,  700,  550,  549,  549,
      549,  700,  549,  554,  700,  700,  554,  553,  553,  553,
      700,  553,  556,  556,  559,  559,  561,  700,  561,  564,
      700,  564,  566,  700,  566,  569,  700,  569,  570,  570,
      570,  570,  700,  570,  574,  574,  574,  700,  574,  584,

      584,  700,  584,  583,  583,  700,  583,  587,  587,  700,
      700,  587,  588,  588,  588,  588,  700,  588,  589,  589,
      700,  700,  589,  590,  590,  590,  590,  700,  590,  591,
      591,  700,  700,  591,  592,  592,  592,  592,  700,  592,
      593,  593,  700,  700,  593,  594,  594,  594,  594,  700,
      594,  595,  595,  700,  700,  595,  596,  596,  596,  596,
      700,  596,  597,  597,  700,  700,  597,  598,  598,  602,
      700,  602,  606,  700,  606,  612,  700,  700,  612,  611,
      611,  611,  700,  611,  616,  700,  616,  619,  700,  619,
      620,  700,  620,  620,  700,  620,  621,  621,  700,  700,

      621,  622,  622,  700,  700,  622,  623,  623,  700,  700,
      623,  624,  624,  700,  700,  624,  625,  625,  700,  700,
      625,  626,  626,  700,  700,  626,  627,  627,  700,  700,
      627,  628,  628,  631,  631,  633,  700,  633,  636,  700,
      636,  638,  700,  638,  641,  700,  641,  642,  642,  642,
      642,  700,  642,  643,  643,  700,  700,  643,  648,  700,
      648,  649,  649,  700,  700,  649,  650,  650,  700,  700,
      650,  651,  651,  700,  700,  651,  652,  652,  700,  700,
      652,  653,  653,  700,  700,  653,  654,  654,  700,  700,
      654,  655,  655,  700,  700,  655,  656,  656,  660,  700,

      660,  664,  700,  664,  665,  665,  700,  700,  665,  667,
      700,  667,  670,  700,  670,  585,  585,  700,  700,  585,
      671,  671,  674,  674,  676,  700,  676,  679,  700,  679,
      680,  680,  700,  700,  680,  684,  700,  684,  685,  685,
      689,  700,  689,  690,  690,  693,  693,  694,  694,  697,
      697,  698,  698,  699,  699,    7,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700

    } ;

static yyconst flex_int16_t yy_chk[3898] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    6,    6,   14,   14,   14,   14,   14,
       14,   34,   34,   35,   35,  916,    5,   43,    6,   32,
       32,   37,   37,   37,   42,   42,   65,   43,   58,   58,
       59,   59,   60,   60,   61,   61,   65,  103,  103,    5,
        5,    6,    6,   12,   66,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   66,   12,   12,   32,   32,  124,

      124,   12,   12,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   17,   17,   17,   17,   17,   17,   17,
       17,   17,  913,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   18,  902,   18,   18,   84,   84,   84,
      900,   18,   18,   18,   18,   38,   69,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   69,   38,   38,   97,
       97,   97,  890,   38,   38,   38,   38,   41,   41,   41,
       41,   41,   41,   41,   41,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   57,   57,   44,   44,   98,   98,
       98,  869,   44,   44,   44,   44,   45,   45,   45,   45,
       45,   45,   45,   45,  175,  175,   45,   45,  144,  144,
      144,  867,   45,   45,   45,   45,   73,   73,   73,   73,
       73,   73,   57,   57,   63,  865,   63,   63,   63,   63,
       63,   63,   63,   63,   68,   68,   68,   68,   68,   68,
       68,   68,   68,  193,  193,   68,   68,  164,  164,  164,
      850,   68,   68,   68,   68,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,  827,   71,   71,  170,
      170,  170,  825,   71,   71,   71,   71,   72,   72,   72,

       72,   72,   72,   72,   72,   74,   94,   94,   94,   94,
       94,   94,  200,  200,   74,   75,   75,   75,   75,   75,
       75,   75,   75,  259,  259,   75,   75,   87,  243,  243,
      243,   75,   75,   75,   75,   87,   87,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  823,   92,
       92,  248,  248,  248,  796,   92,   92,   92,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   95,  136,  136,
      136,  136,  136,  136,  273,  273,   95,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  794,   99,
       99,  254,  254,  254,  792,   99,   99,   99,   99,  100,

      100,  100,  100,  100,  100,  100,  100,  280,  280,  100,
      100,  101,  263,  263,  263,  100,  100,  100,  100,  767,
      101,  102,  102,  102,  102,  102,  102,  102,  102,  104,
      104,  765,  122,  154,  154,  154,  154,  154,  154,  104,
      114,  122,  114,  114,  114,  114,  114,  114,  114,  114,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  287,
      287,  119,  119,  262,  262,  262,  262,  119,  119,  119,
      119,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  763,  120,  120,  340,  340,  340,  741,  120,
      120,  120,  120,  121,  121,  121,  121,  121,  121,  121,

      121,  356,  356,  121,  121,  345,  345,  345,  739,  121,
      121,  121,  121,  123,  123,  123,  123,  123,  123,  123,
      123,  125,  125,  132,  132,  160,  160,  160,  160,  160,
      160,  125,  130,  132,  130,  130,  130,  130,  130,  130,
      130,  130,  133,  133,  213,  213,  213,  213,  213,  213,
      366,  366,  133,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  732,  134,  134,  351,  351,  351,
      727,  134,  134,  134,  134,  135,  135,  135,  135,  135,
      135,  135,  135,  137,  138,  138,  720,  147,  373,  373,
      380,  380,  137,  719,  138,  147,  147,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  714,  152,
      152,  387,  387,  464,  464,  152,  152,  152,  152,  153,
      153,  153,  153,  153,  153,  153,  153,  155,  156,  156,
      157,  157,  448,  448,  448,  712,  155,  705,  156,  699,
      157,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  698,  158,  158,  453,  453,  453,  697,  158,
      158,  158,  158,  159,  159,  159,  159,  159,  159,  159,
      159,  161,  162,  162,  695,  167,  169,  459,  459,  459,
      161,  694,  162,  167,  167,  169,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  693,  171,  171,

      477,  477,  484,  484,  171,  171,  171,  171,  172,  172,
      172,  172,  172,  172,  172,  172,  491,  491,  172,  172,
      173,  498,  498,  691,  172,  172,  172,  172,  690,  173,
      174,  174,  174,  174,  174,  174,  174,  174,  176,  176,
      227,  227,  227,  227,  227,  227,  505,  505,  176,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  533,  533,  188,
      188,  528,  528,  528,  689,  188,  188,  188,  188,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      688,  189,  189,  560,  560,  560,  686,  189,  189,  189,

      189,  190,  190,  190,  190,  190,  190,  190,  190,  576,
      576,  190,  190,  191,  565,  565,  565,  190,  190,  190,
      190,  685,  191,  192,  192,  192,  192,  192,  192,  192,
      192,  194,  194,  195,  233,  233,  233,  233,  233,  233,
      684,  194,  195,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  683,  196,  196,  571,  571,  571,
      681,  196,  196,  196,  196,  197,  197,  197,  197,  197,
      197,  197,  197,  680,  679,  197,  197,  198,  615,  615,
      615,  197,  197,  197,  197,  677,  198,  199,  199,  199,
      199,  199,  199,  199,  199,  201,  201,  209,  209,  240,

      240,  240,  240,  240,  240,  201,  203,  209,  203,  203,
      203,  203,  203,  203,  203,  203,  207,  676,  207,  207,
      207,  207,  207,  207,  207,  207,  210,  210,  304,  304,
      304,  304,  304,  304,  674,  672,  210,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  671,  211,
      211,  632,  632,  632,  670,  211,  211,  211,  211,  212,
      212,  212,  212,  212,  212,  212,  212,  214,  215,  215,
      313,  313,  313,  313,  313,  313,  214,  668,  215,  217,
      217,  217,  217,  217,  217,  217,  217,  220,  319,  319,
      319,  319,  319,  319,  220,  220,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  667,  225,  225,
      637,  637,  637,  665,  225,  225,  225,  225,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  229,  229,  230,
      230,  666,  666,  666,  664,  228,  663,  229,  661,  230,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  660,  231,  231,  675,  675,  675,  659,  231,  231,
      231,  231,  232,  232,  232,  232,  232,  232,  232,  232,
      234,  235,  235,  236,  236,  237,  237,  657,  656,  234,
      655,  235,  654,  236,  653,  237,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  652,  238,  238,

      651,  650,  649,  648,  238,  238,  238,  238,  239,  239,
      239,  239,  239,  239,  239,  239,  241,  242,  242,  647,
      246,  645,  251,  253,  643,  241,  641,  242,  246,  246,
      251,  251,  253,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  639,  255,  255,  638,  636,  634,
      633,  255,  255,  255,  255,  256,  256,  256,  256,  256,
      256,  256,  256,  631,  629,  256,  256,  257,  628,  627,
      626,  256,  256,  256,  256,  625,  257,  258,  258,  258,
      258,  258,  258,  258,  258,  260,  260,  326,  326,  326,
      326,  326,  326,  624,  623,  260,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  622,  621,  268,  268,  620,
      619,  617,  616,  268,  268,  268,  268,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  614,  269,
      269,  612,  609,  607,  606,  269,  269,  269,  269,  270,
      270,  270,  270,  270,  270,  270,  270,  605,  603,  270,
      270,  271,  602,  601,  599,  270,  270,  270,  270,  598,
      271,  272,  272,  272,  272,  272,  272,  272,  272,  274,
      274,  275,  333,  333,  333,  333,  333,  333,  597,  274,
      275,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  595,  276,  276,  593,  591,  589,  587,  276,

      276,  276,  276,  277,  277,  277,  277,  277,  277,  277,
      277,  585,  584,  277,  277,  278,  581,  579,  578,  277,
      277,  277,  277,  569,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  281,  281,  282,  405,  405,  405,  405,
      405,  405,  567,  281,  282,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  566,  283,  283,  564,
      562,  561,  559,  283,  283,  283,  283,  284,  284,  284,
      284,  284,  284,  284,  284,  557,  556,  284,  284,  285,
      554,  550,  546,  284,  284,  284,  284,  542,  285,  286,
      286,  286,  286,  286,  286,  286,  286,  288,  288,  414,

      414,  414,  414,  414,  414,  538,  535,  288,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  294,  534,  294,
      294,  294,  294,  294,  294,  294,  294,  298,  534,  298,
      298,  298,  298,  298,  298,  298,  298,  300,  300,  301,
      301,  420,  420,  420,  420,  420,  420,  300,  531,  301,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  530,  302,  302,  527,  526,  518,  516,  302,  302,
      302,  302,  303,  303,  303,  303,  303,  303,  303,  303,
      305,  306,  306,  427,  427,  427,  427,  427,  427,  305,
      515,  306,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  514,  311,  311,  512,  511,  510,  508,
      311,  311,  311,  311,  312,  312,  312,  312,  312,  312,
      312,  312,  314,  315,  315,  316,  316,  507,  472,  471,
      467,  314,  466,  315,  457,  316,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  455,  317,  317,
      454,  452,  450,  449,  317,  317,  317,  317,  318,  318,
      318,  318,  318,  318,  318,  318,  320,  321,  321,  322,
      322,  323,  323,  447,  445,  320,  444,  321,  410,  322,
      409,  323,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  408,  324,  324,  400,  398,  397,  396,

      324,  324,  324,  324,  325,  325,  325,  325,  325,  325,
      325,  325,  327,  328,  328,  329,  329,  330,  330,  394,
      393,  327,  392,  328,  390,  329,  389,  330,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  360,
      331,  331,  359,  358,  349,  347,  331,  331,  331,  331,
      332,  332,  332,  332,  332,  332,  332,  332,  334,  335,
      335,  346,  344,  338,  343,  342,  348,  334,  350,  335,
      338,  338,  343,  343,  348,  348,  341,  350,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  339,
      352,  352,  337,  336,  310,  309,  352,  352,  352,  352,

      353,  353,  353,  353,  353,  353,  353,  353,  308,  307,
      353,  353,  354,  299,  297,  296,  353,  353,  353,  353,
      295,  354,  355,  355,  355,  355,  355,  355,  355,  355,
      357,  357,  434,  434,  434,  434,  434,  434,  293,  292,
      357,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      291,  289,  361,  361,  267,  266,  265,  261,  361,  361,
      361,  361,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  252,  362,  362,  250,  249,  247,  245,
      362,  362,  362,  362,  363,  363,  363,  363,  363,  363,
      363,  363,  244,  224,  363,  363,  364,  223,  222,  221,

      363,  363,  363,  363,  219,  364,  365,  365,  365,  365,
      365,  365,  365,  365,  367,  367,  368,  441,  441,  441,
      441,  441,  441,  218,  367,  368,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  216,  369,  369,
      208,  206,  205,  204,  369,  369,  369,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  202,  187,  370,  370,
      371,  186,  185,  184,  370,  370,  370,  370,  182,  371,
      372,  372,  372,  372,  372,  372,  372,  372,  374,  374,
      375,  470,  470,  470,  470,  470,  470,  180,  374,  375,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  168,  376,  376,  166,  165,  151,  150,  376,  376,
      376,  376,  377,  377,  377,  377,  377,  377,  377,  377,
      149,  148,  377,  377,  378,  146,  145,  143,  377,  377,
      377,  377,  142,  378,  379,  379,  379,  379,  379,  379,
      379,  379,  381,  381,  382,  523,  523,  523,  523,  523,
      523,  141,  381,  382,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  140,  383,  383,  139,  131,
      129,  128,  383,  383,  383,  383,  384,  384,  384,  384,
      384,  384,  384,  384,  118,  117,  384,  384,  385,  116,
      115,  113,  384,  384,  384,  384,  111,  385,  386,  386,

      386,  386,  386,  386,  386,  386,  388,  388,  110,  109,
      108,  106,  105,   91,   90,   89,  388,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  395,  582,  395,  395,
      395,  395,  395,  395,  395,  395,  399,  582,  399,  399,
      399,  399,  399,  399,  399,  399,  401,  401,  402,  402,
       88,   86,   85,   83,   82,   81,  401,   80,  402,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
       79,  403,  403,   78,   77,   70,   67,  403,  403,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  406,
      407,  407,   64,   62,   54,   53,   52,   51,  406,   50,

      407,  411,  411,  411,  411,  411,  411,  411,  411,  411,
       49,  411,  411,   48,   47,   40,   39,  411,  411,  411,
      411,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,   36,  412,  412,   26,   25,   24,   23,  412,
      412,  412,  412,  413,  413,  413,  413,  413,  413,  413,
      413,  415,  416,  416,  417,  417,   22,   21,   20,   19,
      415,   15,  416,    9,  417,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,    7,  418,  418,    4,
        3,    0,    0,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  419,  419,  419,  421,  422,  422,  423,  423,

      424,  424,    0,    0,  421,    0,  422,    0,  423,    0,
      424,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,    0,  425,  425,    0,    0,    0,    0,  425,
      425,  425,  425,  426,  426,  426,  426,  426,  426,  426,
      426,  428,  429,  429,  430,  430,  431,  431,    0,    0,
      428,    0,  429,    0,  430,    0,  431,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,    0,  432,
      432,    0,    0,    0,    0,  432,  432,  432,  432,  433,
      433,  433,  433,  433,  433,  433,  433,  435,  436,  436,
      437,  437,  438,  438,    0,    0,  435,    0,  436,    0,

      437,    0,  438,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,    0,  439,  439,    0,    0,    0,
        0,  439,  439,  439,  439,  440,  440,  440,  440,  440,
      440,  440,  440,  442,  443,  443,    0,    0,  446,  451,
        0,  456,  442,  458,  443,  446,  446,  451,  451,  456,
      456,    0,  458,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,    0,  460,  460,    0,    0,    0,
        0,  460,  460,  460,  460,  461,  461,  461,  461,  461,
      461,  461,  461,    0,    0,  461,  461,  462,    0,    0,
        0,  461,  461,  461,  461,    0,  462,  463,  463,  463,

      463,  463,  463,  463,  463,  465,  465,    0,  475,    0,
        0,    0,    0,    0,    0,  465,  468,  475,  468,  468,
      468,  468,  468,  468,  468,  468,  468,    0,  468,  468,
        0,    0,    0,    0,  468,  468,  468,  468,  469,  469,
      469,  469,  469,  469,  469,  469,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,    0,  473,  473,
        0,    0,    0,    0,  473,  473,  473,  473,  476,  476,
      476,  476,  476,  476,  476,  476,  478,  478,  479,    0,
        0,    0,    0,    0,    0,    0,  478,  479,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,    0,

      480,  480,  482,    0,    0,    0,  480,  480,  480,  480,
        0,  482,  483,  483,  483,  483,  483,  483,  483,  483,
      485,  485,  486,    0,    0,    0,    0,    0,    0,    0,
      485,  486,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,    0,  487,  487,  489,    0,    0,    0,
      487,  487,  487,  487,    0,  489,  490,  490,  490,  490,
      490,  490,  490,  490,  492,  492,  493,    0,    0,    0,
        0,    0,    0,    0,  492,  493,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,    0,  494,  494,
      496,    0,    0,    0,  494,  494,  494,  494,    0,  496,

      497,  497,  497,  497,  497,  497,  497,  497,  499,  499,
      500,    0,    0,    0,    0,    0,    0,    0,  499,  500,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,    0,  501,  501,  503,    0,    0,    0,  501,  501,
      501,  501,    0,  503,  504,  504,  504,  504,  504,  504,
      504,  504,  506,  506,    0,    0,    0,    0,    0,    0,
        0,    0,  506,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  513,  583,  513,  513,  513,  513,  513,  513,
      513,  513,  517,  583,  517,  517,  517,  517,  517,  517,
      517,  517,  519,  519,  520,  520,    0,    0,    0,    0,

        0,    0,  519,    0,  520,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,    0,  521,  521,    0,
        0,    0,    0,  521,  521,  521,  521,  522,  522,  522,
      522,  522,  522,  522,  522,  524,  525,  525,  536,  536,
        0,    0,    0,    0,  524,    0,  525,  529,  536,  529,
      529,  529,  529,  529,  529,  529,  529,  529,    0,  529,
      529,    0,    0,    0,    0,  529,  529,  529,  529,  532,
      532,  532,  532,  532,  532,  532,  532,  537,  537,  539,
      539,  540,  540,  541,  541,  543,  543,  537,    0,  539,
        0,  540,    0,  541,    0,  543,  544,  544,  545,  545,

      547,  547,  548,  548,  549,  549,  544,    0,  545,    0,
      547,    0,  548,    0,  549,  551,  551,  552,  552,  553,
      553,  555,  555,  570,    0,  551,  558,  552,  563,  553,
      568,  555,  570,  558,  558,    0,  563,  563,  568,  568,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,    0,  572,  572,  574,    0,    0,    0,  572,  572,
      572,  572,    0,  574,  575,  575,  575,  575,  575,  575,
      575,  575,  577,  577,  586,    0,    0,    0,    0,    0,
        0,    0,  577,  580,  586,  580,  580,  580,  580,  580,
      580,  580,  580,  588,  590,  592,  594,  596,    0,    0,

        0,    0,  588,  590,  592,  594,  596,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  604,    0,  604,  604,
      604,  604,  604,  604,  604,  604,  608,    0,  608,  608,
      608,  608,  608,  608,  608,  608,  610,  610,  611,  611,
      613,  613,    0,  618,    0,    0,  610,  630,  611,  635,
      613,  618,  618,  640,  630,  630,  642,  635,  635,    0,
        0,  640,  640,    0,    0,  642,  646,    0,  646,  646,
      646,  646,  646,  646,  646,  646,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  662,    0,  662,  662,  662,
      662,  662,  662,  662,  662,  669,    0,    0,  673,  678,

        0,    0,    0,  669,  669,  673,  673,  678,  678,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  692,    0,  696,
        0,    0,    0,    0,  692,  692,  696,  696,  701,  701,
      701,  701,  701,  701,  701,  701,  702,  702,  702,  702,
      702,  702,  702,  702,  703,    0,  703,  703,  703,  703,
      703,  703,  704,  704,  704,  704,  704,  704,    0,  704,
      706,  706,    0,  706,  707,  707,    0,  707,  708,    0,
      708,  709,    0,  709,  710,    0,  710,  710,    0,  710,
      711,  711,    0,  711,  713,  713,  713,    0,  713,  715,

        0,  715,  716,  716,    0,  716,  717,  717,    0,  717,
      718,  718,  718,    0,  718,  721,  721,  721,    0,  721,
      722,    0,  722,  723,    0,  723,  724,  724,    0,  724,
      725,  725,    0,  725,  726,  726,  726,    0,  726,  728,
        0,  728,  729,    0,  729,  730,  730,  730,  730,    0,
      730,  731,  731,  731,    0,  731,  733,    0,  733,  734,
      734,    0,  734,  735,  735,    0,  735,  736,  736,  736,
        0,  736,  737,  737,  737,  737,    0,  737,  738,  738,
      738,    0,  738,  740,    0,  740,  742,  742,  742,    0,
      742,  743,  743,  744,  744,  745,  745,    0,  745,  746,

      746,    0,  746,  747,  747,  747,    0,  747,  748,  748,
      748,    0,  748,  749,    0,  749,  750,    0,  750,  751,
        0,  751,  752,    0,  752,  753,  753,  753,  753,    0,
      753,  754,  754,  754,    0,  754,  755,  755,  756,  756,
        0,  756,  757,  757,    0,  757,  758,  758,  758,    0,
      758,  759,  759,  759,  759,    0,  759,  760,  760,  760,
        0,  760,  761,  761,  761,  761,    0,  761,  762,  762,
      762,    0,  762,  764,    0,  764,  766,    0,  766,  768,
      768,  768,    0,  768,  769,  769,    0,  769,  770,  770,
        0,  770,  771,  771,  771,    0,  771,  772,  772,  772,

        0,  772,  773,  773,  773,    0,  773,  774,  774,  775,
      775,  776,    0,  776,  777,    0,  777,  778,    0,  778,
      779,    0,  779,  780,  780,  780,  780,    0,  780,  781,
      781,  781,    0,  781,  782,  782,    0,  782,  783,  783,
        0,  783,  784,  784,  784,    0,  784,  785,  785,  785,
      785,    0,  785,  786,  786,  786,    0,  786,  787,  787,
      787,  787,    0,  787,  788,  788,  788,    0,  788,  789,
      789,  789,  789,    0,  789,  790,  790,  790,    0,  790,
      791,  791,  793,    0,  793,  795,    0,  795,  797,  797,
      797,    0,  797,  798,  798,    0,  798,  799,  799,    0,

      799,  800,  800,  800,    0,  800,  801,  801,  801,    0,
      801,  802,  802,  802,    0,  802,  803,  803,  803,    0,
      803,  804,  804,  805,  805,  806,    0,  806,  807,    0,
      807,  808,    0,  808,  809,    0,  809,  810,  810,  810,
      810,    0,  810,  811,  811,  811,    0,  811,  812,  812,
        0,  812,  813,  813,  813,    0,  813,  814,  814,  814,
      814,    0,  814,  815,  815,  815,    0,  815,  816,  816,
      816,  816,    0,  816,  817,  817,  817,    0,  817,  818,
      818,  818,  818,    0,  818,  819,  819,  819,    0,  819,
      820,  820,  820,  820,    0,  820,  821,  821,  821,    0,

      821,  822,  822,  824,    0,  824,  826,    0,  826,  828,
      828,  828,    0,  828,  829,  829,    0,  829,  830,  830,
        0,    0,  830,  831,  831,    0,  831,  832,    0,    0,
      832,  833,  833,  833,    0,  833,  834,    0,    0,  834,
      835,  835,  835,    0,  835,  836,    0,    0,  836,  837,
      837,  837,    0,  837,  838,    0,    0,  838,  839,  839,
      839,    0,  839,  840,    0,    0,  840,  841,  841,  841,
        0,  841,  842,  842,  843,  843,  844,    0,  844,  845,
        0,  845,  846,    0,  846,  847,    0,  847,  848,  848,
      848,  848,    0,  848,  849,  849,  849,    0,  849,  851,

      851,    0,  851,  852,  852,    0,  852,  853,  853,    0,
        0,  853,  854,  854,  854,  854,    0,  854,  855,  855,
        0,    0,  855,  856,  856,  856,  856,    0,  856,  857,
      857,    0,    0,  857,  858,  858,  858,  858,    0,  858,
      859,  859,    0,    0,  859,  860,  860,  860,  860,    0,
      860,  861,  861,    0,    0,  861,  862,  862,  862,  862,
        0,  862,  863,  863,    0,    0,  863,  864,  864,  866,
        0,  866,  868,    0,  868,  870,    0,    0,  870,  871,
      871,  871,    0,  871,  872,    0,  872,  873,    0,  873,
      874,    0,  874,  874,    0,  874,  875,  875,    0,    0,

      875,  876,  876,    0,    0,  876,  877,  877,    0,    0,
      877,  878,  878,    0,    0,  878,  879,  879,    0,    0,
      879,  880,  880,    0,    0,  880,  881,  881,    0,    0,
      881,  882,  882,  883,  883,  884,    0,  884,  885,    0,
      885,  886,    0,  886,  887,    0,  887,  888,  888,  888,
      888,    0,  888,  889,  889,    0,    0,  889,  891,    0,
      891,  892,  892,    0,    0,  892,  893,  893,    0,    0,
      893,  894,  894,    0,    0,  894,  895,  895,    0,    0,
      895,  896,  896,    0,    0,  896,  897,  897,    0,    0,
      897,  898,  898,    0,    0,  898,  899,  899,  901,    0,

      901,  903,    0,  903,  904,  904,    0,    0,  904,  905,
        0,  905,  906,    0,  906,  907,  907,    0,    0,  907,
      908,  908,  909,  909,  910,    0,  910,  911,    0,  911,
      912,  912,    0,    0,  912,  914,    0,  914,  915,  915,
      917,    0,  917,  918,  918,  919,  919,  920,  920,  921,
      921,  922,  922,  923,  923,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_compile_policy_flex_debug;
int yy_compile_policy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yy_compile_policytext;
#line 1 "compilepolicy.l"
#line 2 "compilepolicy.l"
// XXX: this whole parsing is becoming a mess... Once we finalize how to test
// policy and what it should look like, it needs a re-write.

#include "libxorp/xorp.h"

#include "policy/test/compilepolicy.hh"
#include "yacc.yy_compile_policy.cc.h"
#include "policy/common/policy_utils.hh"


#define yylval yy_compile_policylval
#define yyparse yy_compile_policyparse
#define yyerror yy_compile_policyerror

void yyerror(const char *);
int yyparse(void);

namespace {
	unsigned _yy_lineno;
	string _yy_last_err;
}


#line 1619 "lex.yy_compile_policy.cc"

#define INITIAL 0
#define STR 1
#define BLOCK 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yy_compile_policywrap (void );
#else
extern int yy_compile_policywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yy_compile_policytext, yy_compile_policyleng, 1, yy_compile_policyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yy_compile_policyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yy_compile_policyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yy_compile_policyin))==0 && ferror(yy_compile_policyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yy_compile_policyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yy_compile_policylex (void);

#define YY_DECL int yy_compile_policylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yy_compile_policytext and yy_compile_policyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 54 "compilepolicy.l"


#line 1775 "lex.yy_compile_policy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yy_compile_policyin )
			yy_compile_policyin = stdin;

		if ( ! yy_compile_policyout )
			yy_compile_policyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yy_compile_policyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_compile_policy_create_buffer(yy_compile_policyin,YY_BUF_SIZE );
		}

		yy_compile_policy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yy_compile_policytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 701 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 700 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 56 "compilepolicy.l"
BEGIN(STR);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "compilepolicy.l"
return YY_LBRACE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 60 "compilepolicy.l"
return YY_RBRACE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "compilepolicy.l"
BEGIN(BLOCK); return YY_SOURCE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "compilepolicy.l"
BEGIN(BLOCK); return YY_DEST;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "compilepolicy.l"
BEGIN(BLOCK); return YY_ACTION;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "compilepolicy.l"
{ return YY_SEMICOLON; }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 67 "compilepolicy.l"
{  
	 	  _yy_lineno += policy_utils::count_nl(yy_compile_policytext);
	   	  return YY_LBRACE; 
					}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 71 "compilepolicy.l"
{
		  BEGIN(INITIAL);
		  _yy_lineno += policy_utils::count_nl(yy_compile_policytext);
		  return YY_RBRACE; 
					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 77 "compilepolicy.l"
{ yylval.c_str = strdup(yy_compile_policytext);
		  _yy_lineno += policy_utils::count_nl(yy_compile_policytext);
		  return YY_STATEMENT;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 83 "compilepolicy.l"
{ yylval.c_str = strdup(yy_compile_policytext); 
		  _yy_lineno += policy_utils::count_nl(yy_compile_policytext);
		  return YY_STR;
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "compilepolicy.l"
{
		  yylval.c_str = strdup(yy_compile_policytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 93 "compilepolicy.l"
{
		  yylval.c_str = strdup(yy_compile_policytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "compilepolicy.l"
{
		  yylval.c_str = strdup(yy_compile_policytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 103 "compilepolicy.l"
{
		  yylval.c_str = strdup(yy_compile_policytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "compilepolicy.l"
return YY_TERM;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 110 "compilepolicy.l"
return YY_POLICY_STATEMENT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 112 "compilepolicy.l"
return YY_SET;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 114 "compilepolicy.l"
return YY_IMPORT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 115 "compilepolicy.l"
return YY_EXPORT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 117 "compilepolicy.l"
{ yylval.c_str = strdup(yy_compile_policytext);
				  return YY_ID;
				}  
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "compilepolicy.l"
return YY_SEMICOLON;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 123 "compilepolicy.l"
_yy_lineno++;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "compilepolicy.l"
/* eat blanks */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "compilepolicy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 129 "compilepolicy.l"
ECHO;
	YY_BREAK
#line 2021 "lex.yy_compile_policy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
case YY_STATE_EOF(BLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yy_compile_policyin at a new source and called
			 * yy_compile_policylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yy_compile_policyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yy_compile_policywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yy_compile_policytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yy_compile_policylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_compile_policyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yy_compile_policyrestart(yy_compile_policyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 701 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 701 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 700);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yy_compile_policyrestart(yy_compile_policyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yy_compile_policywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yy_compile_policytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yy_compile_policyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yy_compile_policyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_compile_policy_create_buffer(yy_compile_policyin,YY_BUF_SIZE );
	}

	yy_compile_policy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_compile_policy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_compile_policy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yy_compile_policypop_buffer_state();
	 *		yy_compile_policypush_buffer_state(new_buffer);
     */
	yy_compile_policyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_compile_policy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yy_compile_policywrap()) processing, but the only time this flag
	 * is looked at is after yy_compile_policywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_compile_policy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yy_compile_policyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_compile_policy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yy_compile_policyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_compile_policy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_compile_policyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_compile_policy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_compile_policy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_compile_policy_create_buffer()
 * 
 */
    void yy_compile_policy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_compile_policyfree((void *) b->yy_ch_buf  );

	yy_compile_policyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yy_compile_policyrestart() or at EOF.
 */
    static void yy_compile_policy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_compile_policy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_compile_policy_init_buffer was _probably_
     * called from yy_compile_policyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_compile_policy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_compile_policy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yy_compile_policypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yy_compile_policyensure_buffer_stack();

	/* This block is copied from yy_compile_policy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_compile_policy_switch_to_buffer. */
	yy_compile_policy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yy_compile_policypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_compile_policy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_compile_policy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yy_compile_policyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yy_compile_policyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yy_compile_policyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_compile_policy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_compile_policyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_compile_policy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_compile_policy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yy_compile_policylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_compile_policy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_compile_policy_scan_string (yyconst char * yystr )
{
    
	return yy_compile_policy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yy_compile_policylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_compile_policy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yy_compile_policyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_compile_policy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_compile_policy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_compile_policy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yy_compile_policytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yy_compile_policytext[yy_compile_policyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yy_compile_policytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yy_compile_policyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yy_compile_policyget_lineno  (void)
{
        
    return yy_compile_policylineno;
}

/** Get the input stream.
 * 
 */
FILE *yy_compile_policyget_in  (void)
{
        return yy_compile_policyin;
}

/** Get the output stream.
 * 
 */
FILE *yy_compile_policyget_out  (void)
{
        return yy_compile_policyout;
}

/** Get the length of the current token.
 * 
 */
int yy_compile_policyget_leng  (void)
{
        return yy_compile_policyleng;
}

/** Get the current token.
 * 
 */

char *yy_compile_policyget_text  (void)
{
        return yy_compile_policytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yy_compile_policyset_lineno (int  line_number )
{
    
    yy_compile_policylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_compile_policy_switch_to_buffer
 */
void yy_compile_policyset_in (FILE *  in_str )
{
        yy_compile_policyin = in_str ;
}

void yy_compile_policyset_out (FILE *  out_str )
{
        yy_compile_policyout = out_str ;
}

int yy_compile_policyget_debug  (void)
{
        return yy_compile_policy_flex_debug;
}

void yy_compile_policyset_debug (int  bdebug )
{
        yy_compile_policy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yy_compile_policylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yy_compile_policyin = stdin;
    yy_compile_policyout = stdout;
#else
    yy_compile_policyin = (FILE *) 0;
    yy_compile_policyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yy_compile_policylex_init()
     */
    return 0;
}

/* yy_compile_policylex_destroy is for both reentrant and non-reentrant scanners. */
int yy_compile_policylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_compile_policy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yy_compile_policypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yy_compile_policyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yy_compile_policylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yy_compile_policyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yy_compile_policyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yy_compile_policyfree (void * ptr )
{
	free( (char *) ptr );	/* see yy_compile_policyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 129 "compilepolicy.l"



void yyerror(const char *m) {
        ostringstream oss;

        oss << "Error on line " <<  _yy_lineno << ": " << m;

        _yy_last_err = oss.str();
}


// XXX: no memory management [a lot of leaks... for simplicy]
int
do_parsing(const string& conf, string& outerr) {
        YY_BUFFER_STATE yybuffstate = yy_compile_policy_scan_string(conf.c_str());

        _yy_last_err = "No error";
        _yy_lineno =1;

        int res = yyparse();

	yy_compile_policy_delete_buffer(yybuffstate);
        outerr = _yy_last_err;

        return res;
}

